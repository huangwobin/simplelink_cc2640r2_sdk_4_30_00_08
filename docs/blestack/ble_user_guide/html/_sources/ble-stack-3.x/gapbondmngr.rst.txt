GAP Bond Manager and LE Secure Connections
------------------------------------------

The GAP Bond Manager (GAPBondMgr) is a configurable module that offloads most of the Pairing &
Bonding security mechanisms associated with the Security Manager (SM) protocol from the application.
The GAPBongMgr executes in the protocol stack task's context. :numref:`GAP-bond-manager-terminology` lists the terminology.

.. _GAP-bond-manager-terminology:
.. table:: GAP Bond Manager Terminology

    +----------------------+-----------------------------------------------------------------------+
    |     **Term**         |     **Description**                                                   |
    +----------------------+-----------------------------------------------------------------------+
    |     Pairing          |     The process of generating & exchanging keys. Not to be confused   |
    |                      |     with forming or establishing a BLE connection between two devices |
    +----------------------+-----------------------------------------------------------------------+
    |     Encryption       |     Data is encrypted after pairing, or re-encryption (a subsequent   |
    |                      |     connection where keys are looked up from nonvolatile memory).     |
    +----------------------+-----------------------------------------------------------------------+
    |     Association      |     The pairing method used based on the I/O Capabilities of both     |
    |                      |     devices. For LE devices, Just Works, Numeric Comparison,          |
    |                      |     Passkey Entry and Out-Of-Band are supported.                      |
    +----------------------+-----------------------------------------------------------------------+
    |     Authentication   |     The pairing process using an association method that supports     |
    |                      |     MITM (Man in the Middle) protection.                              |
    +----------------------+-----------------------------------------------------------------------+
    |     Bonding          |     Storing the keys generated during the pairing process in          |
    |                      |     nonvolatile memory to use for the next encryption sequence.       |
    +----------------------+-----------------------------------------------------------------------+
    |     Authorization    |     An additional application level verification in addition to       |
    |                      |     authentication.                                                   |
    +----------------------+-----------------------------------------------------------------------+
    |     OOB              |     Out of Band. Pairing keys are not exchanged over the air, but     |
    |                      |     rather over some other source such as serial port or NFC. This    |
    |                      |     also provides MITM protection.                                    |
    +----------------------+-----------------------------------------------------------------------+
    |     MITM             |     Man in the Middle protection. MITM provides authentication        |
    |                      |     during the pairing process which helps prevent a malicious        |
    |                      |     attacker from impersonating the peer device during the key        |
    |                      |     exchange.                                                         |
    +----------------------+-----------------------------------------------------------------------+
    |     Just Works       |     Unauthenticated pairing association method where keys are         |
    |                      |     exchanged without MITM protection.                                |
    +----------------------+-----------------------------------------------------------------------+



The general process that the GAPBondMgr uses is as follows:

1. The pairing process: exchange keys through the methods described in
:ref:`selection_of_pairing_method`.

2. The encryption process: Encrypt the link using keys Step 1.

3. The bonding process: store keys in secure flash (Simple Non Volatile memory,
:term:`SNV`).

4. Reconnecting: Use the keys stored in SNV to encrypt the link.

.. tip::
   Performing all of these steps is not necessary. For example,
   two devices may choose to pair but not bond.
.. _selection_of_pairing_method:

Selection of Pairing Method
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Bluetooth Core Specification Version 4.2 added support for the *LE Secure Connections*
feature to enable additional strength to the BLE pairing process. For a detailed
description of the algorithms used for *LE Secure Connections*, see the
**Security Architecture** section of the |CORESPEC|.
The previous pairing methods used in the Bluetooth Core Specification Versions 4.1
and 4.0 are still available, and are now defined as *LE Legacy Pairing*.
The main difference is that *Secure Connection* uses Elliptic Curve Diffie-Hellman (ECDH)
cryptography, while LE Legacy Pairing does not.

There are four types of pairing methods which are referred to as "Association Models" in the core
specification. Each pairing method is described in detail
in :ref:`GAPBondMgr_examples_for_different_pairing_modes`.

-  Just Works (LE Secure Connections or LE Legacy)

-  Passkey Entry (LE Secure Connections or LE Legacy)

-  Numeric Comparison (LE Secure Connections)

-  Out Of Band (LE Secure Connections or LE Legacy)

Which pairing method is selected, and whether or not pairing will succeed
depends on the following parameters from both peer devices during the pairing process:

- Out Of Band (OOB) set / not set

- Man In The Middle (MITM) set / not set

- Input/Output (IO) Capabilities

- LE Secure Connections supported / not supported

The GAPBondMgr parameters, as they map to the table parameters below are listed
here. For more information on these parameters, see :ref:`ble_api_reference`
(GAPBondMgr section).

-  :c:type:`GAPBOND_LOCAL_OOB_SC_ENABLED`: Out of band (OOB) set / not set

-  :c:type:`GAPBOND_MITM_PROTECTION`: Man in the middle (MITM) set / not set

-  :c:type:`GAPBOND_IO_CAPABILITIES`: In/out (IO) Capabilities

-  :c:type:`GAPBOND_SECURE_CONNECTION`: Secure connections supported / not
   supported

   Beyond what the |CORESPEC| defines, this parameter also affects whether or not
   pairing succeeds, as described in :ref:`ble_api_reference` (GAPBondMgr
   section).

The tables below are from the **Selecting Key Generation Method** section
([Vol 3], Part H, Section 2.3.5.1) of the |CORESPEC|. Use these tables to
determine which pairing mode is selected for any set of parameters.

If both devices support LE Secure Connections, use
:numref:`gappbondmgr_secur_connection_parameters` to decide upon the next step.

.. _gappbondmgr_secur_connection_parameters:
.. figure:: resources/image136.jpeg
    :align: center

    GAPBondMgr parameters when LE Secure Connections is supported by both devices.

If at least one device does **not** support LE Secure Connections, use
:numref:`gappbondmgr_no_secur_connection_parameters` to decide upon the next step.

.. _gappbondmgr_no_secur_connection_parameters:
.. figure:: resources/image137.jpeg
    :align: center

    GAPBondMgr parameters when LE Secure Connections is **not** supported by one or both devices.

If, based on one of the previous tables, IO capabilities are to be used to
determine the association model, use :numref:`gappbondmgr_io_capabilities_parameters`

.. _gappbondmgr_io_capabilities_parameters:
.. figure:: resources/image138.jpeg
    :align: center

    GAPBondMgr parameters with IO capabilities

Using GAPBondMgr
^^^^^^^^^^^^^^^^

This section describes what the application must do to configure, start, and use
the GAPBondMgr. The GAPRole handles some of the GAPBondMgr functionality. The
GAPBondMgr is defined in ``gapbondmgr.c`` and ``gapbondmgr.h``.
:ref:`ble_api_reference` (GAPBondMgr section) describes the full API including
commands, configurable parameters, events, and callbacks.

The general steps to use the GAPBondMgr module are as follows:

1. Configure the stack to include GAPBondMgr functionality by defining the
following in ``build_config.opt`` in the stack project:

   -  ``-DGAP_BOND_MGR``

2. The stack must also be configured to use 1 or 2 SNV pages, by defining
``OSAL_SNV=1`` or ``OSAL_SNV=2`` as a preprocessor-defined symbol in the stack
project.

3. If using LE Secure Connections, the PDU size must be >= 69. This can be set by
defining the following preprocessor symbol in the application
project: ``MAX_PDU_SIZE=69``. Also, the minimum heap size that can be used with
LE Secure Connections is 3690. (See :ref:`dynamic_memory_allocation` for heap size
management.)

4. Configure the GAPBondMgr by initializing its parameters as desired. See
:ref:`ble_api_reference` (GAPBondMgr section) for a complete list of parameters
with functionality described. There are examples of this for the various
pairing/bonding modes in :ref:`GAPBondMgr_examples_for_different_pairing_modes`.

5. Register application callbacks with the GAPBondMgr, so that the application
can communicate with the GAPBondMgr and be notified of events.

  .. code-block:: c

      // Register with bond manager after starting device
      GAPBondMgr_Register(&bondmanager_callbacks);

Here ``bondmanager_callbacks`` is defined as a structure containing the
GAPBondMgr Callbacks. A passcode callback function is mandatory.

  .. code-block:: c

    // Bond Manager Callbacks
    static gapBondCBs_t SimpleBLECentral_bondCB =
    {
        (pfnPasscodeCB_t)SimpleBLECentral_passcodeCB, // Passcode callback
        SimpleBLECentral_pairStateCB                  // Pairing / Bonding state Callback
    };

6. Once the GAPBondMgr is configured, it operates mostly autonomously from the
perspective of the application. When a connection is established, the GAPBondMgr
manages pairing and bonding depending on the configuration parameters set
during initialization. It also communicates with the application as needed
through the defined callbacks.

A few parameters can be set and functions can be called asynchronously at any time from
the application. See :ref:`ble_api_reference` (GAPBondMgr section) for more
information.

Most communication between the GAPBondMgr and the application at this point
occurs through the callbacks which were registered in Step 5.
:numref:`gapbondmgr_flow_diagram` is a flow diagram example of the GAPBondMgr
notifying the application that pairing has been completed. The same method
occurs for various other events and will be expanded upon in the following section.

.. _gapbondmgr_flow_diagram:
.. uml::
  :caption: GapBondMgr Callback Example.
  :align: center

  @startuml
    participant Application
    participant Gapbondmgr as "GAPBondMgr"
    participant BLEStack as "BLE Stack"

    BLEStack -> Gapbondmgr : GAP_AUTHENTICATION_\nCOMPLETE_EVENT
    Gapbondmgr -> Application : Pairing state callback
    Application-> Application : SimpleBLECentral_pairStateCB
    Application-> Application : SimpleBLECentral_enqueueMsg
    Application-> Application : SimpleBLECentral_processAppMsg
    rnote over "Application"
      SBC_PAIRING_STATE_EVT
    end note
    Application-> Application : SimpleBLECentral_processPairState
    rnote over "Application"
      GAPBOND_PAIRING_STATE_COMPLETE
    end note

  @enduml


.. _GAPBondMgr_examples_for_different_pairing_modes:

GAPBondMgr Examples for Different Pairing Methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This section provides message diagrams for the types of security
that can be implemented. These modes assume acceptable I/O
capabilities are available for the security mode, and that the
selection of whether or not to support LE Secure Connections allows for
the pairing method. See the :ref:`selection_of_pairing_method` on how these
parameters affect pairing. These examples only consider the pairing aspect.
Bonding can be added to each type of pairing in the same manner and
is shown in the next section.

.. caution::
   The code snippets here are not complete functioning
   examples, and are only intended for illustration purposes.

Disabling Pairing
"""""""""""""""""

With pairing mode set to ``GAPBOND_PAIRING_MODE_NO_PAIRING``, the BLE stack
automatically rejects any attempt at pairing.
Configure the GAPBondMgr as follows to disable pairing:

.. code-block:: c

    // Pairing is not allowed
    uint8_t pairMode = GAPBOND_PAIRING_MODE_NO_PAIRING;
    GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &pairMode);

Enabling Pairing
""""""""""""""""

To start or allow the pairing process after a connection is formed, the GAPBondMgr can be
configured to automatically request pairing or wait for pairing request from the
peer device. The actual behavior depends on the device's GAP role (Central or Peripheral)
and the setting of the GAPBondMgr pairing mode (``GAPBOND_PAIRING_MODE``).

To initiate the pairing process on Peripheral role devices, ``GAPBOND_PAIRING_MODE_INITIATE`` will
send a Slave Security Request shortly after the GAPBondMgr is informed that the connection is formed.
For Central role devices, ``GAPBOND_PAIRING_MODE_INITIATE`` will send a Pairing Request or request
the Link Layer to encrypt the link if the device has previously paired/bonded:

.. code-block:: c

    // Initiate pairing request
    uint8_t pairMode = GAPBOND_PAIRING_MODE_INITIATE;
    GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &pairMode);


The Peripheral can be configured to wait for a *Pairing Request* from the Central when the pairing mode
is set to ``GAPBOND_PAIRING_MODE_WAIT_FOR_REQ``. When this pairing mode is selected, the GAPBondMgr will
automatically respond with a *Pairing Response* based on other GAPBondMgr configured parameters.

.. code-block:: c

    // Wait for a pairing request
    uint8_t pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
    GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &pairMode);


.. tip:: When pairing with smartphone Central devices, it is recommended to use ``GAPBOND_PAIRING_MODE_WAIT_FOR_REQ``
         as undefined behavior may occur when a Slave Security Request is sent by the Peripheral. Both iOS
         and Android will initiate pairing when the peripheral responds with an *Insufficient Authentication* error
         response when a GATT secure characteristic is accessed.

.. _lesc-intro:

LE Secure Connections
"""""""""""""""""""""

LE Secure Connections (LESC) is enabled by default in |STACK|. If you don't want
to use LE Secure Connections, set the ``GAPBOND_SECURE_CONNECTION`` variable
to ``GAPBOND_SECURE_CONNECTION_NONE`` during the GAPBondMgr initialization.

.. code-block:: c

  uint8_t gapbondSecure = GAPBOND_SECURE_CONNECTION_NONE;
  GAPBondMgr_SetParameter(GAPBOND_SECURE_CONNECTION, sizeof(uint8_t), &gapbondSecure);

It is important when trying to decipher over-the-air sniffer logs with Secure
Connections enabled, you need to use a specific "debug" key as defined by Vol 3
Part H section 2.3.5.6.1 of the |CORESPEC|. In the |STACK|, this key is
enabled when the GAPBondMgr has ``SC_HOST_DEBUG`` defined in the stack project.
When either the initiating or non-initiating device uses this specific debug
key, it enables over-the-air sniffer equipment that supports LE Secure Connections to
determine the :term:`LTK` and therefore monitor/decrypt encrypted traffic throughout
the connection.

LESC Limitations & Recommendations
""""""""""""""""""""""""""""""""""

LE Secure Connections uses an ECDH public-private key pair as part of the
pairing process. See :ref:`selection_of_pairing_method` and the *LE Secure
Connections Pairing Phase 2* section of the |CORESPEC| for more information
about how these keys and how they are used in the pairing process.

To summarize, as part of LESC pairing Phase 1 each device will generate its own
ECDH public-private key pair. As part of LESC pairing Phase 2 each device will
compute the Diffie-Hellman (DH) Key based on the public keys that are exchanged.

ECC public-private and DH key generation is implemented in the ROM software
on the |DEVICE|. These routines are **blocking** by nature and take ~160ms to
execute. During LESC pairing, the ECC ROM will be accessed twice by the **link
layer (LL)** once to generate the public/private key pair and again to generate
the DH key. This means the user application and other stack OSAL tasks will
be blocked for 160ms twice during pairing.

Because of this, TI recommends the following when using LESC:

 - Supervision timeout >= 165ms
 - Expect/design for at least 160ms of blocking during LESC pairing

To alleviate the amount of blocking required, the user application can
generate the public-private key pair ahead of the pairing process, or it can
define when the keys should be recycled by using the following parameters of
the GapBondMgr. These options are mutually exclusive, as generation of keys
by the application bypasses the recycle parameter.

 - :ble_api:`GAPBOND_ECC_KEYS`
 - :ble_api:`GAPBOND_ECCKEY_REGEN_POLICY`

Just Works Pairing
""""""""""""""""""

Just Works pairing allows encryption without man in the middle (MITM)
authentication and is vulnerable to MITM attacks. Just Works pairing can be LE
Legacy or LE Secure Connections pairing. The GAPBondMgr does not need any
additional input from the application for Just Works pairing.
Configure the GAPBondMgr for Just Works pairing as follows.

.. code-block:: c

  uint8_t mitm = FALSE;
  GAPBondMgr_SetParameter( GAPBOND_MITM_PROTECTION, sizeof (uint8_t), &mitm);

:numref:`gap_justworks_fig` describes the interaction between the GAPBondMgr and
the application for Just Works pairing. As shown, the application receives a
``GAPBOND_PAIRING_STATE_STARTED`` event once the pairing request has been sent,
and a ``GAPBOND_PAIRING_STATE_COMPLETE`` event once the pairing process has been
completed. At this time, the link is encrypted.

.. _gap_justworks_fig:
.. uml::
  :caption: Just Works Pairing.
  :align: center

   @startuml

    participant Application
    participant GAPRole
    participant Gapbondmgr as "GAPBondMgr"
    participant BLEStack as "BLE Stack"

    BLEStack -> GAPRole : GAP_LINK_ESTABLISHED_EVENT
    GAPRole -> Gapbondmgr : GAPBondMgr_LinkEst()
    Gapbondmgr -> BLEStack : GAP_Authenticate()
    BLEStack -->] : Pairing req
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_STARTED
    end note

    BLEStack -->] : Encryption req
    BLEStack <--] : Encryption rsp
    BLEStack -> Gapbondmgr : GAP_AUTHENTICATION_\nCOMPLETE_EVENT
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_COMPLETE
    end note
  @enduml

Passcode Entry
""""""""""""""

Passkey entry is a type of authenticated pairing that can prevent man in the
middle (MITM) attacks. It can be used with either LE Legacy pairing or Secure
Connections pairing. In this pairing method, one device displays a 6-digit
passcode, and the other device enters the passcode. As described in
:ref:`selection_of_pairing_method`, the IO capabilities decide which device
performs which role. The passcode callback registered with the GAPBondMgr when
it was started is used to enter or display the passcode. The following is an
example of initiating Passcode Entry pairing where the passcode is displayed.

1. Define passcode callback

.. _gapbondmgr_define_passcode_cb:
.. code-block:: c
  :caption: Define passcode callback.

  // Bond Manager Callbacks
    static gapBondCBs_t SimpleBLECentral_bondCB =
    {
        (pfnPasscodeCB_t)SimpleBLECentral_passcodeCB, // Passcode callback
        SimpleBLECentral_pairStateCB                  // Pairing / Bonding state Callback
    };

    /*********************************************************************
    * @fn      SimpleBLECentral_passcodeCB
    *
    * @brief   Passcode callback.
    *
    * @return  none
    */
    static void SimpleBLECentral_passcodeCB(uint8_t *deviceAddr, uint16_t connHandle, uint8_t uiInputs, uint8_t uiOutputs)
    {
        uint8_t *pData;

        // Allocate space for the passcode event.
        if ((pData = ICall_malloc(sizeof(uiOutputs))))
        {
            *pData = uiOutputs;

            // Enqueue the event.
            SimpleBLECentral_enqueueMsg(SBC_PASSCODE_NEEDED_EVT, 0, pData);
        }
    }

2. Configure GAPBondMgr

.. code-block:: c
  :caption: Configure GAPBondMgr for MITM.

  uint8_t pairMode = GAPBOND_PAIRING_MODE_INITIATE;
  uint8_t mitm = TRUE;
  GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &uint8_t pairMode = GAPBOND_PAIRING_MODE_INITIATE;
  GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &mitm);

3. Process passcode callback and send the response to the stack.

.. _gapbondmgr_process_passcode:
.. code-block:: c
  :caption: Process passcode and send the response.

  //! BLE Default Passcode
  #define B_APP_DEFAULT_PASSCODE                    123456

  static void SimpleBLECentral_processPasscode(uint16_t connectionHandle, uint8_t uiOutputs)
  {
    // This app uses a default passcode. A real-life scenario would handle all
    // pairing scenarios and likely generate this randomly.
    uint32_t passcode = B_APP_DEFAULT_PASSCODE;

    // Display passcode to user
    if (uiOutputs != 0)
    {
        Display_print1(dispHandle, 4, 0, "Passcode: %d", passcode);
    }

    // Send passcode response
    GAPBondMgr_PasscodeRsp(connectionHandle, SUCCESS, passcode);
  }

Depending on the ``uiInputs`` and ``uiOutputs`` returned from the GAPBondMgr,
the passcode must either be displayed or entered. The passcode is
then sent to the GAPBondMgr using :ble_api:`GAPBondMgr_PasscodeRsp`, so that
pairing can continue. In this case, the password is statically set to 123456.
In a real product, the password will likely be randomly generated, and the
device must expose a way for the user to enter the passcode, then send it to the
GAPBondMgr using :ble_api:`GAPBondMgr_PasscodeRsp`. An example interaction
between the GAPBondMgr and the application is shown in
:numref:`gapbondmgr_exchange_passcode`.

.. _gapbondmgr_exchange_passcode:
.. uml::
  :caption: Interaction Between the GAPBondMgr and the Application when exchanging a passcode.
  :align: center

   @startuml
    participant Application
    participant GAPRole
    participant Gapbondmgr as "GAPBondMgr"
    participant BLEStack as "BLE Stack"

    BLEStack -> GAPRole : GAP_LINK_ESTABLISHED_EVENT
    GAPRole -> Gapbondmgr : GAPBondMgr_LinkEst()
    Gapbondmgr -> BLEStack : GAP_Authenticate()
    BLEStack -->] : Pairing req
    Gapbondmgr -> Application : Pairing state callback

    rnote over Application
    GAPBOND_PAIRING_
    STATE_STARTED
    end note

    BLEStack -> Gapbondmgr : GAP_PASSKEY_NEEDED_\nEVENT
    Gapbondmgr -> Application : Passcode callback
    [--> Application : Enter or display\npasscode
    Application -> Gapbondmgr : GAPBondMgr_PasscodeRsp()
    Gapbondmgr -> BLEStack : GAP_PasscodeUpdate()
    BLEStack -->] : Encryption req
    BLEStack <--] : Encryption rsp
    BLEStack -> Gapbondmgr : GAP_AUTHENTICATION_\nCOMPLETE_EVENT
    Gapbondmgr -> Application : Pairing state callback

    rnote over Application
    GAPBOND_PAIRING_
    STATE_COMPLETE
    end note
  @enduml


Numeric Comparison
""""""""""""""""""

Numeric comparison is a type of authenticated pairing that protects
from MITM attacks. It is only possible as a LE Secure Connections
pairing; not LE legacy. For numeric comparison pairing, both devices
display a 6-digit code. Each device must then indicate, through a
button press or some other yes-no input, whether the codes match.
The passcode callback registered with the GAPBondMgr when it was
started is used to display the 6-digit code. The following is an
example of initiating Numeric Comparison pairing where the passcode
is displayed. The IO capabilities must be set appropriately to
select numeric comparison (that is, Display/Yes-No on both sides).

1. Define passcode callback to display code.

.. _gapbondmgr_define_passcode:
.. code-block:: c
  :caption: Define passcode callback to display code.
  :linenos:

  // Bond Manager Callbacks
  static gapBondCBs_t SimpleBLECentral_bondCB =
  {
    (pfnPasscodeCB_t)SimpleBLECentral_passcodeCB, //Passcode callback
    SimpleBLECentral_pairStateCB                  //Pairing state callback
  };

  static void SimpleBLECentral_passcodeCB (uint8_t *deviceAddr, uint16_t connHandle, uint8_t uiInputs, uint8_t uiOutputs, uint32_t numComparison)
  {
    gapPasskeyNeededEvent_t *pData;

    // Allocate space for the passcode event.
    if ((pData = ICall_malloc(sizeof(gapPasskeyNeededEvent_t))))
    {
      memcpy(pData->deviceAddr, deviceAddr, B_ADDR_LEN);
      pData->connectionHandle = connHandle;
      pData->numComparison = numComparison;

      // Enqueue the event.
      SimpleBLECentral_enqueueMsg(SEC_PASSCODE_NEEDED_EVT, 0, (uint8_t *) pData);

2. Configure GAPBondMgr

.. _gapbondmgr_authenticate_configure:
.. code-block:: c
  :caption: Configure GAPBondMgr For Secure Connections + Authentication.
  :linenos:

  uint8_t pairMode = GAPBOND_PAIRING_MODE_WAIT_FOR_REQ;
  uint8_t scMode = GAPBOND_SECURE_CONNECTION_ONLY;
  uint8_t mitm = TRUE;
  uint8_t ioCap = GAPBOND_IO_CAP_DISPLAY_YES_NO;

  GAPBondMgr_SetParameter(GAPBOND_IO_CAPABILITIES, sizeof(uint8_t), &ioCap);
  GAPBondMgr_SetParameter(GAPBOND_PAIRING_MODE, sizeof(uint8_t), &pairMode);
  GAPBondMgr_SetParameter(GAPBOND_MITM_PROTECTION, sizeof(uint8_t), &mitm);
  GAPBondMgr_SetParameter(GAPBOND_SECURE_CONNECTION, sizeof(uint8_t), &scMode);

3. Process passcode callback and display code.

.. _gapbondmgr_authenticate_process:
.. code-block:: c
  :caption: Process passcode callback and display code.
  :linenos:

  static void SimpleBLECentral_processPasscode (uint16_t connectionHandle, gapPasskeyNeededEvent_t *pData)
  {

    if (pData->numComparison) //numeric comparison
    {

      //Display passcode
      DISPLAY_WRITE_STRING_VALUE("Num Cmp: %d", pData->numComparison, LCD_PAGE4);
    }
  }

4. Accept Yes-No input from user and send response to GAPBondMgr.

.. _gapbondmgr_authenticate_accept:
.. code-block:: c
  :caption: Accept Yes-No input from user and send response to GAPBondMgr.
  :linenos:

  if (keys & KEY_RIGHT)
  {
    GAPBondMgr_PasscodeRsp(connHandle, SUCCESS, TRUE);
    DISPLAY_WRITE_STRING("Codes Match!", LCD_PAGE5);
    return;
  }

In this case, the third parameter of GAPBondMgr\_PasscodeRsp, which
usually accepts a passcode, is overloaded to send TRUE to the stack to
indicate that the codes match and to continue with pairing. The process of numeric comparison is illustrated in :numref:`numeric_comparison_fig`.

.. _numeric_comparison_fig:
.. uml::
  :caption: Numeric Comparison.
  :align: center

   @startuml
    participant Application
    participant GAPRole
    participant Gapbondmgr as "GAPBondMgr"
    participant BLEStack as "BLE Stack"

    BLEStack -> GAPRole : GAP_LINK_ESTABLISHED_EVENT
    GAPRole -> Gapbondmgr : GAPBondMgr_LinkEst()
    Gapbondmgr -> BLEStack : GAP_Authenticate
    BLEStack -->] : Pairing req
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_STARTED
    end note

    BLEStack -> Gapbondmgr : GAP_PASSKEY_\nNEEDED_EVENT
    Gapbondmgr -> Application : Passcode callback

    [<-- Application : Display code
    [--> Application : Codes match

    Application -> Gapbondmgr : GAPBondMgr_PasscodeRsp()
    Gapbondmgr -> BLEStack : GAP_PasscodeUpdate()

    BLEStack -->] : Encryption req
    BLEStack <--] : Encryption rsp
    BLEStack -> Gapbondmgr : GAP_AUTHENTICATION_\nCOMPLETE_EVENT
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_COMPLETE
    end note
  @enduml


GAPBondMgr Example With Bonding Enabled
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Bonding can enabled or disabled for any type of pairing through the
``GAPBOND_BONDING_ENABLED`` parameter, and occurs after the pairing
process is complete. To enable bonding, configure the GAPBondMgr as
follows:

.. code-block:: c

  uint8_t bonding = TRUE;
  GAPBondMgr_SetParameter(GAPBOND_BONDING_ENABLED, sizeof(uint8_t), &bonding);

With bonding enabled, the GAPBondMgr stores the long-term key
transferred during the pairing process to SNV. See :ref:`gapbondmgr_and_snv` for more information. After this is completed, the application is notified
through the :c:type:`GAPBOND_PAIRING_STATE_COMPLETE` event. :c:type:`GAPBOND_PAIRING_STATE_BOND_SAVED` is only passed to the application pair
state callback when initially connecting, pairing, and bonding. For
future connections to a bonded device, the security keys are loaded from
flash, thus skipping the pairing process. In this case, only
:c:type:`GAPBOND_PAIRING_STATE_BONDED` is passed to the application pair state callback. This is illustrated in :numref:`gapbondmgr_example_bonding`


.. _gapbondmgr_example_bonding:
.. uml::
  :caption: GAPBondMgr Example With Bonding Enabled.
  :align: center

   @startuml

    participant Application
    participant GAPRole
    participant Gapbondmgr as "GAPBondMgr"
    participant BLEStack as "BLE Stack"

    BLEStack -> GAPRole : GAP_LINK_ESTABLISHED_EVENT
    GAPRole -> Gapbondmgr : GAPBondMgr_LinkEst()
    Gapbondmgr -> BLEStack : GAP_Authenticate
    BLEStack -->] : Pairing req
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_STARTED
    end note

    == This section will vary depending on the pairing type.\nSee above examples for more information. ==

    BLEStack -->] : Encryption req
    BLEStack <--] : Encryption rsp
    BLEStack -> Gapbondmgr : GAP_AUTHENTICATION_\nCOMPLETE_EVENT

    rnote over Gapbondmgr
    Save bond info in SNV
    end note

    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_COMPLETE
    end note

    rnote over Application
    GAPBOND_PAIRING_
    STATE_BOND_SAVED
    end note

    == Eventually the connection may be terminated and re-established. ==

    BLEStack -> GAPRole : GAP_LINK_ESTABLISHED_EVENT
    GAPRole -> Gapbondmgr : GAPBondMgr_LinkEst()

    rnote over Gapbondmgr
    Read bond info from SNV.
    end note

    Gapbondmgr -> BLEStack : GAP_Bond()
    BLEStack -->] : Encryption req
    BLEStack <--] : Encryption rsp
    BLEStack -> Gapbondmgr : GAP_BOND_COMPLETE_\nEVENT
    Gapbondmgr -> Application : Pairing state callback
    rnote over Application
    GAPBOND_PAIRING_
    STATE_BONDED
    end note


  @enduml


.. _gapbondmgr_and_snv:

GAPBondMgr and SNV
^^^^^^^^^^^^^^^^^^

This section describes how the GAPBondMgr uses the SNV flash area
for storing bonding information. For more information on SNV itself,
see :ref:`flash`. The amount of bonds that can be stored
is set by the ``GAP_BONDINGS_MAX`` definition, which is set to 10 by default in
gapbondmgr.h. The functionality of the GAPBondMgr when there are no
more available bonds varies based on whether the "least recently
used" scheme is enabled. See :ref:`ble_api_reference` (GAPBondMgr section) for
more information
on the ``GAPBOND_LRU_BOND_REPLACEMENT`` parameter. If this parameter is set
to false, it is not possible to add any more bonds without manually
deleting a bond. If the parameter is set to true, the least recently
used bond is deleted to make room for the new bond.

The following components comprise one bonding entry:

1. **Bond Record:** this consists of the peer's address, address type,
   privacy reconnection address, and state flags. This comprises 14
   bytes and is defined as such:

.. code-block:: c

  typedef struct
  {
    uint8   publicAddr[B_ADDR_LEN];     // Peer's address
    uint8   publicAddrType;             // Peer's address type
    uint8   reconnectAddr[B_ADDR_LEN];  // Privacy Reconnection Address
    uint8   stateFlags;                 // State flags: @ref GAP_BONDED_STATE_FLAGS
  } gapBondRec_t;

2. **Client Characteristic Configurations (CCC):** the amount of CCCs stored
   in each entry are set by the ``GAP_CHAR_CFG_MAX`` define. This is
   set to 4 by default. Each CCC is comprised of 4-bytes and is
   defined as follows:

.. code-block:: c

  // Structure of NV data for the connected device's characteristic configuration
  typedef struct
  {
    uint16 attrHandle;  // attribute handle
    uint8  value;       // attribute value for this device
  } gapBondCharCfg_t;

3. **Local Long Term Key (LTK) info:** this stores the local device's
   encryption information. This comprises 28 bytes and is composed
   as such:

.. code-block:: c

  typedef struct
  {
    uint8   LTK[KEYLEN];              // Long Term Key (LTK)
    uint16  div;  //lint -e754        // LTK eDiv
    uint8   rand[B_RANDOM_NUM_SIZE];  // LTK random number
    uint8   keySize;                  // LTK key size
  } gapBondLTK_t;

4. **Connected Device Long Term Key Info:** this stores the connected
   device's encryption information. This is also a gapBondLTK\_t and
   comprises 28 bytes.

5. **Connected Device Identity Resolving Key (IRK):** this stores the IRK
   generated during pairing. This is a 16-byte array.

6. **Connected Device Sign Resolving Key (SRK):** this stores the SRK
   generated during pairing. This is a 16-byte array.

7. **Connected Device Sign counter:** this stores the sign counter generated
   during pairing. This is a 4-byte word.

Increasing Number of Bonding Entries
""""""""""""""""""""""""""""""""""""

The amount of bonds that can be stored is set by the ``GAP_BONDINGS_MAX``
definition, which is set to 10 by default in gapbondmgr.h. However, due to the
structure of SNV, if a ``GAP_BONDINGS_MAX`` value of more than 13 is needed,
then there are some additional required changes to support storage of the larger
number of bonds:

1. Modify ``GAP_BONDINGS_MAX`` to the desired maximum number of bonding entries
   to store before requiring deletion of old bonds. The value of
   ``GAP_BONDINGS_MAX`` should not exceed 32.

2. In the file ``bcomdef.h``, modify the start and end ranges of Bonding NV
   Items, GATT Configuration NV Items, and Customer NV Items. This is done by
   modifying BLE_NVID_GAP_BOND_END, BLE_NVID_GATT_CFG_START,
   BLE_NVID_GATT_CFG_END, BLE_NVID_CUST_START, and BLE_NVID_CUST_END. The
   modifications must follow these rules:

   -  **For GAP:** (BLE_NVID_GAP_BOND_END - BLE_NVID_GAP_BOND_START) >=
      GAP_BONDINGS_MAX*6

   -  **For GATT:** (BLE_NVID_GATT_CFG_END - BLE_NVID_GATT_CFG_START) >=
      GAP_BONDINGS_MAX.

   -  No overlap can exist between any of the ranges.

   -  All indexes are 1 Byte values and so should note exceed 0xFF or 255.

.. note::
   Any change in the bonding configuration, such as increasing the max number of
   bonding entries, must be followed by a full erase of the NV. Since there is
   no API in the stack for doing this, the erase must be performed using a
   programming tool such as CCS or Uniflash.
