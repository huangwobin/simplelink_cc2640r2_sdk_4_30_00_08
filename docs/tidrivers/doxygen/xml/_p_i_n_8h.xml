<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_p_i_n_8h" kind="file" language="C++">
    <compoundname>PIN.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="_a_d_c_c_c26_x_x_8h" local="no">ADCCC26XX.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x2_8h" local="no">ADCBufCC26X2.h</includedby>
    <includedby refid="_a_d_c_buf_c_c26_x_x_8h" local="no">ADCBufCC26XX.h</includedby>
    <includedby refid="_i2_s_c_c26_x_x_8h" local="no">I2SCC26XX.h</includedby>
    <includedby refid="_p_d_m_c_c26_x_x_8h" local="no">PDMCC26XX.h</includedby>
    <includedby refid="_p_i_n_c_c26_x_x_8h" local="no">PINCC26XX.h</includedby>
    <includedby refid="_p_w_m_timer_c_c26_x_x_8h" local="no">PWMTimerCC26XX.h</includedby>
    <incdepgraph>
      <node id="526">
        <label>stdbool.h</label>
      </node>
      <node id="527">
        <label>stdint.h</label>
      </node>
      <node id="525">
        <label>PIN.h</label>
        <link refid="_p_i_n_8h"/>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="540">
        <label>UARTCC26X2.h</label>
        <link refid="_u_a_r_t_c_c26_x2_8h"/>
      </node>
      <node id="537">
        <label>SPICC26X2DMA.h</label>
        <link refid="_s_p_i_c_c26_x2_d_m_a_8h"/>
      </node>
      <node id="530">
        <label>ADCBufCC26X2.h</label>
        <link refid="_a_d_c_buf_c_c26_x2_8h"/>
      </node>
      <node id="538">
        <label>SPICC26XXDMA.h</label>
        <link refid="_s_p_i_c_c26_x_x_d_m_a_8h"/>
      </node>
      <node id="539">
        <label>UARTCC26X0.h</label>
        <link refid="_u_a_r_t_c_c26_x0_8h"/>
      </node>
      <node id="528">
        <label>PIN.h</label>
        <link refid="_p_i_n_8h"/>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
      </node>
      <node id="542">
        <label>PWMTimerCC26XX.h</label>
        <link refid="_p_w_m_timer_c_c26_x_x_8h"/>
      </node>
      <node id="541">
        <label>UARTCC26XX.h</label>
        <link refid="_u_a_r_t_c_c26_x_x_8h"/>
      </node>
      <node id="535">
        <label>I2CCC26XX.h</label>
        <link refid="_i2_c_c_c26_x_x_8h"/>
      </node>
      <node id="533">
        <label>PDMCC26XX.h</label>
        <link refid="_p_d_m_c_c26_x_x_8h"/>
      </node>
      <node id="532">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
      <node id="536">
        <label>PDMCC26XX_util.h</label>
        <link refid="_p_d_m_c_c26_x_x__util_8h"/>
      </node>
      <node id="531">
        <label>ADCBufCC26XX.h</label>
        <link refid="_a_d_c_buf_c_c26_x_x_8h"/>
      </node>
      <node id="534">
        <label>PINCC26XX.h</label>
        <link refid="_p_i_n_c_c26_x_x_8h"/>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>ADCCC26XX.h</label>
        <link refid="_a_d_c_c_c26_x_x_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_p_i_n___state__s" prot="public">PIN_State_s</innerclass>
      <sectiondef kind="user-defined">
      <header>Generic PIN_Config flags/fields</header>
      <description><para><anchor id="_p_i_n_8h_1PIN_GENERIC_FLAGS"/> Generic (i.e. not device-specific) fields/flags for I/O configuration for use in <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entries. All of these generic options may not be supported by the underlying device-specific PIN driver. A <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entry may use either these generic fields/flags or device-specific ones defined in the device-specific PIN-driver, but may not mix the two.</para><para>The entries starting with PIN_BM_ are bitmasks used to extract individual fields obtained from <ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> or to pass as a parameter to <ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref>to define which options it should set.</para><para>A star (*) in the descriptions below means the default if no option is supplied. </para></description>
      <memberdef kind="define" id="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" prot="public" static="no">
        <name>PIN_GEN</name>
        <initializer>(((uint32_t)1) &lt;&lt; 31)</initializer>
        <briefdescription>
<para>Flags that generic options are used. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="628" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a3cc36a3cdad818a5261bae5a2657a437" prot="public" static="no">
        <name>PIN_INPUT_EN</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0 &lt;&lt; 29))</initializer>
        <briefdescription>
<para>(*) Enable input buffer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="630" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a1c8c8f99cf100a5d8745d879b18bd2b5" prot="public" static="no">
        <name>PIN_INPUT_DIS</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 29))</initializer>
        <briefdescription>
<para>Disable input buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="631" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a4113807b8b5acb98a84b26cc1730ad83" prot="public" static="no">
        <name>PIN_HYSTERESIS</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 30))</initializer>
        <briefdescription>
<para>Enable input buffer hysteresis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="632" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a08ea493b755216db27b51a0402af862e" prot="public" static="no">
        <name>PIN_NOPULL</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0 &lt;&lt; 13))</initializer>
        <briefdescription>
<para>(*) No pull-up or pull-down resistor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="633" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a8dd57072ca956a8ace1ee869216dda0a" prot="public" static="no">
        <name>PIN_PULLUP</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 13))</initializer>
        <briefdescription>
<para>Pull-up resistor enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="634" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a12b3efd67d32926ca0c310f95396de43" prot="public" static="no">
        <name>PIN_PULLDOWN</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (2 &lt;&lt; 13))</initializer>
        <briefdescription>
<para>Pull-down resistor enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="635" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1aa0ed7bdcf3409fb2e8d2553bfa26ef35" prot="public" static="no">
        <name>PIN_BM_INPUT_EN</name>
        <initializer>(1 &lt;&lt; 29)</initializer>
        <briefdescription>
<para>Bitmask for input enable option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="636" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a90670b834483d4047070f5f310998f29" prot="public" static="no">
        <name>PIN_BM_HYSTERESIS</name>
        <initializer>(1 &lt;&lt; 30)</initializer>
        <briefdescription>
<para>Bitmask input hysteresis option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="637" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" prot="public" static="no">
        <name>PIN_BM_PULLING</name>
        <initializer>(0x3 &lt;&lt; 13)</initializer>
        <briefdescription>
<para>Bitmask for pull-up/pull-down options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="638" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a3fe41a9595912571c21f68fa9d9585bb" prot="public" static="no">
        <name>PIN_BM_INPUT_MODE</name>
        <initializer>(<ref refid="_p_i_n_8h_1aa0ed7bdcf3409fb2e8d2553bfa26ef35" kindref="member">PIN_BM_INPUT_EN</ref>|<ref refid="_p_i_n_8h_1a90670b834483d4047070f5f310998f29" kindref="member">PIN_BM_HYSTERESIS</ref>|<ref refid="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" kindref="member">PIN_BM_PULLING</ref>)</initializer>
        <briefdescription>
<para>Bitmask for all input mode options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="641" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a8728d817e2f0f18c5fccce87e13d3c34" prot="public" static="no">
        <name>PIN_GPIO_OUTPUT_DIS</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0 &lt;&lt; 23))</initializer>
        <briefdescription>
<para>(*) Disable output buffer when GPIO </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="643" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a086fd19a419fb4b09f30ed993a3088c7" prot="public" static="no">
        <name>PIN_GPIO_OUTPUT_EN</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 23))</initializer>
        <briefdescription>
<para>Enable output buffer when GPIO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="644" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a269b0e2fe279666149ca1c5949bb32ca" prot="public" static="no">
        <name>PIN_GPIO_LOW</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0 &lt;&lt; 22))</initializer>
        <briefdescription>
<para>Output buffer drives to VSS when GPIO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="645" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1aee8e9896270f36a15df12fb85f2cb4ad" prot="public" static="no">
        <name>PIN_GPIO_HIGH</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 22))</initializer>
        <briefdescription>
<para>Output buffer drives to VDD when GPIO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="646" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a8b219fa4a7727c4f5a7beb5134144324" prot="public" static="no">
        <name>PIN_PUSHPULL</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0 &lt;&lt; 25))</initializer>
        <briefdescription>
<para>(*) Output buffer mode: push/pull </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="647" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a7d238d7776de5cc504dc37d62ac61295" prot="public" static="no">
        <name>PIN_OPENDRAIN</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (2 &lt;&lt; 25))</initializer>
        <briefdescription>
<para>Output buffer mode: open drain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="648" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="648" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a649eb3b178440cda981471c27ff761e5" prot="public" static="no">
        <name>PIN_OPENSOURCE</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (3 &lt;&lt; 25))</initializer>
        <briefdescription>
<para>Output buffer mode: open source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="649" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1afb6df44a1496358f288b2e90dce81a13" prot="public" static="no">
        <name>PIN_SLEWCTRL</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 12))</initializer>
        <briefdescription>
<para>Enable output buffer slew control. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="650" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a2a7469e68c23d12b137362dca78a7ae8" prot="public" static="no">
        <name>PIN_DRVSTR_MIN</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x0 &lt;&lt; 8))</initializer>
        <briefdescription>
<para>(*) Lowest drive strength </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="651" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1aa0c4f9401637a2170b192d5c69faa33b" prot="public" static="no">
        <name>PIN_DRVSTR_MED</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x4 &lt;&lt; 8))</initializer>
        <briefdescription>
<para>Medium drive strength. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="652" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a218e028386e01367f6e86a2a69eb464a" prot="public" static="no">
        <name>PIN_DRVSTR_MAX</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x8 &lt;&lt; 8))</initializer>
        <briefdescription>
<para>Highest drive strength. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="653" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a204ca90eb78a0715cca07c95d6b67e65" prot="public" static="no">
        <name>PIN_BM_GPIO_OUTPUT_EN</name>
        <initializer>(1 &lt;&lt; 23)</initializer>
        <briefdescription>
<para>Bitmask for output enable option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="654" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="654" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a40f78467926deed6685f0beb39594be8" prot="public" static="no">
        <name>PIN_BM_GPIO_OUTPUT_VAL</name>
        <initializer>(1 &lt;&lt; 22)</initializer>
        <briefdescription>
<para>Bitmask for output value option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="655" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" prot="public" static="no">
        <name>PIN_BM_OUTPUT_BUF</name>
        <initializer>(0x3 &lt;&lt; 25)</initializer>
        <briefdescription>
<para>Bitmask for output buffer options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="656" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1ab564685f4cfb90c924db8d7993612c4b" prot="public" static="no">
        <name>PIN_BM_SLEWCTRL</name>
        <initializer>(0x1 &lt;&lt; 12)</initializer>
        <briefdescription>
<para>Bitmask for slew control options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="657" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" prot="public" static="no">
        <name>PIN_BM_DRVSTR</name>
        <initializer>(0xF &lt;&lt; 8)</initializer>
        <briefdescription>
<para>Bitmask for drive strength options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="658" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a3ae1cb8c4750a2833e3dc0072bd9de82" prot="public" static="no">
        <name>PIN_BM_OUTPUT_MODE</name>
        <initializer>(<ref refid="_p_i_n_8h_1a40f78467926deed6685f0beb39594be8" kindref="member">PIN_BM_GPIO_OUTPUT_VAL</ref> | <ref refid="_p_i_n_8h_1a204ca90eb78a0715cca07c95d6b67e65" kindref="member">PIN_BM_GPIO_OUTPUT_EN</ref> | \
                             <ref refid="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" kindref="member">PIN_BM_OUTPUT_BUF</ref> | <ref refid="_p_i_n_8h_1ab564685f4cfb90c924db8d7993612c4b" kindref="member">PIN_BM_SLEWCTRL</ref> | <ref refid="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" kindref="member">PIN_BM_DRVSTR</ref>)</initializer>
        <briefdescription>
<para>Bitmask for all output mode options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="661" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a4f9620411ef92f88c3d2d7ac6c576635" prot="public" static="no">
        <name>PIN_INV_INOUT</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (1 &lt;&lt; 24))</initializer>
        <briefdescription>
<para>Logically invert input and output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="664" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a668e9dfc27d1ef17602c3cd62ea8d0e2" prot="public" static="no">
        <name>PIN_BM_INV_INOUT</name>
        <initializer>(1 &lt;&lt; 24)</initializer>
        <briefdescription>
<para>Bitmask for input/output inversion option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="665" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1ad9b6d7921f5a8ad9591bed6c432cd6da" prot="public" static="no">
        <name>PIN_IRQ_DIS</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x0 &lt;&lt; 16))</initializer>
        <briefdescription>
<para>(*) Disable IRQ on pin </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="667" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a3ec5fa8d38321d835720fa518dcfde44" prot="public" static="no">
        <name>PIN_IRQ_NEGEDGE</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x5 &lt;&lt; 16))</initializer>
        <briefdescription>
<para>Enable IRQ on negative edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="668" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1af4d309f5fad9c05487009326888154d1" prot="public" static="no">
        <name>PIN_IRQ_POSEDGE</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x6 &lt;&lt; 16))</initializer>
        <briefdescription>
<para>Enable IRQ on positive edge. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="669" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1aba2bee3661f16506e67c7fd8289ccf8f" prot="public" static="no">
        <name>PIN_IRQ_BOTHEDGES</name>
        <initializer>(<ref refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" kindref="member">PIN_GEN</ref> | (0x7 &lt;&lt; 16))</initializer>
        <briefdescription>
<para>Enable IRQ on both edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="670" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" prot="public" static="no">
        <name>PIN_BM_IRQ</name>
        <initializer>(0x7 &lt;&lt; 16)</initializer>
        <briefdescription>
<para>Bitmask for pin interrupt option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="671" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1a7567bcbdf26a95ea42a860aa9beb5a11" prot="public" static="no">
        <name>PIN_BM_ALL</name>
        <initializer>(<ref refid="_p_i_n_8h_1a3fe41a9595912571c21f68fa9d9585bb" kindref="member">PIN_BM_INPUT_MODE</ref> | <ref refid="_p_i_n_8h_1a3ae1cb8c4750a2833e3dc0072bd9de82" kindref="member">PIN_BM_OUTPUT_MODE</ref> | <ref refid="_p_i_n_8h_1a668e9dfc27d1ef17602c3cd62ea8d0e2" kindref="member">PIN_BM_INV_INOUT</ref> | <ref refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" kindref="member">PIN_BM_IRQ</ref>)</initializer>
        <briefdescription>
<para>Bitmask for all options at once. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="674" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Pin Manipulation/Configuration Functions</header>
      <description><para>Functions that are used to manipulate the configuration of I/O pins and to get input values and set output values. </para></description>
      <memberdef kind="function" id="_p_i_n_8h_1a5345b3e89e7c16c350b6098d4e29969a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PIN_getInputValue</definition>
        <argsstring>(PIN_Id pinId)</argsstring>
        <name>PIN_getInputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <briefdescription>
<para>Get pin input value (0/1) </para>        </briefdescription>
        <detaileddescription>
<para>Input values of all pins are available to everyone so no handle required <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of pin to get input value from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current input buffer value </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">myPin<sp/>=<sp/>PIN_getInputValue(PIN_ID(5));</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="835" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1ab3c10de54bf7cc948b00f1606102b12d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setOutputEnable</definition>
        <argsstring>(PIN_Handle handle, PIN_Id pinId, bool outputEnable)</argsstring>
        <name>PIN_setOutputEnable</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>outputEnable</declname>
        </param>
        <briefdescription>
<para>Control output enable for GPIO pin. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref> entry identifying pin </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputEnable</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable output buffer when true, else disable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="remark"><para>This function is included for consistency with the corresponding port function and to provide a more efficient/directed approach. <ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> can be used to achieve same result. </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_setOutputEnable(hPins,<sp/>PIN_ID(11),<sp/>0);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a36a6b18d90019d94afe1184760c370ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setOutputValue</definition>
        <argsstring>(PIN_Handle handle, PIN_Id pinId, uint32_t val)</argsstring>
        <name>PIN_setOutputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Control output value for GPIO pin. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Output value (0/1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_setOutputValue(hPins,<sp/>PIN_ID(4),<sp/>1);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="870" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a084deb9d240e7878854ead1989c7a4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PIN_getOutputValue</definition>
        <argsstring>(PIN_Id pinId)</argsstring>
        <name>PIN_getOutputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <briefdescription>
<para>Get value of GPIO pin output buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Output values of all pins are available to everyone so no handle required <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output value (0/1) </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_setOutputValue(hpins,<sp/>PIN_ID(4),<sp/>PIN_getOutputValue(PIN_ID(6)));</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a69e2aac02eaabf8d3c3a248a27dd7d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setInterrupt</definition>
        <argsstring>(PIN_Handle handle, PIN_Config pinCfg)</argsstring>
        <name>PIN_setInterrupt</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>pinCfg</declname>
        </param>
        <briefdescription>
<para>Control interrupt enable and edge for pin. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinCfg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entry identifying pin ID and relevant pin configuration as combinations of:<itemizedlist>
<listitem><para><ref refid="_p_i_n_8h_1ad9b6d7921f5a8ad9591bed6c432cd6da" kindref="member">PIN_IRQ_DIS</ref> (default)</para></listitem><listitem><para><ref refid="_p_i_n_8h_1af4d309f5fad9c05487009326888154d1" kindref="member">PIN_IRQ_POSEDGE</ref></para></listitem><listitem><para><ref refid="_p_i_n_8h_1a3ec5fa8d38321d835720fa518dcfde44" kindref="member">PIN_IRQ_NEGEDGE</ref></para></listitem><listitem><para><ref refid="_p_i_n_8h_1aba2bee3661f16506e67c7fd8289ccf8f" kindref="member">PIN_IRQ_BOTHEDGES</ref> </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="note"><para>Any pending interrupts on pins that have not had interrupt enabled will be cleared when enabling interrupts </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_setInterrupt(hPins,<sp/>PIN_ID(8)|PIN_IRQ_POSEDGE);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a82957789e7c370b6dd4f16fa36045522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_clrPendInterrupt</definition>
        <argsstring>(PIN_Handle handle, PIN_Id pinId)</argsstring>
        <name>PIN_clrPendInterrupt</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <briefdescription>
<para>Clear pending interrupt for pin, if any. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref> for pin to clear pending interrupt for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_ClrPendInterrupt(hPins,<sp/>PIN_ID(8));</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="918" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a6dc645c7372f7b1c13da1facc9cabff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_registerIntCb</definition>
        <argsstring>(PIN_Handle handle, PIN_IntCb callbackFxn)</argsstring>
        <name>PIN_registerIntCb</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref></type>
          <declname>callbackFxn</declname>
        </param>
        <briefdescription>
<para>Register callback function for a set of pins. </para>        </briefdescription>
        <detaileddescription>
<para>Registers a callback function (see <ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref> for details) for the client identified by handle that will be called from HWI context upon an interrupt event on one or more of the allocated pins that have interrupts enabled <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callbackFxn</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to a <ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref> function. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="note"><para>Pin interrupts are serviced one at a time in pin order when simultaneous. Pin hardware interrupt flags are automatically cleared by PIN driver. </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">void<sp/>pinIntHandler(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>pin<sp/>interrupt</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">PIN_registerIntCb(hPins,<sp/>pinIntHandler);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="941" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
        <definition>PIN_Config PIN_getConfig</definition>
        <argsstring>(PIN_Id pinId)</argsstring>
        <name>PIN_getConfig</name>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <briefdescription>
<para>Returns pin configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current pin configuration as a device-independent <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> value </para></simplesect>
<simplesect kind="note"><para>The pin ID is embedded in return value. </para></simplesect>
<simplesect kind="note"><para>There is usually a device-specific version of this function that returns device-specific options </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>config<sp/>of<sp/>pin<sp/>14<sp/>to<sp/>be<sp/>able<sp/>to<sp/>revert<sp/>later</highlight></codeline>
<codeline><highlight class="normal">myPinConfig<sp/>=<sp/>PIN_getConfig(PIN_ID(14));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Lots<sp/>of<sp/>pin<sp/>reconfigurations</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Restore<sp/>previous<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal">PIN_setConfig(hPins,<sp/>PIN_BM_ALL,<sp/>myPinConfig);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="964" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setConfig</definition>
        <argsstring>(PIN_Handle handle, PIN_Config updateMask, PIN_Config pinCfg)</argsstring>
        <name>PIN_setConfig</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>updateMask</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>pinCfg</declname>
        </param>
        <briefdescription>
<para>Sets complete pin configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask specifying which fields in cfg that should take effect, the rest keep their current value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinCfg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entry with pin ID and pin configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>drive<sp/>strength<sp/>on<sp/>pin<sp/>15</highlight></codeline>
<codeline><highlight class="normal">PIN_setConfig(hPins,<sp/>PIN_BM_DRVSTR,<sp/>PIN_ID(15)|PIN_DRVSTR_MAX);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="980" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>IO Port Functions</header>
      <description><para>Functions used to get input values for, set ouput values for and set output enables for multiple pins at a time. The size of so-called I/O ports that allows such multiple-pin operations are highly device dependent. In order to use the I/O port functions a set of pins that reside in the same I/O port must have been allocated previously with <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></description>
      <memberdef kind="function" id="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PIN_getPortMask</definition>
        <argsstring>(PIN_Handle handle)</argsstring>
        <name>PIN_getPortMask</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Returns bitmask indicating pins allocated to client in GPIO port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitmask indicating which bit positions in an I/O port the allocated I/O pins lie on, or zero if I/O port operations are not supported or the allocated pins span multiple I/O ports. The bitmask maps lowest pin index to the rightmost mask bit </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a9c75d355f0a19441cb55caea4b1961d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PIN_getPortInputValue</definition>
        <argsstring>(PIN_Handle handle)</argsstring>
        <name>PIN_getPortInputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Read input value of whole GPIO port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The simultaneous input value for the whole I/O port masked by the bit mask for the client&apos;s allocated pins </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask()</ref> </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="1016" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1af41c048cdb42ceb5871207deeaeb3d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t PIN_getPortOutputValue</definition>
        <argsstring>(PIN_Handle handle)</argsstring>
        <name>PIN_getPortOutputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Returns value of whole GPIO port&apos;s output buffers. </para>        </briefdescription>
        <detaileddescription>
<para>The I/O port is identified by the pins allocated by client in a previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current output value for whole I/O port </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask()</ref> </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="1029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1ac891b6a5d2bd115b79f4121d3eb127cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setPortOutputValue</definition>
        <argsstring>(PIN_Handle handle, uint32_t outputValueMask)</argsstring>
        <name>PIN_setPortOutputValue</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>outputValueMask</declname>
        </param>
        <briefdescription>
<para>Simultaneous write output buffer values of all allocated pins in GPIO port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputValueMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask indicating the desired output value for the whole port, only the pins allocated to the client will be affected </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask()</ref> </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">//<sp/>Invert<sp/>all<sp/>pins<sp/>allocated<sp/>to<sp/>client</highlight></codeline>
<codeline><highlight class="normal">PIN_setPortOutputVal(hPins,<sp/>~PIN_getPortOutputVals(hPins));</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a2c16e2a9a0cc5c8c5df73c610feb657b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_setPortOutputEnable</definition>
        <argsstring>(PIN_Handle handle, uint32_t outputEnableMask)</argsstring>
        <name>PIN_setPortOutputEnable</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>outputEnableMask</declname>
        </param>
        <briefdescription>
<para>Set output enable for all pins allocated to client in GPIO port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle provided by previous call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputEnableMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask indicating the desired output enable configuration for the whole port, only the pins allocated to the client will be affected </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else error code </para></simplesect>
<simplesect kind="see"><para><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask()</ref> </para></simplesect>
<simplesect kind="remark"><para>This function typically has an inlined sibling function in the device-specific driver that may be used for higher efficiency </para></simplesect>
<simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>output<sp/>to<sp/>0<sp/>on<sp/>all<sp/>allocated<sp/>pins,<sp/>then<sp/>enable<sp/>the<sp/>output<sp/>drivers</highlight></codeline>
<codeline><highlight class="normal">pin_setPortOutputVal(hPins,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">pin_setPortOutputEnable(hPins,<sp/>PIN_getPortMask());</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="1068" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="_p_i_n_8h_1aba219226dfdc9ea2fb82d6a7995395bf" prot="public" static="no">
        <name>PIN_UNASSIGNED</name>
        <initializer>0xFF</initializer>
        <briefdescription>
<para>Pin ID used to indicate no pin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="580" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1ae22ec44ad92ee130a665ca56aad38c75" prot="public" static="no">
        <name>PIN_TERMINATE</name>
        <initializer>0xFE</initializer>
        <briefdescription>
<para>Pin ID used to terminate a list of PIN_Id or PIN_Config entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="582" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_p_i_n_8h_1add47c82f7563d28053f76d368d344bc6" prot="public" static="no">
        <name>PIN_ID</name>
        <param><defname>x</defname></param>
        <initializer>((x)&amp;0xFF)</initializer>
        <briefdescription>
<para>Macro for inserting or extracting a <ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref> in a <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Usage</title><para><programlisting><codeline><highlight class="normal">PIN_Config<sp/>pinCfg<sp/>=<sp/>PIN_ID(5)<sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_PUSHPULL<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_GPIO_HIGH<sp/>|<sp/>PIN_IRQ_POSEDGE;</highlight></codeline>
<codeline><highlight class="normal">PIN_setConfig(hPins,<sp/>PIN_BM_OUTPUT_MODE,<sp/>pinCfg);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Trigger<sp/>IRQ</highlight></codeline>
<codeline><highlight class="normal">PIN_setOutputValue(hPins,<sp/>PIN_ID(pinCfg),<sp/>1);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="609" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" prot="public" static="no">
        <name>PIN_Status</name>
        <enumvalue id="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" prot="public">
          <name>PIN_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Operation succeeded. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a8280bb6c2bd8ef1fc6f9e24d3d8ed864" prot="public">
          <name>PIN_ALREADY_ALLOCATED</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Operation failed, some pin already allocated. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a25bb5dfe42957cfd0922fc1ece880453" prot="public">
          <name>PIN_NO_ACCESS</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Operation failed, client does not have access to pin. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a7abd102afc68f4c599c11f8f9c79e7ab" prot="public">
          <name>PIN_UNSUPPORTED</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Operation not supported. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return value for many functions in the PIN driver interface. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="715" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="715" bodyend="720"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t PIN_Id</definition>
        <argsstring></argsstring>
        <name>PIN_Id</name>
        <briefdescription>
<para>Pin identifier data type. </para>        </briefdescription>
        <detaileddescription>
<para>Data type used to identify a pin through an index between 0 to 254. Typically the index does not refer to the physical device pin number but rather to the index of the subset of pins that are under software-control (e.g. index 3 refers to DIO3). This data type is used as arguments in API functions to identify which pin is affected or used in lists (terminated by <ref refid="_p_i_n_8h_1ae22ec44ad92ee130a665ca56aad38c75" kindref="member">PIN_TERMINATE</ref> entry) identifying multiple pins <simplesect kind="see"><para><ref refid="_p_i_n_8h_1add47c82f7563d28053f76d368d344bc6" kindref="member">PIN_ID</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="577" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t PIN_Config</definition>
        <argsstring></argsstring>
        <name>PIN_Config</name>
        <briefdescription>
<para>Pin configuration data type with embedded pin identifier. </para>        </briefdescription>
        <detaileddescription>
<para>A data type used to specify I/O-pin configuration options. The lower 8b contain an embedded pin ID (see <ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref>) and the top 24b contain flags/fields that affect I/O configuration. <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entries can either use a <ref refid="_p_i_n_8h_1PIN_GENERIC_FLAGS" kindref="member">set of device-independent options</ref> or device-specific options defined in PIN driver (e.g. <ref refid="_p_i_n_c_c26_x_x_8h" kindref="compound">PINCC26XX.h</ref>), but cannot mix the two.</para><para>This data type is used as arguments or return values in API functions that manipulate pin configuration or used in lists (terminated by a <ref refid="_p_i_n_8h_1ae22ec44ad92ee130a665ca56aad38c75" kindref="member">PIN_TERMINATE</ref> entry) for configuring multiple pins at a time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="597" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_i_n_8h_1a36ef69d50df6baa6973482669c24a522" prot="public" static="no">
        <type>struct <ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State_s</ref></type>
        <definition>typedef struct PIN_State_s PIN_State</definition>
        <argsstring></argsstring>
        <name>PIN_State</name>
        <briefdescription>
<para>Struct used to store PIN client state Pointer to a PIN_State is used as handles (<ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref>) in interactions with the I/O driver. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Must reside in persistent memory </para></simplesect>
<simplesect kind="note"><para>Fields must never be modified directly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="597" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" prot="public" static="no">
        <type><ref refid="_p_i_n_8h_1a36ef69d50df6baa6973482669c24a522" kindref="member">PIN_State</ref> *</type>
        <definition>typedef PIN_State* PIN_Handle</definition>
        <argsstring></argsstring>
        <name>PIN_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> call Used for further PIN client interaction with the PIN driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="690" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* PIN_IntCb) (PIN_Handle handle, PIN_Id pinId)</definition>
        <argsstring>)(PIN_Handle handle, PIN_Id pinId)</argsstring>
        <name>PIN_IntCb</name>
        <briefdescription>
<para>I/O Interrupt callback function pointer type One PIN Interrupt callback can be registered by each PIN client and it will be called when one of the pins allocated by the client has an interrupt event. The callback is called from HWI context with handle and pin ID as arguments. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>The callback must, as it runs in HWI context, execute and return quickly. Any lengthy operations should be performed in SWIs or tasks triggered by the callback </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="702" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_init</definition>
        <argsstring>(const PIN_Config aPinCfg[])</argsstring>
        <name>PIN_init</name>
        <param>
          <type>const <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>aPinCfg</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>PIN module initialization. </para>        </briefdescription>
        <detaileddescription>
<para>Must be called early in the boot sequence to ensure that I/O pins have safe configurations. This initialization sets up pins as GPIO as defined in an array (possibly user-generated) that typically resides in a board file. All pins not mentioned in aPinCfg[] are configured to be input/output/pull disabled.</para><para><simplesect kind="note"><para>Function <emphasis>cannot</emphasis> be called more than once.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aPinCfg[]</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array of PIN_Config entries, one per pin that needs configuration. List terminates when a <ref refid="_p_i_n_8h_1ae22ec44ad92ee130a665ca56aad38c75" kindref="member">PIN_TERMINATE</ref> entry is encountered. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref> if successful, else an error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
        <definition>PIN_Handle PIN_open</definition>
        <argsstring>(PIN_State *state, const PIN_Config pinList[])</argsstring>
        <name>PIN_open</name>
        <param>
          <type><ref refid="_p_i_n_8h_1a36ef69d50df6baa6973482669c24a522" kindref="member">PIN_State</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>pinList</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Allocate one or more pins for a driver or an application. </para>        </briefdescription>
        <detaileddescription>
<para>Allows a PIN client (driver or application) to allocate a set of pins, thus ensuring that they cannot be reconfigured/controlled by anyone else. The pins are identified by and reconfigured according to the <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entries in pinList.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a PIN_State object that will hold the state for this IO client. The object must be in persistent memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinList[]</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array of <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entries, one per pin to allocate. List terminates when <ref refid="_p_i_n_8h_1ae22ec44ad92ee130a665ca56aad38c75" kindref="member">PIN_TERMINATE</ref> entry is encountered. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle for further PIN driver calls or NULL if an error occurred (already allocated pin in pinList or non-existent pin in pinList) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1ae96b7cc445336d52f8f6db762ff80156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_add</definition>
        <argsstring>(PIN_Handle handle, PIN_Config pinCfg)</argsstring>
        <name>PIN_add</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref></type>
          <declname>pinCfg</declname>
        </param>
        <briefdescription>
<para>Add pin to pin set for open PIN handle. </para>        </briefdescription>
        <detaileddescription>
<para>If the requested pin is unallocated it will be added, else an error code will be returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle retrieved through an earlier call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinCfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin ID/configuration for pin to add. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code if unsuccessful, else PIN_SUCCESS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a7edb10913792e741318ef339d5c7ef13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref></type>
        <definition>PIN_Status PIN_remove</definition>
        <argsstring>(PIN_Handle handle, PIN_Id pinId)</argsstring>
        <name>PIN_remove</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref></type>
          <declname>pinId</declname>
        </param>
        <briefdescription>
<para>Removes pin from pin set foropen PIN handle. </para>        </briefdescription>
        <detaileddescription>
<para>If the requested pin is allocated to handle it will be removed from the pin set, else an error code will be returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle retrieved through an earlier call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinId</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin ID for pin to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code if unsuccessful, else PIN_SUCCESS </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PIN_close</definition>
        <argsstring>(PIN_Handle handle)</argsstring>
        <name>PIN_close</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Deallocate all pins previously allocated with a call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Deallocate pins allocated to handle and restore these pins to the pool of unallocated pins. Also restores the pin configuration to what it was set to when <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> was called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle retrieved through an earlier call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1ad7475e9397585a0c81f4420db027a63c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void PIN_setUserArg</definition>
        <argsstring>(PIN_Handle handle, uintptr_t arg)</argsstring>
        <name>PIN_setUserArg</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Sets a user argument associated with the handle. </para>        </briefdescription>
        <detaileddescription>
<para>Allows the application to store some data, for example a pointer to some data structure, with each PIN handle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle retrieved through an earlier call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>User argument </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="798" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="798" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="_p_i_n_8h_1a6b90dabb1bb35348050d8fce03c046d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uintptr_t</type>
        <definition>static uintptr_t PIN_getUserArg</definition>
        <argsstring>(PIN_Handle handle)</argsstring>
        <name>PIN_getUserArg</name>
        <param>
          <type><ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Gets a user argument associated with the handle. </para>        </briefdescription>
        <detaileddescription>
<para>Allows the application to store some data, for example a pointer to some data structure, with each PIN handle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle retrieved through an earlier call to <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>User argument. Has the value 0 if never initialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" line="812" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h" bodystart="812" bodyend="814"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic PIN &amp; GPIO driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>To use the PIN driver ensure that the correct TI-RTOS driver library for your device is linked in and include this header file: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/PIN.h&gt;</highlight></codeline>
</programlisting></para><para>In order to use device-specific functionality or to use the size/speed- optimized versions of some of the PIN driver functions that circumvent error and resource checking, link in the correct TI-RTOS driver library for your device and include the device-specific PIN driver header file (which in turn includes <ref refid="_p_i_n_8h" kindref="compound">PIN.h</ref>). As an example for the CC26xx family of devices: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/pin/PINCC26xx.h&gt;</highlight></codeline>
</programlisting></para><para><heading level="1">Overview</heading>
</para><para>The PIN driver allows clients (applications or other drivers) to allocate and control the I/O pins on the device. The pins can either be software- controlled general-purpose I/O (GPIO) or connected to hardware peripherals. Furthermore, the PIN driver allows clients to configure interrupt functionality on the pins to receive callbacks (and potentially wake up from the standby or idle power modes) on configurable signal edges.</para><para>Most other drivers rely on functionality in the PIN driver.</para><para><heading level="2">Structure</heading>
</para><para>In order to provide a generic driver interface, this file (<ref refid="_p_i_n_8h" kindref="compound">PIN.h</ref>) only defines the API and some common data types and macros of the driver. A PIN client (application or driver) can in most cases only use the generic PIN API, however, for more advanced usage where device-specific pin configuration is used or device-specific PIN driver API extensions are used must use the device-specific PIN driver API.</para><para>The device-independent API is implemented as function calls with pin access control based on the PIN client handle. For time-critical applications the device-specific API can be used directly, as these API functions are implemented as inlined functions without access control.</para><para><heading level="2">Functionality</heading>
</para><para>The PIN module provides the following functionality:<itemizedlist>
<listitem><para>Initialize I/O pins upon boot to a default configuration (possibly user-generated)</para></listitem><listitem><para>Provides atomic manipulation of I/O pin hardware registers to allow safe simultaneous use of I/O pin resources</para></listitem><listitem><para>I/O pin allocation<itemizedlist>
<listitem><para>A set of pins can be allocated receiving a pin set handle. Typically each peripheral driver will allocate a set of pins and an application must allocate the pins it uses too</para></listitem><listitem><para>When a pin set is deallocated all the pins in it revert to the state they were initialized to at boot</para></listitem></itemizedlist>
</para></listitem><listitem><para>General-purpose I/O (GPIO) services<itemizedlist>
<listitem><para>Read input buffer value</para></listitem><listitem><para>Read and set output buffer value</para></listitem><listitem><para>Read and set output buffer enable</para></listitem><listitem><para>Access as single pin or port (muliple pins simultaneously)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Protect pin manipulation<itemizedlist>
<listitem><para>Pins in an allocated set can only be manipulated using the corresponding handle.</para></listitem><listitem><para>No handle is needed to read input and output buffer values</para></listitem></itemizedlist>
</para></listitem><listitem><para>I/O buffer/driver control<itemizedlist>
<listitem><para>Input mode (detached, hysteresis, pull-up, pull-down)</para></listitem><listitem><para>Output mode (tristated, push-pull, open drain, open source)</para></listitem><listitem><para>Output driver strength control</para></listitem><listitem><para>Output driver slew rate control</para></listitem></itemizedlist>
</para></listitem><listitem><para>I/O source/target selection (device-specific driver only)<itemizedlist>
<listitem><para>Map pin to GPIO, peripheral or HW observation signal</para></listitem></itemizedlist>
</para></listitem><listitem><para>Configuration of I/O interrupt and wakeup from standby<itemizedlist>
<listitem><para>Interrupt configuration: signal edge to interrupt on, interrupt mask, callback function registration</para></listitem><listitem><para>Pins that have enabled interrupts will also wake up the device from low- power modes like standby and idle upon events</para></listitem></itemizedlist>
</para></listitem><listitem><para>Provides data types and enums/defines for use in pin configurations definitions in board files, drivers and applications</para></listitem></itemizedlist>
</para><para><heading level="2">Pin Allocation</heading>
</para><para>The purpose of being able to allocate pins to a pin set is to:<itemizedlist>
<listitem><para>Manage pin resources</para></listitem><listitem><para>Give exclusive, protected access to these pins</para></listitem><listitem><para>Establish a driver state in connection with these pins that allow functionality such as I/O interrupt callback and I/O port operations in a safe manner</para></listitem></itemizedlist>
</para><para><table rows="5" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></entry><entry thead="no"><para>Allocate pins to a set, returns handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ae96b7cc445336d52f8f6db762ff80156" kindref="member">PIN_add()</ref> </para></entry><entry thead="no"><para>Add pin to pin set for open PIN handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a7edb10913792e741318ef339d5c7ef13" kindref="member">PIN_remove()</ref> </para></entry><entry thead="no"><para>Removes pin from pin set for open PIN handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close()</ref> </para></entry><entry thead="no"><para>Deallocate pin set, revert to original GPIO state </para></entry></row>
</table>
<heading level="2">GPIO</heading>
</para><para>Pins that are to be used as software-controlled general-purpose I/O (GPIO) need to be allocated in the same manner as for pins that will be mapped to hardware peripheral ports. A pin set requested with a <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> call may contain a mix of pins to be used for GPIO and hardware-mapped pins.</para><para>When a pin is deallocated using <ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close()</ref> it reverts to the GPIO configuration it was given in the initial call to <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref>.</para><para><table rows="10" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> </para></entry><entry thead="no"><para>Initialize I/O pins to a safe GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></entry><entry thead="no"><para>Allocate pins to a set, returns handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close()</ref> </para></entry><entry thead="no"><para>Deallocate pin set, revert to original GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> </para></entry><entry thead="no"><para>Sets parts of or complete pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> </para></entry><entry thead="no"><para>Returns pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ab3c10de54bf7cc948b00f1606102b12d" kindref="member">PIN_setOutputEnable()</ref></para></entry><entry thead="no"><para>Control output enable of GPIO pin </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a5345b3e89e7c16c350b6098d4e29969a" kindref="member">PIN_getInputValue()</ref> </para></entry><entry thead="no"><para>Read input value on pin </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a36a6b18d90019d94afe1184760c370ee" kindref="member">PIN_setOutputValue()</ref> </para></entry><entry thead="no"><para>Set output value of GPIO pin </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a084deb9d240e7878854ead1989c7a4de" kindref="member">PIN_getOutputValue()</ref> </para></entry><entry thead="no"><para>Get current output value of GPIO pin </para></entry></row>
</table>
<heading level="2">GPIO Ports</heading>
</para><para>Sometimes it is necessary to be able to read from, write to or control multiple pins simultaneously (in time). The PIN driver allows a set of allocated pins, if they reside on the same GPIO port in the underlying hardware, to be manipulated simultaneously.</para><para><table rows="9" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref> </para></entry><entry thead="no"><para>Allocate pins to a set, returns handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close()</ref> </para></entry><entry thead="no"><para>Deallocate pin set, revert to original GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask()</ref> </para></entry><entry thead="no"><para>Returns bitmask for allocated pins in GPIO port </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a9c75d355f0a19441cb55caea4b1961d2" kindref="member">PIN_getPortInputValue()</ref> </para></entry><entry thead="no"><para>Returns input value of whole GPIO port </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ac891b6a5d2bd115b79f4121d3eb127cb" kindref="member">PIN_setPortOutputValue()</ref> </para></entry><entry thead="no"><para>Sets output value of whole GPIO port (masked) </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af41c048cdb42ceb5871207deeaeb3d07" kindref="member">PIN_getPortOutputValue()</ref> </para></entry><entry thead="no"><para>Get current output value of whole GPIO port </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ac891b6a5d2bd115b79f4121d3eb127cb" kindref="member">PIN_setPortOutputValue()</ref> </para></entry><entry thead="no"><para>Sets output value of whole GPIO port (masked) </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a2c16e2a9a0cc5c8c5df73c610feb657b" kindref="member">PIN_setPortOutputEnable()</ref></para></entry><entry thead="no"><para>Sets output enable of whole GPIO port (masked) </para></entry></row>
</table>
<heading level="2">I/O Pin Configuration</heading>
</para><para>Different devices provide different levels of configurability of I/O pins. The PIN driver provides a fairly extensive set of <ref refid="_p_i_n_8h_1PIN_GENERIC_FLAGS" kindref="member">generic IO configuration options</ref> that are device-independent, all of which might not be supported by the underlying device-specific PIN driver and hardware. Likewise, the underlying device-specific PIN driver and hardware might support additional configuration options not covered by the generic options.</para><para>To allow both independence from and flexibility to use features on the target device, the <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> entries used by the PIN driver allows use of either a set of <ref refid="_p_i_n_8h_1PIN_GENERIC_FLAGS" kindref="member">generic PIN configuration options</ref> or a device-specific set of PIN configuration options defined in the underlying device-specific PIN driver (e.g. <ref refid="_p_i_n_c_c26_x_x_8h" kindref="compound">PINCC26XX.h</ref>)</para><para><heading level="3">Mapping to GPIO or Peripheral</heading>
</para><para>Since the amount of flexibilty in which peripherals can be mapped to which pins and the manner in which this needs to be set up is highly device-specific, functions for configuring this is not part of the generic PIN driver API but is left to be implemented by device-specific PIN drivers. See the relevant device-specific PIN driver (e.g. <ref refid="_p_i_n_c_c26_x_x_8h" kindref="compound">PINCC26XX.h</ref>) for details.</para><para><heading level="3">Input Mode</heading>
</para><para>The input mode of a pin controls:<itemizedlist>
<listitem><para>Input buffer enable</para></listitem><listitem><para>Pull-ups or pull-downs</para></listitem><listitem><para>Hysteresis of input buffer</para></listitem><listitem><para>Inversion of logical input level</para></listitem><listitem><para>Potentially, device-specific options The input mode is set initially with <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> or at a later stage with <ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> and a bitmask with the relevant options</para></listitem></itemizedlist>
</para><para><table rows="4" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> </para></entry><entry thead="no"><para>Initialize IOs to a safe GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> </para></entry><entry thead="no"><para>Returns pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> </para></entry><entry thead="no"><para>Sets parts of or complete pin configuration </para></entry></row>
</table>
<heading level="3">Output Mode</heading>
</para><para>The output mode of a pin controls:<itemizedlist>
<listitem><para>Output buffer enable</para></listitem><listitem><para>Output driver mode (push-pull, open-drain, open-source)</para></listitem><listitem><para>Output driver slew control</para></listitem><listitem><para>Output driver current (drive strength)</para></listitem><listitem><para>Inversion of logical output level</para></listitem><listitem><para>Potentially, device-specific options</para></listitem></itemizedlist>
</para><para><table rows="5" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> </para></entry><entry thead="no"><para>Initialize IOs to a safe GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ab3c10de54bf7cc948b00f1606102b12d" kindref="member">PIN_setOutputEnable()</ref></para></entry><entry thead="no"><para>Control output enable of GPIO pins </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> </para></entry><entry thead="no"><para>Returns pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> </para></entry><entry thead="no"><para>Sets parts of or complete pin configuration </para></entry></row>
</table>
<heading level="3">Pin Interrupt and Pin Wakeup</heading>
</para><para>Pin interrupts are used to process asynchronous signal edge events on pins and potentially wake the device up from low power sleep modes. To use pin interrupts the relevant pins must be allocated and a interrupt callback registered by the client. The callback function will be called in a SWI context.</para><para><table rows="8" cols="2"><row>
<entry thead="yes"><para>API function </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> </para></entry><entry thead="no"><para>Initialize IOs to a safe GPIO state </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> </para></entry><entry thead="no"><para>Returns pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> </para></entry><entry thead="no"><para>Sets parts of or complete pin configuration </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a69e2aac02eaabf8d3c3a248a27dd7d0e" kindref="member">PIN_setInterrupt()</ref> </para></entry><entry thead="no"><para>Control interrupt enable and edge for pin </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a6dc645c7372f7b1c13da1facc9cabff0" kindref="member">PIN_registerIntCb()</ref> </para></entry><entry thead="no"><para>Register callback function for a set of pins </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ad7475e9397585a0c81f4420db027a63c" kindref="member">PIN_setUserArg()</ref> </para></entry><entry thead="no"><para>Sets a user argument associated with the handle </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a6b90dabb1bb35348050d8fce03c046d9" kindref="member">PIN_getUserArg()</ref> </para></entry><entry thead="no"><para>Gets a user argument associated with the handle </para></entry></row>
</table>
<heading level="2">PIN Data Types</heading>
</para><para>The PIN driver defines the following data types:<itemizedlist>
<listitem><para><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref>: identifies a pin in arguments or lists</para></listitem><listitem><para><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref>: provides I/O configuration options for a pin and also embeds a <ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref> identifier. See <ref refid="_p_i_n_8h_1PIN_GENERIC_FLAGS" kindref="member">available flags/fields</ref></para></listitem></itemizedlist>
</para><para><heading level="2">PIN Config Flags/Fields and Bitmasks</heading>
</para><para>The PIN driver uses the <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> data type many places and it merits some additional attention. A <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> value consists of a collection of flags and fields that define how an I/O pin and its attached GPIO interface should behave electrically and logically. In addition a <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> value also embeds a <ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref> pin ID, identifying which pin it refers to.</para><para>A <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> value can use one of two mutually exclusive sets of flags and fields: <ref refid="_p_i_n_8h_1PIN_GENERIC_FLAGS" kindref="member">device-independent options</ref> defined in <ref refid="_p_i_n_8h" kindref="compound">PIN.h</ref> or device-dependent options defined in the device-specific implementation of the PIN driver interface. Any function that uses <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> will accept both option types, just not at the same time. <ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig()</ref> always returns device-independent options, an additional device-specific version (e.g. <ref refid="_p_i_n_c_c26_x_x_8h_1aef985455a19581bdb47fff4314fc318b" kindref="member">PINCC26XX_getConfig()</ref>) might return device-specific options.</para><para>The bitmask argument for <ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig()</ref> decides which of the options the call should affect. All other options are kept at their current values in hardware. Thus PIN_setConfig(hPins, PIN_BM_PULLING, PIN_BM_PULLUP) will only change the pullup/pulldown configuration of the pin, leaving everything else, such as for instance output enable, input hysteresis or output value, untouched. For <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> lists (as supplied to <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> for instance) there is no mask, so all options will affect the pin.</para><para>Some of the options affect the pin regardless of whether it is mapped to a hardware peripheral or GPIO and some options only take effect when it is mapped to GPIO. These latter options have _GPIO_ in their names.</para><para>The default value for a flag/field is indicated with a star (*) in the description of the options and will be applied if any explicit value is not supplied for a flag/field that is masked.</para><para>The available options can be grouped into categories as follows:</para><para><heading level="3">Input Mode Options</heading>
</para><para><table rows="8" cols="4"><row>
<entry thead="yes"><para>Option </para></entry><entry thead="yes"><para>Option bitmask </para></entry><entry thead="yes"><para>HW/GPIO </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a3cc36a3cdad818a5261bae5a2657a437" kindref="member">PIN_INPUT_EN</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1aa0ed7bdcf3409fb2e8d2553bfa26ef35" kindref="member">PIN_BM_INPUT_EN</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Enable pin input buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a1c8c8f99cf100a5d8745d879b18bd2b5" kindref="member">PIN_INPUT_DIS</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1aa0ed7bdcf3409fb2e8d2553bfa26ef35" kindref="member">PIN_BM_INPUT_EN</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Disable pin input buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a4113807b8b5acb98a84b26cc1730ad83" kindref="member">PIN_HYSTERESIS</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a90670b834483d4047070f5f310998f29" kindref="member">PIN_BM_HYSTERESIS</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Enable hysteresis on input </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a08ea493b755216db27b51a0402af862e" kindref="member">PIN_NOPULL</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" kindref="member">PIN_BM_PULLING</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>No pullup/pulldown </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a8dd57072ca956a8ace1ee869216dda0a" kindref="member">PIN_PULLUP</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" kindref="member">PIN_BM_PULLING</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Enable pullup </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a12b3efd67d32926ca0c310f95396de43" kindref="member">PIN_PULLDOWN</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" kindref="member">PIN_BM_PULLING</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Enable pulldown </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a3fe41a9595912571c21f68fa9d9585bb" kindref="member">PIN_BM_INPUT_MODE</ref> </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>Mask for all input mode options </para></entry></row>
</table>
<heading level="3">Output Mode Options</heading>
</para><para><table rows="13" cols="4"><row>
<entry thead="yes"><para>Option </para></entry><entry thead="yes"><para>Option bitmask </para></entry><entry thead="yes"><para>HW/GPIO </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a8728d817e2f0f18c5fccce87e13d3c34" kindref="member">PIN_GPIO_OUTPUT_DIS</ref> (*)</para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a204ca90eb78a0715cca07c95d6b67e65" kindref="member">PIN_BM_GPIO_OUTPUT_EN</ref> </para></entry><entry thead="no"><para>GPIO </para></entry><entry thead="no"><para>Disable GPIO output buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a086fd19a419fb4b09f30ed993a3088c7" kindref="member">PIN_GPIO_OUTPUT_EN</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a204ca90eb78a0715cca07c95d6b67e65" kindref="member">PIN_BM_GPIO_OUTPUT_EN</ref> </para></entry><entry thead="no"><para>GPIO </para></entry><entry thead="no"><para>Enable GPIO output buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a269b0e2fe279666149ca1c5949bb32ca" kindref="member">PIN_GPIO_LOW</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a40f78467926deed6685f0beb39594be8" kindref="member">PIN_BM_GPIO_OUTPUT_VAL</ref> </para></entry><entry thead="no"><para>GPIO </para></entry><entry thead="no"><para>Output 0 when GPIO </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aee8e9896270f36a15df12fb85f2cb4ad" kindref="member">PIN_GPIO_HIGH</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a40f78467926deed6685f0beb39594be8" kindref="member">PIN_BM_GPIO_OUTPUT_VAL</ref> </para></entry><entry thead="no"><para>GPIO </para></entry><entry thead="no"><para>Output 1 when GPIO </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a8b219fa4a7727c4f5a7beb5134144324" kindref="member">PIN_PUSHPULL</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" kindref="member">PIN_BM_OUTPUT_BUF</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Use push-pull output buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a7d238d7776de5cc504dc37d62ac61295" kindref="member">PIN_OPENDRAIN</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" kindref="member">PIN_BM_OUTPUT_BUF</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Use open drain output buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a649eb3b178440cda981471c27ff761e5" kindref="member">PIN_OPENSOURCE</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" kindref="member">PIN_BM_OUTPUT_BUF</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Use open source output buffer </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1afb6df44a1496358f288b2e90dce81a13" kindref="member">PIN_SLEWCTRL</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1ab564685f4cfb90c924db8d7993612c4b" kindref="member">PIN_BM_SLEWCTRL</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Enable output buffer slew control </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a2a7469e68c23d12b137362dca78a7ae8" kindref="member">PIN_DRVSTR_MIN</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" kindref="member">PIN_BM_DRVSTR</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Output buffer uses min drive </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aa0c4f9401637a2170b192d5c69faa33b" kindref="member">PIN_DRVSTR_MED</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" kindref="member">PIN_BM_DRVSTR</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Output buffer uses medium drive </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a218e028386e01367f6e86a2a69eb464a" kindref="member">PIN_DRVSTR_MAX</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" kindref="member">PIN_BM_DRVSTR</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Output buffer uses max drive </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a3ae1cb8c4750a2833e3dc0072bd9de82" kindref="member">PIN_BM_OUTPUT_MODE</ref> </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>Mask for all output mode options </para></entry></row>
</table>
<heading level="3">Misc Options</heading>
</para><para><table rows="7" cols="4"><row>
<entry thead="yes"><para>Option </para></entry><entry thead="yes"><para>Option bitmask </para></entry><entry thead="yes"><para>HW/GPIO </para></entry><entry thead="yes"><para>Description  </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a4f9620411ef92f88c3d2d7ac6c576635" kindref="member">PIN_INV_INOUT</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a668e9dfc27d1ef17602c3cd62ea8d0e2" kindref="member">PIN_BM_INV_INOUT</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Invert input/output </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1ad9b6d7921f5a8ad9591bed6c432cd6da" kindref="member">PIN_IRQ_DIS</ref> (*) </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" kindref="member">PIN_BM_IRQ</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Disable pin interrupts </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1a3ec5fa8d38321d835720fa518dcfde44" kindref="member">PIN_IRQ_NEGEDGE</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" kindref="member">PIN_BM_IRQ</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Pin interrupts on negative edges </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1af4d309f5fad9c05487009326888154d1" kindref="member">PIN_IRQ_POSEDGE</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" kindref="member">PIN_BM_IRQ</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Pin interrupts on negative edges </para></entry></row>
<row>
<entry thead="no"><para><ref refid="_p_i_n_8h_1aba2bee3661f16506e67c7fd8289ccf8f" kindref="member">PIN_IRQ_BOTHEDGES</ref> </para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" kindref="member">PIN_BM_IRQ</ref> </para></entry><entry thead="no"><para>Both </para></entry><entry thead="no"><para>Pin interrupts on both edges </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para><ref refid="_p_i_n_8h_1a7567bcbdf26a95ea42a860aa9beb5a11" kindref="member">PIN_BM_ALL</ref> </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>Mask for <emphasis>all</emphasis> options </para></entry></row>
</table>
<heading level="2">Initialization</heading>
</para><para>The PIN driver must be initialized before any other drivers are initialized. In order for IO pins to get a safe value as soon as possible <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> should be called as early as possible in the boot sequence. Typically, <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> is called at the start of main() before TI-RTOS is started with BIOS_start().</para><para><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref> takes as an argument a <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> list containing default pin configurations. Typically the <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> list defined in the board files is used: <programlisting><codeline><highlight class="normal">PIN_init(BoardGpioInitTable);</highlight></codeline>
</programlisting> It is possible, however, to use another <ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref> list if desired.</para><para><heading level="2">Power Management Interaction</heading>
</para><para>No specific interaction with power management module, as PIN is independent of power mode.</para><para><heading level="2">Functionality Not Supported</heading>
</para><para>There is no known unsupported functionality.</para><para><heading level="2">Instrumentation</heading>
</para><para>The pin driver does not use any of the instrumentation facilities.</para><para><heading level="1">Usage Examples</heading>
</para><para><heading level="2">Initialization and Pin Allocation</heading>
</para><para>Example that illustrates when and how to call <ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init()</ref>, <ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open()</ref>, <ref refid="_p_i_n_8h_1ae96b7cc445336d52f8f6db762ff80156" kindref="member">PIN_add()</ref>, <ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close()</ref> <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Default<sp/>pin<sp/>configuration.<sp/>Typically<sp/>resides<sp/>in<sp/>Board.c<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>IOs<sp/>not<sp/>mentioned<sp/>here<sp/>configured<sp/>to<sp/>default:<sp/>input/output/pull<sp/>disabled</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>PIN_Config<sp/>BoardGpioInitTable[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO11:<sp/>LED<sp/>A<sp/>(initially<sp/>off)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(11)<sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO10:<sp/>LED<sp/>B<sp/>(initially<sp/>off)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(10)<sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO23:<sp/>BUTTON<sp/>A<sp/>(ensure<sp/>pull-up<sp/>as<sp/>button<sp/>A<sp/>is<sp/>also<sp/>used<sp/>by<sp/>other<sp/>ICs)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(23)<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO3:<sp/>LCD<sp/>controller<sp/>reset<sp/>line<sp/>(make<sp/>sure<sp/>LCD<sp/>is<sp/>in<sp/>reset)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(3)<sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Terminate<sp/>list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_TERMINATE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Stack<sp/>size<sp/>in<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>THREADSTACKSIZE<sp/><sp/><sp/>1024</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>PIN_init()<sp/>should<sp/>be<sp/>called<sp/>as<sp/>early<sp/>as<sp/>possible<sp/>in<sp/>boot</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>main()<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_t<sp/><sp/><sp/><sp/><sp/><sp/>attrs;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>sched_param<sp/><sp/>priParam;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detachState;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Board_initGeneral()<sp/>will<sp/>call<sp/>PIN_init(BoardGpioInitTable)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Board_initGeneral();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>priority<sp/>and<sp/>stack<sp/>size<sp/>attributes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_init(&amp;attrs);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priParam.sched_priority<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detachState<sp/>=<sp/>PTHREAD_CREATE_DETACHED;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>=<sp/>pthread_attr_setdetachstate(&amp;attrs,<sp/>detachState);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_attr_setdetachstate()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_setschedparam(&amp;attrs,<sp/>&amp;priParam);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>|=<sp/>pthread_attr_setstacksize(&amp;attrs,<sp/>THREADSTACKSIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_attr_setstacksize()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>=<sp/>pthread_create(&amp;thread,<sp/>&amp;attrs,<sp/>mainThread,<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_create()<sp/>failed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>kernel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Add_Kernel_Start_Call();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Human<sp/>user<sp/>interface<sp/>PIN<sp/>state/handle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>PIN_State<sp/><sp/>hStateHui;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#define<sp/>HUI_LED_A<sp/><sp/><sp/><sp/><sp/>PIN_ID(11)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#define<sp/>HUI_LED_B<sp/><sp/><sp/><sp/><sp/>PIN_ID(10)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#define<sp/>HUI_LED_C<sp/><sp/><sp/><sp/><sp/>PIN_ID(9)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#define<sp/>HUI_BUTTON_A<sp/><sp/>PIN_ID(23)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#define<sp/>HUI_BUTTON_B<sp/><sp/>PIN_ID(24)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>static<sp/>void<sp/>taskStartFxn(UArg<sp/>a0,<sp/>UArg<sp/>a1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Define<sp/>pins<sp/>used<sp/>by<sp/>Human<sp/>user<sp/>interface<sp/>and<sp/>initial<sp/>configuration</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>PIN_Config<sp/>pinListHui[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_A<sp/><sp/><sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_B<sp/><sp/><sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_TERMINATE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>handle<sp/>to<sp/>this<sp/>collection<sp/>of<sp/>pins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!PIN_open(&amp;hStateHui,<sp/>pinListHui))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>allocation<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>also<sp/>add<sp/>(and<sp/>remove)<sp/>pins<sp/>to<sp/>a<sp/>set<sp/>at<sp/>run<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_Status<sp/>status<sp/>=<sp/>PIN_add(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;hStateHui,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_C<sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>PIN_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handling<sp/>allocation<sp/>error<sp/>is<sp/>especially<sp/>important<sp/>with<sp/>PIN_add()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huiDoSomething();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Before<sp/>ending<sp/>task,<sp/>make<sp/>sure<sp/>to<sp/>deallocate<sp/>pins.<sp/>They<sp/>will<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>to<sp/>the<sp/>default<sp/>configurations<sp/>provided<sp/>in<sp/>PIN_init()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_close(&amp;hStateHui);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para><heading level="2">Application use of GPIO</heading>
</para><para>An example of using GPIO that builds on the previous example. Illustrates how to read input values, set output values and control output enable <programlisting><codeline><highlight class="normal">void<sp/>huiDoSomething()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Running<sp/>lights<sp/>on<sp/>LEDs<sp/>A-B-C<sp/>(left<sp/>to<sp/>right).<sp/>Button<sp/>A<sp/>causes<sp/>left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>movement,<sp/>button<sp/>B<sp/>causes<sp/>right<sp/>movement,<sp/>both<sp/>simultaneously<sp/>aborts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>and<sp/>disables<sp/>LED<sp/>output<sp/>drivers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>initial<sp/>state<sp/>(A<sp/>off,<sp/>B<sp/>off,<sp/>C<sp/>on).<sp/>Only<sp/>our<sp/>outputs<sp/>are<sp/>affected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setPortOutputValue(&amp;hStateHui,<sp/>(1&lt;&lt;HUI_LED_C));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(moveDir)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>LEDs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(moveDir&lt;0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Left<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_A);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_C));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Right<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_C);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_A));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>333<sp/>ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task_sleep(333000/10);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>input<sp/>from<sp/>both<sp/>buttons<sp/>simultaneously</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buttons<sp/>=<sp/>PIN_getPortInputValue(&amp;hStateHui);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;((1&lt;&lt;HUI_BUTTON_A)|(1&lt;&lt;HUI_BUTTON_A)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>output<sp/>enable<sp/>for<sp/>all<sp/>pins<sp/>(only<sp/>our<sp/>pins<sp/>affected)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setPortOutputEnable(&amp;hStateHui,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Pin Interrupt</heading>
</para><para>An example that handles pin inputs in the GPIO example above using PIN interrupts instead: <programlisting><codeline><highlight class="normal">//<sp/>volatile<sp/>variable<sp/>used<sp/>to<sp/>communicate<sp/>between<sp/>callback<sp/>and<sp/>task</highlight></codeline>
<codeline><highlight class="normal">static<sp/>volatile<sp/>int32_t<sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Pin<sp/>interrupt<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">void<sp/>huiPinIntCb(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Ignore<sp/>pinId<sp/>and<sp/>read<sp/>input<sp/>from<sp/>both<sp/>buttons<sp/>simultaneously</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buttons<sp/>=<sp/>PIN_getPortInputValue(&amp;hStateHui);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;((1&lt;&lt;HUI_BUTTON_A)|(1&lt;&lt;HUI_BUTTON_A)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>huiDoSomething()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Running<sp/>lights<sp/>on<sp/>LEDs<sp/>A-B-C<sp/>(left<sp/>to<sp/>right).<sp/>Button<sp/>A<sp/>causes<sp/>left</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>movement,<sp/>button<sp/>B<sp/>causes<sp/>right<sp/>movement,<sp/>both<sp/>simultaneously<sp/>aborts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>and<sp/>disables<sp/>LED<sp/>output<sp/>drivers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>initial<sp/>state<sp/>(A<sp/>off,<sp/>B<sp/>off,<sp/>C<sp/>on).<sp/>Only<sp/>our<sp/>outputs<sp/>are<sp/>affected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setPortOutputValue(&amp;hStateHui,<sp/>(1&lt;&lt;HUI_LED_C));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Setup<sp/>pin<sp/>interrupts<sp/>and<sp/>register<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_registerIntCb(&amp;hStateHui,<sp/>huiPinIntCb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_IRQ_NEGEDGE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_IRQ_NEGEDGE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(moveDir)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>LEDs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(moveDir&lt;0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Left<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_A);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_C));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Right<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_C);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_A));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>333<sp/>ms<sp/>(we<sp/>will<sp/>likely<sp/>go<sp/>into<sp/>standby)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task_sleep(333000/10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>output<sp/>enable<sp/>for<sp/>all<sp/>pins<sp/>(only<sp/>our<sp/>pins<sp/>affected)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setPortOutputEnable(&amp;hStateHui,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>pin<sp/>interrupts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_IRQ_DIS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_IRQ_DIS);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2017,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*!*****************************************************************************</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN.h</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Generic<sp/>PIN<sp/>&amp;<sp/>GPIO<sp/>driver</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>use<sp/>the<sp/>PIN<sp/>driver<sp/>ensure<sp/>that<sp/>the<sp/>correct<sp/>TI-RTOS<sp/>driver<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>is<sp/>linked<sp/>in<sp/>and<sp/>include<sp/>this<sp/>header<sp/>file:</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#include<sp/>&lt;ti/drivers/PIN.h&gt;</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>use<sp/>device-specific<sp/>functionality<sp/>or<sp/>to<sp/>use<sp/>the<sp/>size/speed-</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>optimized<sp/>versions<sp/>of<sp/>some<sp/>of<sp/>the<sp/>PIN<sp/>driver<sp/>functions<sp/>that<sp/>circumvent<sp/>error</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>resource<sp/>checking,<sp/>link<sp/>in<sp/>the<sp/>correct<sp/>TI-RTOS<sp/>driver<sp/>library<sp/>for<sp/>your</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>device<sp/>and<sp/>include<sp/>the<sp/>device-specific<sp/>PIN<sp/>driver<sp/>header<sp/>file<sp/>(which<sp/>in<sp/>turn</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>includes<sp/>PIN.h).<sp/>As<sp/>an<sp/>example<sp/>for<sp/>the<sp/>CC26xx<sp/>family<sp/>of<sp/>devices:</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#include<sp/>&lt;ti/drivers/pin/PINCC26xx.h&gt;</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>driver<sp/>allows<sp/>clients<sp/>(applications<sp/>or<sp/>other<sp/>drivers)<sp/>to<sp/>allocate</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>control<sp/>the<sp/>I/O<sp/>pins<sp/>on<sp/>the<sp/>device.<sp/>The<sp/>pins<sp/>can<sp/>either<sp/>be<sp/>software-</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>controlled<sp/>general-purpose<sp/>I/O<sp/>(GPIO)<sp/>or<sp/>connected<sp/>to<sp/>hardware<sp/>peripherals.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/>Furthermore,<sp/>the<sp/>PIN<sp/>driver<sp/>allows<sp/>clients<sp/>to<sp/>configure<sp/>interrupt</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>functionality<sp/>on<sp/>the<sp/>pins<sp/>to<sp/>receive<sp/>callbacks<sp/>(and<sp/>potentially<sp/>wake<sp/>up<sp/>from</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>standby<sp/>or<sp/>idle<sp/>power<sp/>modes)<sp/>on<sp/>configurable<sp/>signal<sp/>edges.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>Most<sp/>other<sp/>drivers<sp/>rely<sp/>on<sp/>functionality<sp/>in<sp/>the<sp/>PIN<sp/>driver.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Structure<sp/>##</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>to<sp/>provide<sp/>a<sp/>generic<sp/>driver<sp/>interface,<sp/>this<sp/>file<sp/>(PIN.h)<sp/>only</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>defines<sp/>the<sp/>API<sp/>and<sp/>some<sp/>common<sp/>data<sp/>types<sp/>and<sp/>macros<sp/>of<sp/>the<sp/>driver.<sp/>A<sp/>PIN</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>client<sp/>(application<sp/>or<sp/>driver)<sp/>can<sp/>in<sp/>most<sp/>cases<sp/>only<sp/>use<sp/>the<sp/>generic<sp/>PIN</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>API,<sp/>however,<sp/>for<sp/>more<sp/>advanced<sp/>usage<sp/>where<sp/>device-specific<sp/>pin</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>configuration<sp/>is<sp/>used<sp/>or<sp/>device-specific<sp/>PIN<sp/>driver<sp/>API<sp/>extensions<sp/>are</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>used<sp/>must<sp/>use<sp/>the<sp/>device-specific<sp/>PIN<sp/>driver<sp/>API.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>device-independent<sp/>API<sp/>is<sp/>implemented<sp/>as<sp/>function<sp/>calls<sp/>with<sp/>pin</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>access<sp/>control<sp/>based<sp/>on<sp/>the<sp/>PIN<sp/>client<sp/>handle.<sp/>For<sp/>time-critical</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>applications<sp/>the<sp/>device-specific<sp/>API<sp/>can<sp/>be<sp/>used<sp/>directly,<sp/>as<sp/>these</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>API<sp/>functions<sp/>are<sp/>implemented<sp/>as<sp/>inlined<sp/>functions<sp/>without<sp/>access<sp/>control.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Functionality<sp/>##</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>module<sp/>provides<sp/>the<sp/>following<sp/>functionality:</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>I/O<sp/>pins<sp/>upon<sp/>boot<sp/>to<sp/>a<sp/>default<sp/>configuration<sp/>(possibly</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>user-generated)</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Provides<sp/>atomic<sp/>manipulation<sp/>of<sp/>I/O<sp/>pin<sp/>hardware<sp/>registers<sp/>to<sp/>allow<sp/>safe</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>simultaneous<sp/>use<sp/>of<sp/>I/O<sp/>pin<sp/>resources</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>I/O<sp/>pin<sp/>allocation</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>A<sp/>set<sp/>of<sp/>pins<sp/>can<sp/>be<sp/>allocated<sp/>receiving<sp/>a<sp/>pin<sp/>set<sp/>handle.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Typically<sp/>each<sp/>peripheral<sp/>driver<sp/>will<sp/>allocate<sp/>a<sp/>set<sp/>of<sp/>pins<sp/>and<sp/>an</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>application<sp/>must<sp/>allocate<sp/>the<sp/>pins<sp/>it<sp/>uses<sp/>too</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>When<sp/>a<sp/>pin<sp/>set<sp/>is<sp/>deallocated<sp/>all<sp/>the<sp/>pins<sp/>in<sp/>it<sp/>revert<sp/>to<sp/>the<sp/>state</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>they<sp/>were<sp/>initialized<sp/>to<sp/>at<sp/>boot</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>General-purpose<sp/>I/O<sp/>(GPIO)<sp/>services</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Read<sp/>input<sp/>buffer<sp/>value</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Read<sp/>and<sp/>set<sp/>output<sp/>buffer<sp/>value</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Read<sp/>and<sp/>set<sp/>output<sp/>buffer<sp/>enable</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Access<sp/>as<sp/>single<sp/>pin<sp/>or<sp/>port<sp/>(muliple<sp/>pins<sp/>simultaneously)</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Protect<sp/>pin<sp/>manipulation</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Pins<sp/>in<sp/>an<sp/>allocated<sp/>set<sp/>can<sp/>only<sp/>be<sp/>manipulated<sp/>using<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>handle.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>No<sp/>handle<sp/>is<sp/>needed<sp/>to<sp/>read<sp/>input<sp/>and<sp/>output<sp/>buffer<sp/>values</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>I/O<sp/>buffer/driver<sp/>control</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Input<sp/>mode<sp/>(detached,<sp/>hysteresis,<sp/>pull-up,<sp/>pull-down)</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Output<sp/>mode<sp/>(tristated,<sp/>push-pull,<sp/>open<sp/>drain,<sp/>open<sp/>source)</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Output<sp/>driver<sp/>strength<sp/>control</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Output<sp/>driver<sp/>slew<sp/>rate<sp/>control</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>I/O<sp/>source/target<sp/>selection<sp/>(device-specific<sp/>driver<sp/>only)</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Map<sp/>pin<sp/>to<sp/>GPIO,<sp/>peripheral<sp/>or<sp/>HW<sp/>observation<sp/>signal</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Configuration<sp/>of<sp/>I/O<sp/>interrupt<sp/>and<sp/>wakeup<sp/>from<sp/>standby</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Interrupt<sp/>configuration:<sp/>signal<sp/>edge<sp/>to<sp/>interrupt<sp/>on,<sp/>interrupt<sp/>mask,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>callback<sp/>function<sp/>registration</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>-<sp/>Pins<sp/>that<sp/>have<sp/>enabled<sp/>interrupts<sp/>will<sp/>also<sp/>wake<sp/>up<sp/>the<sp/>device<sp/>from<sp/>low-</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>modes<sp/>like<sp/>standby<sp/>and<sp/>idle<sp/>upon<sp/>events</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Provides<sp/>data<sp/>types<sp/>and<sp/>enums/defines<sp/>for<sp/>use<sp/>in<sp/>pin<sp/>configurations</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>definitions<sp/>in<sp/>board<sp/>files,<sp/>drivers<sp/>and<sp/>applications</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Pin<sp/>Allocation<sp/>##</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>purpose<sp/>of<sp/>being<sp/>able<sp/>to<sp/>allocate<sp/>pins<sp/>to<sp/>a<sp/>pin<sp/>set<sp/>is<sp/>to:</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Manage<sp/>pin<sp/>resources</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Give<sp/>exclusive,<sp/>protected<sp/>access<sp/>to<sp/>these<sp/>pins</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Establish<sp/>a<sp/>driver<sp/>state<sp/>in<sp/>connection<sp/>with<sp/>these<sp/>pins<sp/>that<sp/>allow</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>functionality<sp/>such<sp/>as<sp/>I/O<sp/>interrupt<sp/>callback<sp/>and<sp/>I/O<sp/>port<sp/>operations</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>in<sp/>a<sp/>safe<sp/>manner</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>|--------------------|------------------------------------------------------|</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_open()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Allocate<sp/>pins<sp/>to<sp/>a<sp/>set,<sp/>returns<sp/>handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_add()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Add<sp/>pin<sp/>to<sp/>pin<sp/>set<sp/>for<sp/>open<sp/>PIN<sp/>handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_remove()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Removes<sp/>pin<sp/>from<sp/>pin<sp/>set<sp/>for<sp/>open<sp/>PIN<sp/>handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_close()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Deallocate<sp/>pin<sp/>set,<sp/>revert<sp/>to<sp/>original<sp/>GPIO<sp/>state<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>GPIO<sp/>##</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>Pins<sp/>that<sp/>are<sp/>to<sp/>be<sp/>used<sp/>as<sp/>software-controlled<sp/>general-purpose<sp/>I/O<sp/>(GPIO)</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>need<sp/>to<sp/>be<sp/>allocated<sp/>in<sp/>the<sp/>same<sp/>manner<sp/>as<sp/>for<sp/>pins<sp/>that<sp/>will<sp/>be<sp/>mapped<sp/>to</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>hardware<sp/>peripheral<sp/>ports.<sp/>A<sp/>pin<sp/>set<sp/>requested<sp/>with<sp/>a<sp/>PIN_open()<sp/>call<sp/>may</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>contain<sp/>a<sp/>mix<sp/>of<sp/>pins<sp/>to<sp/>be<sp/>used<sp/>for<sp/>GPIO<sp/>and<sp/>hardware-mapped<sp/>pins.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/>When<sp/>a<sp/>pin<sp/>is<sp/>deallocated<sp/>using<sp/>PIN_close()<sp/>it<sp/>reverts<sp/>to<sp/>the<sp/>GPIO</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>configuration<sp/>it<sp/>was<sp/>given<sp/>in<sp/>the<sp/>initial<sp/>call<sp/>to<sp/>PIN_init().</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>|----------------------|---------------------------------------------------|</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>I/O<sp/>pins<sp/>to<sp/>a<sp/>safe<sp/>GPIO<sp/>state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_open()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Allocate<sp/>pins<sp/>to<sp/>a<sp/>set,<sp/>returns<sp/>handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_close()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Deallocate<sp/>pin<sp/>set,<sp/>revert<sp/>to<sp/>original<sp/>GPIO<sp/>state<sp/>|</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setConfig()<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Sets<sp/>parts<sp/>of<sp/>or<sp/>complete<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getConfig()<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Returns<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setOutputEnable()|<sp/>Control<sp/>output<sp/>enable<sp/>of<sp/>GPIO<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getInputValue()<sp/><sp/>|<sp/>Read<sp/>input<sp/>value<sp/>on<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setOutputValue()<sp/>|<sp/>Set<sp/>output<sp/>value<sp/>of<sp/>GPIO<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getOutputValue()<sp/>|<sp/>Get<sp/>current<sp/>output<sp/>value<sp/>of<sp/>GPIO<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>GPIO<sp/>Ports<sp/>##</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>Sometimes<sp/>it<sp/>is<sp/>necessary<sp/>to<sp/>be<sp/>able<sp/>to<sp/>read<sp/>from,<sp/>write<sp/>to<sp/>or<sp/>control</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>multiple<sp/>pins<sp/>simultaneously<sp/>(in<sp/>time).<sp/>The<sp/>PIN<sp/>driver<sp/>allows<sp/>a<sp/>set<sp/>of</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>allocated<sp/>pins,<sp/>if<sp/>they<sp/>reside<sp/>on<sp/>the<sp/>same<sp/>GPIO<sp/>port<sp/>in<sp/>the<sp/>underlying</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/>hardware,<sp/>to<sp/>be<sp/>manipulated<sp/>simultaneously.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>|--------------------------|---------------------------------------------------|</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_open()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Allocate<sp/>pins<sp/>to<sp/>a<sp/>set,<sp/>returns<sp/>handle<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_close()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Deallocate<sp/>pin<sp/>set,<sp/>revert<sp/>to<sp/>original<sp/>GPIO<sp/>state<sp/>|</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getPortMask()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Returns<sp/>bitmask<sp/>for<sp/>allocated<sp/>pins<sp/>in<sp/>GPIO<sp/>port<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getPortInputValue()<sp/><sp/>|<sp/>Returns<sp/>input<sp/>value<sp/>of<sp/>whole<sp/>GPIO<sp/>port<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setPortOutputValue()<sp/>|<sp/>Sets<sp/>output<sp/>value<sp/>of<sp/>whole<sp/>GPIO<sp/>port<sp/>(masked)<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getPortOutputValue()<sp/>|<sp/>Get<sp/>current<sp/>output<sp/>value<sp/>of<sp/>whole<sp/>GPIO<sp/>port<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setPortOutputValue()<sp/>|<sp/>Sets<sp/>output<sp/>value<sp/>of<sp/>whole<sp/>GPIO<sp/>port<sp/>(masked)<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setPortOutputEnable()|<sp/>Sets<sp/>output<sp/>enable<sp/>of<sp/>whole<sp/>GPIO<sp/>port<sp/>(masked)<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>I/O<sp/>Pin<sp/>Configuration<sp/>##</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/>Different<sp/>devices<sp/>provide<sp/>different<sp/>levels<sp/>of<sp/>configurability<sp/>of<sp/>I/O<sp/>pins.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>driver<sp/>provides<sp/>a<sp/>fairly<sp/>extensive<sp/>set<sp/>of<sp/>@ref<sp/>PIN_GENERIC_FLAGS</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>&quot;generic<sp/>IO<sp/>configuration<sp/>options&quot;<sp/>that<sp/>are<sp/>device-independent,<sp/>all<sp/>of<sp/>which</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>might<sp/>not<sp/>be<sp/>supported<sp/>by<sp/>the<sp/>underlying<sp/>device-specific<sp/>PIN<sp/>driver<sp/>and</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>hardware.<sp/>Likewise,<sp/>the<sp/>underlying<sp/>device-specific<sp/>PIN<sp/>driver<sp/>and<sp/>hardware</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>might<sp/>support<sp/>additional<sp/>configuration<sp/>options<sp/>not<sp/>covered<sp/>by<sp/>the<sp/>generic</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/>options.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>allow<sp/>both<sp/>independence<sp/>from<sp/>and<sp/>flexibility<sp/>to<sp/>use<sp/>features<sp/>on<sp/>the<sp/>target</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>device,<sp/>the<sp/>#PIN_Config<sp/>entries<sp/>used<sp/>by<sp/>the<sp/>PIN<sp/>driver<sp/>allows<sp/>use<sp/>of<sp/>either</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>set<sp/>of<sp/>@ref<sp/>PIN_GENERIC_FLAGS<sp/>&quot;generic<sp/>PIN<sp/>configuration<sp/>options&quot;<sp/>or<sp/>a</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/>device-specific<sp/>set<sp/>of<sp/>PIN<sp/>configuration<sp/>options<sp/>defined<sp/>in<sp/>the<sp/>underlying</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/>device-specific<sp/>PIN<sp/>driver<sp/>(e.g.<sp/>PINCC26XX.h)</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Mapping<sp/>to<sp/>GPIO<sp/>or<sp/>Peripheral<sp/>###</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>Since<sp/>the<sp/>amount<sp/>of<sp/>flexibilty<sp/>in<sp/>which<sp/>peripherals<sp/>can<sp/>be<sp/>mapped<sp/>to<sp/>which</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/>pins<sp/>and<sp/>the<sp/>manner<sp/>in<sp/>which<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>set<sp/>up<sp/>is<sp/>highly</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>device-specific,<sp/>functions<sp/>for<sp/>configuring<sp/>this<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>generic</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/>PIN<sp/>driver<sp/>API<sp/>but<sp/>is<sp/>left<sp/>to<sp/>be<sp/>implemented<sp/>by<sp/>device-specific<sp/>PIN<sp/>drivers.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/>See<sp/>the<sp/>relevant<sp/>device-specific<sp/>PIN<sp/>driver<sp/>(e.g.<sp/>PINCC26XX.h)<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Input<sp/>Mode<sp/>###</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>input<sp/>mode<sp/>of<sp/>a<sp/>pin<sp/>controls:</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Input<sp/>buffer<sp/>enable</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Pull-ups<sp/>or<sp/>pull-downs</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Hysteresis<sp/>of<sp/>input<sp/>buffer</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Inversion<sp/>of<sp/>logical<sp/>input<sp/>level</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Potentially,<sp/>device-specific<sp/>options</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>input<sp/>mode<sp/>is<sp/>set<sp/>initially<sp/>with<sp/>PIN_init()<sp/>or<sp/>at<sp/>a<sp/>later<sp/>stage<sp/>with</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>PIN_setConfig()<sp/>and<sp/>a<sp/>bitmask<sp/>with<sp/>the<sp/>relevant<sp/>options</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>|------------------|-------------------------------------------------------|</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>IOs<sp/>to<sp/>a<sp/>safe<sp/>GPIO<sp/>state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getConfig()<sp/><sp/>|<sp/>Returns<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setConfig()<sp/><sp/>|<sp/>Sets<sp/>parts<sp/>of<sp/>or<sp/>complete<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Output<sp/>Mode<sp/>###</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>output<sp/>mode<sp/>of<sp/>a<sp/>pin<sp/>controls:</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Output<sp/>buffer<sp/>enable</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Output<sp/>driver<sp/>mode<sp/>(push-pull,<sp/>open-drain,<sp/>open-source)</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Output<sp/>driver<sp/>slew<sp/>control</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Output<sp/>driver<sp/>current<sp/>(drive<sp/>strength)</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Inversion<sp/>of<sp/>logical<sp/>output<sp/>level</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Potentially,<sp/>device-specific<sp/>options</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/>|----------------------|---------------------------------------------------|</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>IOs<sp/>to<sp/>a<sp/>safe<sp/>GPIO<sp/>state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setOutputEnable()|<sp/>Control<sp/>output<sp/>enable<sp/>of<sp/>GPIO<sp/>pins<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getConfig()<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Returns<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setConfig()<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Sets<sp/>parts<sp/>of<sp/>or<sp/>complete<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Pin<sp/>Interrupt<sp/>and<sp/>Pin<sp/>Wakeup<sp/>###</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/>Pin<sp/>interrupts<sp/>are<sp/>used<sp/>to<sp/>process<sp/>asynchronous<sp/>signal<sp/>edge<sp/>events<sp/>on<sp/>pins</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>potentially<sp/>wake<sp/>the<sp/>device<sp/>up<sp/>from<sp/>low<sp/>power<sp/>sleep<sp/>modes.<sp/>To<sp/>use<sp/>pin</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/>interrupts<sp/>the<sp/>relevant<sp/>pins<sp/>must<sp/>be<sp/>allocated<sp/>and<sp/>a<sp/>interrupt<sp/>callback</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/>registered<sp/>by<sp/>the<sp/>client.<sp/>The<sp/>callback<sp/>function<sp/>will<sp/>be<sp/>called<sp/>in<sp/>a<sp/>SWI</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/>context.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>API<sp/>function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/>|---------------------|----------------------------------------------------|</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_init()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Initialize<sp/>IOs<sp/>to<sp/>a<sp/>safe<sp/>GPIO<sp/>state<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getConfig()<sp/><sp/><sp/><sp/><sp/>|<sp/>Returns<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setConfig()<sp/><sp/><sp/><sp/><sp/>|<sp/>Sets<sp/>parts<sp/>of<sp/>or<sp/>complete<sp/>pin<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setInterrupt()<sp/><sp/>|<sp/>Control<sp/>interrupt<sp/>enable<sp/>and<sp/>edge<sp/>for<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_registerIntCb()<sp/>|<sp/>Register<sp/>callback<sp/>function<sp/>for<sp/>a<sp/>set<sp/>of<sp/>pins<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_setUserArg()<sp/><sp/><sp/><sp/>|<sp/>Sets<sp/>a<sp/>user<sp/>argument<sp/>associated<sp/>with<sp/>the<sp/>handle<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>PIN_getUserArg()<sp/><sp/><sp/><sp/>|<sp/>Gets<sp/>a<sp/>user<sp/>argument<sp/>associated<sp/>with<sp/>the<sp/>handle<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>PIN<sp/>Data<sp/>Types<sp/>##</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>driver<sp/>defines<sp/>the<sp/>following<sp/>data<sp/>types:</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#PIN_Id:<sp/>identifies<sp/>a<sp/>pin<sp/>in<sp/>arguments<sp/>or<sp/>lists</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>#PIN_Config:<sp/>provides<sp/>I/O<sp/>configuration<sp/>options<sp/>for<sp/>a<sp/>pin<sp/>and<sp/>also<sp/>embeds</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>a<sp/>#PIN_Id<sp/>identifier.<sp/>See<sp/>@ref<sp/>PIN_GENERIC_FLAGS<sp/>&quot;available<sp/>flags/fields&quot;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>PIN<sp/>Config<sp/>Flags/Fields<sp/>and<sp/>Bitmasks<sp/>##</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>driver<sp/>uses<sp/>the<sp/>#PIN_Config<sp/>data<sp/>type<sp/>many<sp/>places<sp/>and<sp/>it<sp/>merits<sp/>some</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/>additional<sp/>attention.<sp/>A<sp/>#PIN_Config<sp/>value<sp/>consists<sp/>of<sp/>a<sp/>collection<sp/>of<sp/>flags</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>fields<sp/>that<sp/>define<sp/>how<sp/>an<sp/>I/O<sp/>pin<sp/>and<sp/>its<sp/>attached<sp/>GPIO<sp/>interface<sp/>should</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/>behave<sp/>electrically<sp/>and<sp/>logically.<sp/>In<sp/>addition<sp/>a<sp/>#PIN_Config<sp/>value<sp/>also</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/>embeds<sp/>a<sp/>#PIN_Id<sp/>pin<sp/>ID,<sp/>identifying<sp/>which<sp/>pin<sp/>it<sp/>refers<sp/>to.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>#PIN_Config<sp/>value<sp/>can<sp/>use<sp/>one<sp/>of<sp/>two<sp/>mutually<sp/>exclusive<sp/>sets<sp/>of<sp/>flags<sp/>and</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>fields:<sp/>@ref<sp/>PIN_GENERIC_FLAGS<sp/>&quot;device-independent<sp/>options&quot;<sp/>defined<sp/>in</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/>PIN.h<sp/>or<sp/>device-dependent<sp/>options<sp/>defined<sp/>in<sp/>the<sp/>device-specific</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/>implementation<sp/>of<sp/>the<sp/>PIN<sp/>driver<sp/>interface.<sp/>Any<sp/>function<sp/>that<sp/>uses</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/><sp/>#PIN_Config<sp/>will<sp/>accept<sp/>both<sp/>option<sp/>types,<sp/>just<sp/>not<sp/>at<sp/>the<sp/>same<sp/>time.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/>PIN_getConfig()<sp/>always<sp/>returns<sp/>device-independent<sp/>options,<sp/>an<sp/>additional</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/><sp/>device-specific<sp/>version<sp/>(e.g.<sp/>PINCC26XX_getConfig())<sp/>might<sp/>return</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/>device-specific<sp/>options.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>bitmask<sp/>argument<sp/>for<sp/>PIN_setConfig()<sp/>decides<sp/>which<sp/>of<sp/>the<sp/>options<sp/>the</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/>call<sp/>should<sp/>affect.<sp/>All<sp/>other<sp/>options<sp/>are<sp/>kept<sp/>at<sp/>their<sp/>current<sp/>values<sp/>in</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/>hardware.<sp/>Thus<sp/>PIN_setConfig(hPins,<sp/>PIN_BM_PULLING,<sp/>PIN_BM_PULLUP)<sp/>will<sp/>only</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/>change<sp/>the<sp/>pullup/pulldown<sp/>configuration<sp/>of<sp/>the<sp/>pin,<sp/>leaving<sp/>everything</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>else,<sp/>such<sp/>as<sp/>for<sp/>instance<sp/>output<sp/>enable,<sp/>input<sp/>hysteresis<sp/>or<sp/>output<sp/>value,</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>untouched.<sp/>For<sp/>#PIN_Config<sp/>lists<sp/>(as<sp/>supplied<sp/>to<sp/>PIN_init()<sp/>for<sp/>instance)</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/>there<sp/>is<sp/>no<sp/>mask,<sp/>so<sp/>all<sp/>options<sp/>will<sp/>affect<sp/>the<sp/>pin.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/>Some<sp/>of<sp/>the<sp/>options<sp/>affect<sp/>the<sp/>pin<sp/>regardless<sp/>of<sp/>whether<sp/>it<sp/>is<sp/>mapped<sp/>to</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>a<sp/>hardware<sp/>peripheral<sp/>or<sp/>GPIO<sp/>and<sp/>some<sp/>options<sp/>only<sp/>take<sp/>effect<sp/>when<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>mapped<sp/>to<sp/>GPIO.<sp/>These<sp/>latter<sp/>options<sp/>have<sp/>\_GPIO_<sp/>in<sp/>their<sp/>names.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>default<sp/>value<sp/>for<sp/>a<sp/>flag/field<sp/>is<sp/>indicated<sp/>with<sp/>a<sp/>star<sp/>(*)<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>description<sp/>of<sp/>the<sp/>options<sp/>and<sp/>will<sp/>be<sp/>applied<sp/>if<sp/>any<sp/>explicit<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/>not<sp/>supplied<sp/>for<sp/>a<sp/>flag/field<sp/>that<sp/>is<sp/>masked.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>available<sp/>options<sp/>can<sp/>be<sp/>grouped<sp/>into<sp/>categories<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Input<sp/>Mode<sp/>Options<sp/>###</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>Option<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Option<sp/>bitmask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>HW/GPIO<sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>|--------------------|-----------------------|---------|--------------------------------|</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_INPUT_EN<sp/>(*)<sp/><sp/><sp/>|#PIN_BM_INPUT_EN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>pin<sp/>input<sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_INPUT_DIS<sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_INPUT_EN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Disable<sp/>pin<sp/>input<sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_HYSTERESIS<sp/><sp/><sp/><sp/><sp/>|#PIN_BM_HYSTERESIS<sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>hysteresis<sp/>on<sp/>input<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_NOPULL<sp/>(*)<sp/><sp/><sp/><sp/><sp/>|#PIN_BM_PULLING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>No<sp/>pullup/pulldown<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_PULLUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_PULLING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>pullup<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_PULLDOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_PULLING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>pulldown<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_INPUT_MODE<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Mask<sp/>for<sp/>all<sp/>input<sp/>mode<sp/>options|</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Output<sp/>Mode<sp/>Options<sp/>###</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>Option<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Option<sp/>bitmask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>HW/GPIO<sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/>|------------------------|------------------------|---------|----------------------------------|</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_GPIO_OUTPUT_DIS<sp/>(*)|#PIN_BM_GPIO_OUTPUT_EN<sp/><sp/>|<sp/>GPIO<sp/><sp/><sp/><sp/>|<sp/>Disable<sp/>GPIO<sp/>output<sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_GPIO_OUTPUT_EN<sp/><sp/><sp/><sp/><sp/>|#PIN_BM_GPIO_OUTPUT_EN<sp/><sp/>|<sp/>GPIO<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>GPIO<sp/>output<sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_GPIO_LOW<sp/>(*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_GPIO_OUTPUT_VAL<sp/>|<sp/>GPIO<sp/><sp/><sp/><sp/>|<sp/>Output<sp/>0<sp/>when<sp/>GPIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_GPIO_HIGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_GPIO_OUTPUT_VAL<sp/>|<sp/>GPIO<sp/><sp/><sp/><sp/>|<sp/>Output<sp/>1<sp/>when<sp/>GPIO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_PUSHPULL<sp/>(*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_OUTPUT_BUF<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Use<sp/>push-pull<sp/>output<sp/>buffer<sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_OPENDRAIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_OUTPUT_BUF<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Use<sp/>open<sp/>drain<sp/>output<sp/>buffer<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_OPENSOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_OUTPUT_BUF<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Use<sp/>open<sp/>source<sp/>output<sp/>buffer<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_SLEWCTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_SLEWCTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Enable<sp/>output<sp/>buffer<sp/>slew<sp/>control|</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_DRVSTR_MIN<sp/>(*)<sp/><sp/><sp/><sp/><sp/>|#PIN_BM_DRVSTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Output<sp/>buffer<sp/>uses<sp/>min<sp/>drive<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_DRVSTR_MED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_DRVSTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Output<sp/>buffer<sp/>uses<sp/>medium<sp/>drive<sp/><sp/>|</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_DRVSTR_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_DRVSTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Output<sp/>buffer<sp/>uses<sp/>max<sp/>drive<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_OUTPUT_MODE<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Mask<sp/>for<sp/>all<sp/>output<sp/>mode<sp/>options<sp/>|</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>*<sp/><sp/>###<sp/>Misc<sp/>Options<sp/>###</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/>Option<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Option<sp/>bitmask<sp/><sp/><sp/>|<sp/>HW/GPIO<sp/>|<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>|-------------------|------------------|---------|----------------------------------|</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_INV_INOUT<sp/><sp/><sp/><sp/><sp/>|#PIN_BM_INV_INOUT<sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Invert<sp/>input/output<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_IRQ_DIS<sp/>(*)<sp/><sp/><sp/>|#PIN_BM_IRQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Disable<sp/>pin<sp/>interrupts<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_IRQ_NEGEDGE<sp/><sp/><sp/>|#PIN_BM_IRQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Pin<sp/>interrupts<sp/>on<sp/>negative<sp/>edges<sp/>|</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_IRQ_POSEDGE<sp/><sp/><sp/>|#PIN_BM_IRQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Pin<sp/>interrupts<sp/>on<sp/>negative<sp/>edges<sp/>|</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/>|#PIN_IRQ_BOTHEDGES<sp/>|#PIN_BM_IRQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Both<sp/><sp/><sp/><sp/>|<sp/>Pin<sp/>interrupts<sp/>on<sp/>both<sp/>edges<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|#PIN_BM_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Mask<sp/>for<sp/>*all*<sp/>options<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Initialization<sp/>##</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>PIN<sp/>driver<sp/>must<sp/>be<sp/>initialized<sp/>before<sp/>any<sp/>other<sp/>drivers<sp/>are<sp/>initialized.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/>In<sp/>order<sp/>for<sp/>IO<sp/>pins<sp/>to<sp/>get<sp/>a<sp/>safe<sp/>value<sp/>as<sp/>soon<sp/>as<sp/>possible<sp/>PIN_init()</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/>should<sp/>be<sp/>called<sp/>as<sp/>early<sp/>as<sp/>possible<sp/>in<sp/>the<sp/>boot<sp/>sequence.<sp/>Typically,</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/><sp/>PIN_init()<sp/>is<sp/>called<sp/>at<sp/>the<sp/>start<sp/>of<sp/>main()<sp/>before<sp/>TI-RTOS<sp/>is<sp/>started<sp/>with</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/><sp/>BIOS_start().</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/>PIN_init()<sp/>takes<sp/>as<sp/>an<sp/>argument<sp/>a<sp/>#PIN_Config<sp/>list<sp/>containing<sp/>default<sp/>pin</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/>configurations.<sp/>Typically<sp/>the<sp/>#PIN_Config<sp/>list<sp/>defined<sp/>in<sp/>the<sp/>board<sp/>files</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/>is<sp/>used:</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/>PIN_init(BoardGpioInitTable);</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>is<sp/>possible,<sp/>however,<sp/>to<sp/>use<sp/>another<sp/>#PIN_Config<sp/>list<sp/>if<sp/>desired.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Power<sp/>Management<sp/>Interaction<sp/>##</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/><sp/>No<sp/>specific<sp/>interaction<sp/>with<sp/>power<sp/>management<sp/>module,<sp/>as<sp/>PIN<sp/>is<sp/>independent</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Functionality<sp/>Not<sp/>Supported<sp/>##</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/>There<sp/>is<sp/>no<sp/>known<sp/>unsupported<sp/>functionality.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Instrumentation<sp/>##</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>pin<sp/>driver<sp/>does<sp/>not<sp/>use<sp/>any<sp/>of<sp/>the<sp/>instrumentation<sp/>facilities.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Initialization<sp/>and<sp/>Pin<sp/>Allocation<sp/>##</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/><sp/>Example<sp/>that<sp/>illustrates<sp/>when<sp/>and<sp/>how<sp/>to<sp/>call<sp/>PIN_init(),<sp/>PIN_open(),<sp/>PIN_add(),<sp/>PIN_close()</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Default<sp/>pin<sp/>configuration.<sp/>Typically<sp/>resides<sp/>in<sp/>Board.c<sp/>file.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>IOs<sp/>not<sp/>mentioned<sp/>here<sp/>configured<sp/>to<sp/>default:<sp/>input/output/pull<sp/>disabled</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>PIN_Config<sp/>BoardGpioInitTable[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO11:<sp/>LED<sp/>A<sp/>(initially<sp/>off)</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(11)<sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO10:<sp/>LED<sp/>B<sp/>(initially<sp/>off)</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(10)<sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO23:<sp/>BUTTON<sp/>A<sp/>(ensure<sp/>pull-up<sp/>as<sp/>button<sp/>A<sp/>is<sp/>also<sp/>used<sp/>by<sp/>other<sp/>ICs)</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(23)<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>DIO3:<sp/>LCD<sp/>controller<sp/>reset<sp/>line<sp/>(make<sp/>sure<sp/>LCD<sp/>is<sp/>in<sp/>reset)</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_ID(3)<sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL,</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Terminate<sp/>list</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_TERMINATE</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>//Stack<sp/>size<sp/>in<sp/>bytes</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>#define<sp/>THREADSTACKSIZE<sp/><sp/><sp/>1024</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>PIN_init()<sp/>should<sp/>be<sp/>called<sp/>as<sp/>early<sp/>as<sp/>possible<sp/>in<sp/>boot</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>void<sp/>main()<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread;</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_t<sp/><sp/><sp/><sp/><sp/><sp/>attrs;</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>sched_param<sp/><sp/>priParam;</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc;</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detachState;</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Board_initGeneral()<sp/>will<sp/>call<sp/>PIN_init(BoardGpioInitTable)</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Board_initGeneral();</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>priority<sp/>and<sp/>stack<sp/>size<sp/>attributes</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_init(&amp;attrs);</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priParam.sched_priority<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detachState<sp/>=<sp/>PTHREAD_CREATE_DETACHED;</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>=<sp/>pthread_attr_setdetachstate(&amp;attrs,<sp/>detachState);</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_attr_setdetachstate()<sp/>failed</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_attr_setschedparam(&amp;attrs,<sp/>&amp;priParam);</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>|=<sp/>pthread_attr_setstacksize(&amp;attrs,<sp/>THREADSTACKSIZE);</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_attr_setstacksize()<sp/>failed</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retc<sp/>=<sp/>pthread_create(&amp;thread,<sp/>&amp;attrs,<sp/>mainThread,<sp/>NULL);</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(retc<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>pthread_create()<sp/>failed</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(1);</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>kernel</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Add_Kernel_Start_Call();</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Human<sp/>user<sp/>interface<sp/>PIN<sp/>state/handle</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>PIN_State<sp/><sp/>hStateHui;</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#define<sp/>HUI_LED_A<sp/><sp/><sp/><sp/><sp/>PIN_ID(11)</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#define<sp/>HUI_LED_B<sp/><sp/><sp/><sp/><sp/>PIN_ID(10)</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#define<sp/>HUI_LED_C<sp/><sp/><sp/><sp/><sp/>PIN_ID(9)</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#define<sp/>HUI_BUTTON_A<sp/><sp/>PIN_ID(23)</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>#define<sp/>HUI_BUTTON_B<sp/><sp/>PIN_ID(24)</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>static<sp/>void<sp/>taskStartFxn(UArg<sp/>a0,<sp/>UArg<sp/>a1)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Define<sp/>pins<sp/>used<sp/>by<sp/>Human<sp/>user<sp/>interface<sp/>and<sp/>initial<sp/>configuration</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>PIN_Config<sp/>pinListHui[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_A<sp/><sp/><sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_B<sp/><sp/><sp/><sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_INPUT_EN<sp/><sp/>|<sp/>PIN_PULLUP<sp/>|<sp/>PIN_HYSTERESIS,</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_TERMINATE</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>handle<sp/>to<sp/>this<sp/>collection<sp/>of<sp/>pins</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!PIN_open(&amp;hStateHui,<sp/>pinListHui))<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>allocation<sp/>error</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>also<sp/>add<sp/>(and<sp/>remove)<sp/>pins<sp/>to<sp/>a<sp/>set<sp/>at<sp/>run<sp/>time</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_Status<sp/>status<sp/>=<sp/>PIN_add(</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;hStateHui,</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HUI_LED_C<sp/>|<sp/>PIN_GPIO_OUTPUT_EN<sp/>|<sp/>PIN_GPIO_LOW<sp/>|<sp/>PIN_PUSHPULL<sp/>|<sp/>PIN_DRVSTR_MAX,</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>!=<sp/>PIN_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handling<sp/>allocation<sp/>error<sp/>is<sp/>especially<sp/>important<sp/>with<sp/>PIN_add()</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>huiDoSomething();</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Before<sp/>ending<sp/>task,<sp/>make<sp/>sure<sp/>to<sp/>deallocate<sp/>pins.<sp/>They<sp/>will<sp/>return</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>to<sp/>the<sp/>default<sp/>configurations<sp/>provided<sp/>in<sp/>PIN_init()</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_close(&amp;hStateHui);</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Application<sp/>use<sp/>of<sp/>GPIO<sp/>##</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>example<sp/>of<sp/>using<sp/>GPIO<sp/>that<sp/>builds<sp/>on<sp/>the<sp/>previous<sp/>example.<sp/>Illustrates<sp/>how</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>read<sp/>input<sp/>values,<sp/>set<sp/>output<sp/>values<sp/>and<sp/>control<sp/>output<sp/>enable</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>void<sp/>huiDoSomething()<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Running<sp/>lights<sp/>on<sp/>LEDs<sp/>A-B-C<sp/>(left<sp/>to<sp/>right).<sp/>Button<sp/>A<sp/>causes<sp/>left</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>movement,<sp/>button<sp/>B<sp/>causes<sp/>right<sp/>movement,<sp/>both<sp/>simultaneously<sp/>aborts</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>disables<sp/>LED<sp/>output<sp/>drivers</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>initial<sp/>state<sp/>(A<sp/>off,<sp/>B<sp/>off,<sp/>C<sp/>on).<sp/>Only<sp/>our<sp/>outputs<sp/>are<sp/>affected</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setPortOutputValue(&amp;hStateHui,<sp/>(1&lt;&lt;HUI_LED_C));</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(moveDir)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>LEDs</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(moveDir&lt;0)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Left<sp/>movement</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_A);</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_C));</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>t);</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Right<sp/>movement</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_C);</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_A));</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>t);</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>333<sp/>ms</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task_sleep(333000/10);</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>input<sp/>from<sp/>both<sp/>buttons<sp/>simultaneously</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buttons<sp/>=<sp/>PIN_getPortInputValue(&amp;hStateHui);</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;((1&lt;&lt;HUI_BUTTON_A)|(1&lt;&lt;HUI_BUTTON_A)))<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>output<sp/>enable<sp/>for<sp/>all<sp/>pins<sp/>(only<sp/>our<sp/>pins<sp/>affected)</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setPortOutputEnable(&amp;hStateHui,<sp/>0);</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Pin<sp/>Interrupt<sp/>##</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/><sp/>An<sp/>example<sp/>that<sp/>handles<sp/>pin<sp/>inputs<sp/>in<sp/>the<sp/>GPIO<sp/>example<sp/>above<sp/>using<sp/>PIN<sp/>interrupts</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/><sp/>instead:</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@code</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>volatile<sp/>variable<sp/>used<sp/>to<sp/>communicate<sp/>between<sp/>callback<sp/>and<sp/>task</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>static<sp/>volatile<sp/>int32_t<sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>//<sp/>Pin<sp/>interrupt<sp/>callback</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>void<sp/>huiPinIntCb(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Ignore<sp/>pinId<sp/>and<sp/>read<sp/>input<sp/>from<sp/>both<sp/>buttons<sp/>simultaneously</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buttons<sp/>=<sp/>PIN_getPortInputValue(&amp;hStateHui);</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;(1&lt;&lt;HUI_BUTTON_A)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(buttons&amp;((1&lt;&lt;HUI_BUTTON_A)|(1&lt;&lt;HUI_BUTTON_A)))<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>void<sp/>huiDoSomething()<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Running<sp/>lights<sp/>on<sp/>LEDs<sp/>A-B-C<sp/>(left<sp/>to<sp/>right).<sp/>Button<sp/>A<sp/>causes<sp/>left</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>movement,<sp/>button<sp/>B<sp/>causes<sp/>right<sp/>movement,<sp/>both<sp/>simultaneously<sp/>aborts</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>disables<sp/>LED<sp/>output<sp/>drivers</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>initial<sp/>state<sp/>(A<sp/>off,<sp/>B<sp/>off,<sp/>C<sp/>on).<sp/>Only<sp/>our<sp/>outputs<sp/>are<sp/>affected</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setPortOutputValue(&amp;hStateHui,<sp/>(1&lt;&lt;HUI_LED_C));</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDir<sp/>=<sp/>-1;<sp/><sp/><sp/><sp/>//<sp/>&lt;0:<sp/>left,<sp/>0:<sp/>stop,<sp/>&gt;0<sp/>right</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Setup<sp/>pin<sp/>interrupts<sp/>and<sp/>register<sp/>callback</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_registerIntCb(&amp;hStateHui,<sp/>huiPinIntCb);</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_IRQ_NEGEDGE);</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_IRQ_NEGEDGE);</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(moveDir)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Update<sp/>LEDs</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(moveDir&lt;0)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Left<sp/>movement</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_A);</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_C));</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>t);</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Right<sp/>movement</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>t<sp/>=<sp/>PIN_getOutputValue(HUI_LED_C);</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_C,<sp/>PIN_getOutputValue(HUI_LED_B));</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_B,<sp/>PIN_getOutputValue(HUI_LED_A));</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setOutputValue(&amp;hStateHui,<sp/>HUI_LED_A,<sp/>t);</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>333<sp/>ms<sp/>(we<sp/>will<sp/>likely<sp/>go<sp/>into<sp/>standby)</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Task_sleep(333000/10);</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>output<sp/>enable<sp/>for<sp/>all<sp/>pins<sp/>(only<sp/>our<sp/>pins<sp/>affected)</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setPortOutputEnable(&amp;hStateHui,<sp/>0);</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>pin<sp/>interrupts</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_A<sp/>|<sp/>PIN_IRQ_DIS);</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_setInterrupt(&amp;hStateHui,<sp/>HUI_BUTTON_B<sp/>|<sp/>PIN_IRQ_DIS);</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*******************************************************************************</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_PIN__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_PIN__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_p_i_n_8h_1a9ae8197f460bb76ea09a84f47d09921f" kindref="member">PIN_Id</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="_p_i_n_8h_1aba219226dfdc9ea2fb82d6a7995395bf" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_UNASSIGNED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_TERMINATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1ae427b7d2925f9b0f3145e455cfdb5841" kindref="member">PIN_Config</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="_p_i_n_8h_1add47c82f7563d28053f76d368d344bc6" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_ID(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)&amp;0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="_p_i_n_8h_1ae1f7e47a17caab9697e69e5b9aff270b" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_GEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)1)<sp/>&lt;&lt;<sp/>31)<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630" refid="_p_i_n_8h_1a3cc36a3cdad818a5261bae5a2657a437" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_INPUT_EN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0<sp/>&lt;&lt;<sp/>29))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631" refid="_p_i_n_8h_1a1c8c8f99cf100a5d8745d879b18bd2b5" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_INPUT_DIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>29))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="632" refid="_p_i_n_8h_1a4113807b8b5acb98a84b26cc1730ad83" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_HYSTERESIS<sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>30))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="633" refid="_p_i_n_8h_1a08ea493b755216db27b51a0402af862e" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_NOPULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0<sp/>&lt;&lt;<sp/>13))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="634" refid="_p_i_n_8h_1a8dd57072ca956a8ace1ee869216dda0a" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_PULLUP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>13))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="635" refid="_p_i_n_8h_1a12b3efd67d32926ca0c310f95396de43" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_PULLDOWN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(2<sp/>&lt;&lt;<sp/>13))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="636" refid="_p_i_n_8h_1aa0ed7bdcf3409fb2e8d2553bfa26ef35" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_INPUT_EN<sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>29)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="637" refid="_p_i_n_8h_1a90670b834483d4047070f5f310998f29" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_HYSTERESIS<sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>30)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="638" refid="_p_i_n_8h_1a4f6a52f4c21a5ae30926e4d595ee9837" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_PULLING<sp/><sp/><sp/><sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>13)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_BM_INPUT_MODE<sp/><sp/><sp/>(PIN_BM_INPUT_EN|PIN_BM_HYSTERESIS|PIN_BM_PULLING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="_p_i_n_8h_1a8728d817e2f0f18c5fccce87e13d3c34" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_GPIO_OUTPUT_DIS<sp/>(PIN_GEN<sp/>|<sp/>(0<sp/>&lt;&lt;<sp/>23))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="644" refid="_p_i_n_8h_1a086fd19a419fb4b09f30ed993a3088c7" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_GPIO_OUTPUT_EN<sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>23))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="645" refid="_p_i_n_8h_1a269b0e2fe279666149ca1c5949bb32ca" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_GPIO_LOW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0<sp/>&lt;&lt;<sp/>22))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646" refid="_p_i_n_8h_1aee8e9896270f36a15df12fb85f2cb4ad" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_GPIO_HIGH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>22))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="647" refid="_p_i_n_8h_1a8b219fa4a7727c4f5a7beb5134144324" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_PUSHPULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0<sp/>&lt;&lt;<sp/>25))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="648" refid="_p_i_n_8h_1a7d238d7776de5cc504dc37d62ac61295" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_OPENDRAIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(2<sp/>&lt;&lt;<sp/>25))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="649" refid="_p_i_n_8h_1a649eb3b178440cda981471c27ff761e5" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_OPENSOURCE<sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(3<sp/>&lt;&lt;<sp/>25))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="650" refid="_p_i_n_8h_1afb6df44a1496358f288b2e90dce81a13" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_SLEWCTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>12))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="651" refid="_p_i_n_8h_1a2a7469e68c23d12b137362dca78a7ae8" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_DRVSTR_MIN<sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x0<sp/>&lt;&lt;<sp/>8))<sp/><sp/></highlight></codeline>
<codeline lineno="652" refid="_p_i_n_8h_1aa0c4f9401637a2170b192d5c69faa33b" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_DRVSTR_MED<sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x4<sp/>&lt;&lt;<sp/>8))<sp/><sp/></highlight></codeline>
<codeline lineno="653" refid="_p_i_n_8h_1a218e028386e01367f6e86a2a69eb464a" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_DRVSTR_MAX<sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x8<sp/>&lt;&lt;<sp/>8))<sp/><sp/></highlight></codeline>
<codeline lineno="654" refid="_p_i_n_8h_1a204ca90eb78a0715cca07c95d6b67e65" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_GPIO_OUTPUT_EN<sp/><sp/>(1<sp/>&lt;&lt;<sp/>23)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655" refid="_p_i_n_8h_1a40f78467926deed6685f0beb39594be8" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_GPIO_OUTPUT_VAL<sp/>(1<sp/>&lt;&lt;<sp/>22)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="656" refid="_p_i_n_8h_1ae8cadb31765041c9025447cf9538e687" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_OUTPUT_BUF<sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>25)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="657" refid="_p_i_n_8h_1ab564685f4cfb90c924db8d7993612c4b" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_SLEWCTRL<sp/><sp/><sp/><sp/><sp/>(0x1<sp/>&lt;&lt;<sp/>12)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="658" refid="_p_i_n_8h_1a743420ef571111b0d87f15c0aebb7834" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_DRVSTR<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xF<sp/>&lt;&lt;<sp/>8)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_BM_OUTPUT_MODE<sp/><sp/>(PIN_BM_GPIO_OUTPUT_VAL<sp/>|<sp/>PIN_BM_GPIO_OUTPUT_EN<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PIN_BM_OUTPUT_BUF<sp/>|<sp/>PIN_BM_SLEWCTRL<sp/>|<sp/>PIN_BM_DRVSTR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="_p_i_n_8h_1a4f9620411ef92f88c3d2d7ac6c576635" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_INV_INOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>24))<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="665" refid="_p_i_n_8h_1a668e9dfc27d1ef17602c3cd62ea8d0e2" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_INV_INOUT<sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>24)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="_p_i_n_8h_1ad9b6d7921f5a8ad9591bed6c432cd6da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_IRQ_DIS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x0<sp/>&lt;&lt;<sp/>16))<sp/></highlight></codeline>
<codeline lineno="668" refid="_p_i_n_8h_1a3ec5fa8d38321d835720fa518dcfde44" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_IRQ_NEGEDGE<sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x5<sp/>&lt;&lt;<sp/>16))<sp/></highlight></codeline>
<codeline lineno="669" refid="_p_i_n_8h_1af4d309f5fad9c05487009326888154d1" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_IRQ_POSEDGE<sp/><sp/><sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x6<sp/>&lt;&lt;<sp/>16))<sp/></highlight></codeline>
<codeline lineno="670" refid="_p_i_n_8h_1aba2bee3661f16506e67c7fd8289ccf8f" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_IRQ_BOTHEDGES<sp/><sp/><sp/>(PIN_GEN<sp/>|<sp/>(0x7<sp/>&lt;&lt;<sp/>16))<sp/></highlight></codeline>
<codeline lineno="671" refid="_p_i_n_8h_1a68cbd2a310fc62c0810754d0894cfeee" refkind="member"><highlight class="preprocessor">#define<sp/>PIN_BM_IRQ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x7<sp/>&lt;&lt;<sp/>16)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_BM_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PIN_BM_INPUT_MODE<sp/>|<sp/>PIN_BM_OUTPUT_MODE<sp/>|<sp/>PIN_BM_INV_INOUT<sp/>|<sp/>PIN_BM_IRQ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State_s</ref><sp/><ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State</ref>;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State</ref><sp/>*<ref refid="_p_i_n_8h_1afb2de52b054638f63c39df1f30a0d88d" kindref="member">PIN_Handle</ref>;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref>)(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="struct_p_i_n___state__s_1acb09d62f6ff8d844fa08f1d4279ee2e1" refkind="member"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State_s</ref><sp/>{</highlight></codeline>
<codeline lineno="709" refid="struct_p_i_n___state__s_1a5749503bdf478c3184576a1978db84d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref><sp/><sp/><sp/><ref refid="struct_p_i_n___state__s_1acb09d62f6ff8d844fa08f1d4279ee2e1" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710" refid="struct_p_i_n___state__s_1a5bc12663e721b3c520bf2f65ef71a973" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><ref refid="struct_p_i_n___state__s_1a5749503bdf478c3184576a1978db84d1" kindref="member">portMask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><sp/><sp/><ref refid="struct_p_i_n___state__s_1a5bc12663e721b3c520bf2f65ef71a973" kindref="member">userArg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>driver-specific<sp/>field<sp/>for<sp/>extensions?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">};</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="716" refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="717" refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a8280bb6c2bd8ef1fc6f9e24d3d8ed864" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a5c9610fffc152c333036f2c2c7ee54e8" kindref="member">PIN_SUCCESS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718" refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a25bb5dfe42957cfd0922fc1ece880453" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a8280bb6c2bd8ef1fc6f9e24d3d8ed864" kindref="member">PIN_ALREADY_ALLOCATED</ref><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="719" refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a7abd102afc68f4c599c11f8f9c79e7ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a25bb5dfe42957cfd0922fc1ece880453" kindref="member">PIN_NO_ACCESS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6a7abd102afc68f4c599c11f8f9c79e7ab" kindref="member">PIN_UNSUPPORTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="721"><highlight class="normal">}<sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a0de1df98a14e6e13b16db414e54472ef" kindref="member">PIN_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PIN_Config<sp/>aPinCfg[]);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PIN_Handle<sp/><ref refid="_p_i_n_8h_1adaf3d21a94dbb7ee74eb2057fdf26103" kindref="member">PIN_open</ref>(<ref refid="struct_p_i_n___state__s" kindref="compound">PIN_State</ref><sp/>*state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PIN_Config<sp/>pinList[]);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1ae96b7cc445336d52f8f6db762ff80156" kindref="member">PIN_add</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Config<sp/>pinCfg);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a7edb10913792e741318ef339d5c7ef13" kindref="member">PIN_remove</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1a877e82b9c5333a122cc408e103feba68" kindref="member">PIN_close</ref>(PIN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1ad7475e9397585a0c81f4420db027a63c" kindref="member">PIN_setUserArg</ref>(PIN_Handle<sp/>handle,<sp/>uintptr_t<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle)<sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle-&gt;<ref refid="struct_p_i_n___state__s_1a5bc12663e721b3c520bf2f65ef71a973" kindref="member">userArg</ref><sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="_p_i_n_8h_1a6b90dabb1bb35348050d8fce03c046d9" kindref="member">PIN_getUserArg</ref>(PIN_Handle<sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle-&gt;<ref refid="struct_p_i_n___state__s_1a5bc12663e721b3c520bf2f65ef71a973" kindref="member">userArg</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1a5345b3e89e7c16c350b6098d4e29969a" kindref="member">PIN_getInputValue</ref>(PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1ab3c10de54bf7cc948b00f1606102b12d" kindref="member">PIN_setOutputEnable</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>outputEnable);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a36a6b18d90019d94afe1184760c370ee" kindref="member">PIN_setOutputValue</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId,<sp/>uint32_t<sp/>val);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1a084deb9d240e7878854ead1989c7a4de" kindref="member">PIN_getOutputValue</ref>(PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a69e2aac02eaabf8d3c3a248a27dd7d0e" kindref="member">PIN_setInterrupt</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Config<sp/>pinCfg);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a82957789e7c370b6dd4f16fa36045522" kindref="member">PIN_clrPendInterrupt</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a6dc645c7372f7b1c13da1facc9cabff0" kindref="member">PIN_registerIntCb</ref>(PIN_Handle<sp/>handle,<sp/><ref refid="_p_i_n_8h_1a289cbfdcb1e23ade7c3b0f5fc3b2d695" kindref="member">PIN_IntCb</ref><sp/><ref refid="struct_p_i_n___state__s_1acb09d62f6ff8d844fa08f1d4279ee2e1" kindref="member">callbackFxn</ref>);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PIN_Config<sp/><ref refid="_p_i_n_8h_1aed24cb96de8fa957e9f7c05dd239f2f9" kindref="member">PIN_getConfig</ref>(PIN_Id<sp/>pinId);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1af67a96b69bd1b7a9fdbbe62e29ed9965" kindref="member">PIN_setConfig</ref>(PIN_Handle<sp/>handle,<sp/>PIN_Config<sp/>updateMask,<sp/>PIN_Config<sp/>pinCfg);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1ac709a20172ab5fcc869dcfb63ceadfb4" kindref="member">PIN_getPortMask</ref>(PIN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1a9c75d355f0a19441cb55caea4b1961d2" kindref="member">PIN_getPortInputValue</ref>(PIN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="_p_i_n_8h_1af41c048cdb42ceb5871207deeaeb3d07" kindref="member">PIN_getPortOutputValue</ref>(PIN_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1ac891b6a5d2bd115b79f4121d3eb127cb" kindref="member">PIN_setPortOutputValue</ref>(PIN_Handle<sp/>handle,<sp/>uint32_t<sp/>outputValueMask);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="_p_i_n_8h_1abe0ad59bbf09e51fe37195a5e70b23f6" kindref="member">PIN_Status</ref><sp/><ref refid="_p_i_n_8h_1a2c16e2a9a0cc5c8c5df73c610feb657b" kindref="member">PIN_setPortOutputEnable</ref>(PIN_Handle<sp/>handle,<sp/>uint32_t<sp/>outputEnableMask);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_PIN__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/PIN.h"/>
  </compounddef>
</doxygen>
