<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_i2_s_8h" kind="file" language="C++">
    <compoundname>I2S.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_list_8h" local="no">ti/drivers/utils/List.h</includes>
    <includedby refid="_i2_s_c_c26_x_x_8h" local="no">I2SCC26XX.h</includedby>
    <incdepgraph>
      <node id="414">
        <label>stdbool.h</label>
      </node>
      <node id="415">
        <label>stdint.h</label>
      </node>
      <node id="412">
        <label>I2S.h</label>
        <link refid="_i2_s_8h"/>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
      </node>
      <node id="413">
        <label>stddef.h</label>
      </node>
      <node id="416">
        <label>ti/drivers/utils/List.h</label>
        <link refid="_list_8h"/>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="417">
        <label>I2S.h</label>
        <link refid="_i2_s_8h"/>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="418">
        <label>I2SCC26XX.h</label>
        <link refid="_i2_s_c_c26_x_x_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_i2_s___transaction__" prot="public">I2S_Transaction_</innerclass>
    <innerclass refid="struct_i2_s___params__" prot="public">I2S_Params_</innerclass>
    <innerclass refid="struct_i2_s___config__" prot="public">I2S_Config_</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1gab6513a393fed75b7c1b507d5ec9047fc" prot="public" static="no">
        <name>I2S_ALL_TRANSACTIONS_SUCCESS</name>
        <initializer>(0x0001U)</initializer>
        <briefdescription>
<para>Successful status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_ALL_TRANSACTION_SUCCESS if ALL the queued transactions were executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="585" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1gac8265d03e72406770257a834e377247b" prot="public" static="no">
        <name>I2S_TRANSACTION_SUCCESS</name>
        <initializer>(0x0002U)</initializer>
        <briefdescription>
<para>Successful status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_TRANSACTION_SUCCESS if ONE queued transaction was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="593" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1ga815abf87dfe4353e42bea24940f45d75" prot="public" static="no">
        <name>I2S_TIMEOUT_ERROR</name>
        <initializer>(0x0100U)</initializer>
        <briefdescription>
<para>Error status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_TIMEOUT_ERROR if I2S module lost the audio clock. If this error has been raised, I2S module must be reseted and restarted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="601" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1gaeff50b687883296e143e5da70102a915" prot="public" static="no">
        <name>I2S_BUS_ERROR</name>
        <initializer>(0x0200U)</initializer>
        <briefdescription>
<para>Error status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_BUS_ERROR if I2S module faced problem with the DMA bus (DMA transfer not completed in time). If this error has been raised, I2S module must be reseted and restarted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="610" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1gab9cb86b261eb8a0abcfc19091f46385a" prot="public" static="no">
        <name>I2S_WS_ERROR</name>
        <initializer>(0x0400U)</initializer>
        <briefdescription>
<para>Error status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_WS_ERROR if I2S module detect noise on the WS signal. If this error has been raised, I2S module must be reseted and restarted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="618" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1ga50be1b2cc5cef182aff769f626eb6e2f" prot="public" static="no">
        <name>I2S_PTR_READ_ERROR</name>
        <initializer>(0x0800U)</initializer>
        <briefdescription>
<para>Error status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_PTR_READ_ERROR if I2S module ran out of data on the read interface (DMA pointer not loaded in time). If this error has been raised, I2S module must be reseted and restarted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="627" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_s___s_t_a_t_u_s_1gacb0dde45fe8df930d9914a100fbfcef8" prot="public" static="no">
        <name>I2S_PTR_WRITE_ERROR</name>
        <initializer>(0x1000U)</initializer>
        <briefdescription>
<para>Error status code returned by I2S driver functions. </para>        </briefdescription>
        <detaileddescription>
<para>I2S driver functions return I2S_PTR_WRITE_ERROR if I2S module ran out of data on the write interface (DMA pointer not loaded in time). If this error has been raised, I2S module must be reseted and restarted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="636" column="10" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afa" prot="public" static="no">
        <name>I2S_MemoryLength_</name>
        <enumvalue id="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa13e1dbc37a214b697892127dd14b39ec" prot="public">
          <name>I2S_MEMORY_LENGTH_8BITS</name>
          <initializer>=  8U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer used is 8 bits length. Not available for CC26XX. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaaa95b67ba7278bcb1d9a64cba9a8e1bc8" prot="public">
          <name>I2S_MEMORY_LENGTH_16BITS</name>
          <initializer>= 16U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer used is 16 bits length. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaacc56087b412f11af3dc890f066fac0b6" prot="public">
          <name>I2S_MEMORY_LENGTH_24BITS</name>
          <initializer>= 24U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer used is 24 bits length. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa926727054bff1f3cbe2540434d0fab42" prot="public">
          <name>I2S_MEMORY_LENGTH_32BITS</name>
          <initializer>= 32U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer used is 32 bits length. Not available for CC26XX. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2S slot memory length setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the module uses a 16 bits or a 24 bits buffer in memory. This value has no influence on the number of bit transmitted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="703" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="703" bodyend="710"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476" prot="public" static="no">
        <name>I2S_Role_</name>
        <enumvalue id="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a2e9b49c09201c26bec35c9b854b09e08" prot="public">
          <name>I2S_SLAVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module is a slave, clocks are externally generated. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a10b52b2d09a9f58e2daeec0f5a392bea" prot="public">
          <name>I2S_MASTER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module is a master, clocks are internally generated. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2S master / slave selection. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the module acts like a master (clocks are internally generated) or a slave (the clocks are externally generated). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="718" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="718" bodyend="723"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_s_8h_1a64f399624d5e416237ab019457b571cd" prot="public" static="no">
        <name>I2S_SamplingEdge_</name>
        <enumvalue id="_i2_s_8h_1a64f399624d5e416237ab019457b571cdac2b123abf8d93dc779178fd3ede764eb" prot="public">
          <name>I2S_SAMPLING_EDGE_FALLING</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling on falling edges. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a64f399624d5e416237ab019457b571cda54900e14a06cfb9a08de7b1ed2583491" prot="public">
          <name>I2S_SAMPLING_EDGE_RISING</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling on rising edges. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2S sampling setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if sampling is done on BLCK rising or falling edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="730" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="730" bodyend="735"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3" prot="public" static="no">
        <name>I2S_PhaseType_</name>
        <enumvalue id="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3abe139271fd1177a8b3e81156a966695d" prot="public">
          <name>I2S_PHASE_TYPE_SINGLE</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single phase </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3a0b3e4c2e6cca0317d05ec75b872b34de" prot="public">
          <name>I2S_PHASE_TYPE_DUAL</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dual phase </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2S phase setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the I2S if set with single or dual phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="742" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="742" bodyend="747"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875" prot="public" static="no">
        <name>I2S_DataInterfaceUse_</name>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aa745a9c11f2a2d74d1c6d001a32b355b" prot="public">
          <name>I2S_SD0_DISABLED</name>
          <initializer>= 0x00U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD0 is disabled </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ae0e5e7026b88277c279de0e798488e77" prot="public">
          <name>I2S_SD0_INPUT</name>
          <initializer>= 0x01U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD0 is an input </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ab32df02fc78f8a4eabe6efa84fe3b28e" prot="public">
          <name>I2S_SD0_OUTPUT</name>
          <initializer>= 0x02U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD0 is an output </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aac2fb5fe175b0b96da5c7ea069ae48b6" prot="public">
          <name>I2S_SD1_DISABLED</name>
          <initializer>= 0x00U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD1 is disabled </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875abc860688d07b2022d075448f597d7811" prot="public">
          <name>I2S_SD1_INPUT</name>
          <initializer>= 0x10U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD1 is an input </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875a966016f222e7831b399aac26e4b8c7f0" prot="public">
          <name>I2S_SD1_OUTPUT</name>
          <initializer>= 0x20U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SD1 is an output </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>I2S data interface configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines the different settings for the data interfaces (SD0 and SD1). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="754" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="754" bodyend="763"/>
      </memberdef>
      <memberdef kind="enum" id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6" prot="public" static="no">
        <name>I2S_ChannelConfig_</name>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6af29054f891314a79ee5d2b105678fce5" prot="public">
          <name>I2S_CHANNELS_NONE</name>
          <initializer>= 0x00U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No channel activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a9ae976eea3f03628bac96b3bd5b590a9" prot="public">
          <name>I2S_CHANNELS_MONO</name>
          <initializer>= 0x01U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MONO: only channel one is activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6ace24478308aa18581ea899b4749e1eee" prot="public">
          <name>I2S_CHANNELS_MONO_INV</name>
          <initializer>= 0x02U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MONO INVERERTED: only channel two is activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aa99f621d20e7c434dd8fc6eec81f88f7" prot="public">
          <name>I2S_CHANNELS_STEREO</name>
          <initializer>= 0x03U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>STEREO: channels one and two are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aef21e0755c603bfa84cfcfb76087a2f9" prot="public">
          <name>I2S_1_CHANNEL</name>
          <initializer>= 0x01U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 channel is activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a70296e535a023f5e486d169c56241938" prot="public">
          <name>I2S_2_CHANNELS</name>
          <initializer>= 0x03U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6acde532a4455d55712113984d1d9d14ee" prot="public">
          <name>I2S_3_CHANNELS</name>
          <initializer>= 0x07U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>3 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4de908d16fbc3997ca26f9daf0a1ab15" prot="public">
          <name>I2S_4_CHANNELS</name>
          <initializer>= 0x0FU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4dbc52ac6e50657e77ab1a5663c9bebb" prot="public">
          <name>I2S_5_CHANNELS</name>
          <initializer>= 0x1FU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>5 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a6393bde043d2d9a820d0eaae3723390f" prot="public">
          <name>I2S_6_CHANNELS</name>
          <initializer>= 0x3FU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>6 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a3d28c1be7347c31842f949fce1b5c245" prot="public">
          <name>I2S_7_CHANNELS</name>
          <initializer>= 0x7FU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>7 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a7f1bd716ad44f22c8b359102c206c0fb" prot="public">
          <name>I2S_8_CHANNELS</name>
          <initializer>= 0xFFU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8 channels are activated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a93050a292e0f863d146fc2bb6461505b" prot="public">
          <name>I2S_CHANNELS_ALL</name>
          <initializer>= 0xFFU</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>All the eight channels are activated </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Channels used selection. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines different settings to activate the expected channels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="770" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="770" bodyend="786"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" prot="public" static="no">
        <type>struct <ref refid="struct_i2_s___config__" kindref="compound">I2S_Config_</ref> *</type>
        <definition>typedef struct I2S_Config_* I2S_Handle</definition>
        <argsstring></argsstring>
        <name>I2S_Handle</name>
        <briefdescription>
<para>A handle that is returned from a <ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="642" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" prot="public" static="no">
        <type>struct <ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction_</ref></type>
        <definition>typedef struct I2S_Transaction_  I2S_Transaction</definition>
        <argsstring></argsstring>
        <name>I2S_Transaction</name>
        <briefdescription>
<para>I2S transaction descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="662" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2S_Callback) (I2S_Handle handle, int_fast16_t status, I2S_Transaction *transactionPtr)</definition>
        <argsstring>)(I2S_Handle handle, int_fast16_t status, I2S_Transaction *transactionPtr)</argsstring>
        <name>I2S_Callback</name>
        <briefdescription>
<para>The definition of a user-callback function used by the I2S driver. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2S_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2S_Handle</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>Status of the operation (possible values are : :I2S_STATUS_SUCCESS, :I2S_STATUS_ERROR, :I2S_STATUS_BUFFER_UNAVAILABLE, :I2S_STATUS_TIMEOUT)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2S_Transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>*transactionPtr: Pointer on the transaction that has just started. For error callbacks, transactionPtr points on NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="677" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a7ce338dedc6f90e9b86705ad6a2e3eea" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2S_RegUpdate) (uint32_t ui32Base, uint32_t ui32NextPointer)</definition>
        <argsstring>)(uint32_t ui32Base, uint32_t ui32NextPointer)</argsstring>
        <name>I2S_RegUpdate</name>
        <briefdescription>
<para>The definition of a function used to set the I2S register. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uint32_t</parametername>
</parameternamelist>
<parameterdescription>
<para>ui32Base: base address of the I2S module.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uint32_t</parametername>
</parameternamelist>
<parameterdescription>
<para>ui32NextPointer: pointer on an I2S buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="687" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a518f25dc99f76453c3ef7bfdb7fc390c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* I2S_StopInterface) (I2S_Handle handle)</definition>
        <argsstring>)(I2S_Handle handle)</argsstring>
        <name>I2S_StopInterface</name>
        <briefdescription>
<para>The definition of a function used to stop an I2S interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2S_Handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2S_Handle </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="695" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1af17772fe96b97eabab3169d1071d8522" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afa" kindref="member">I2S_MemoryLength_</ref></type>
        <definition>typedef enum I2S_MemoryLength_  I2S_MemoryLength</definition>
        <argsstring></argsstring>
        <name>I2S_MemoryLength</name>
        <briefdescription>
<para>I2S slot memory length setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the module uses a 16 bits or a 24 bits buffer in memory. This value has no influence on the number of bit transmitted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="710" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a5c8ca73490b1543e9208bf11966810f0" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476" kindref="member">I2S_Role_</ref></type>
        <definition>typedef enum I2S_Role_  I2S_Role</definition>
        <argsstring></argsstring>
        <name>I2S_Role</name>
        <briefdescription>
<para>I2S master / slave selection. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the module acts like a master (clocks are internally generated) or a slave (the clocks are externally generated). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1aba10d78101dca20c71689a3bcd72a9df" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cd" kindref="member">I2S_SamplingEdge_</ref></type>
        <definition>typedef enum I2S_SamplingEdge_  I2S_SamplingEdge</definition>
        <argsstring></argsstring>
        <name>I2S_SamplingEdge</name>
        <briefdescription>
<para>I2S sampling setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if sampling is done on BLCK rising or falling edges. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="735" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a10c301d1d8adaa75e85bc5e19a510aad" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3" kindref="member">I2S_PhaseType_</ref></type>
        <definition>typedef enum I2S_PhaseType_  I2S_PhaseType</definition>
        <argsstring></argsstring>
        <name>I2S_PhaseType</name>
        <briefdescription>
<para>I2S phase setting. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines if the I2S if set with single or dual phase. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a683a626a98ae8a61b0c77b5ed811b0ad" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875" kindref="member">I2S_DataInterfaceUse_</ref></type>
        <definition>typedef enum I2S_DataInterfaceUse_  I2S_DataInterfaceUse</definition>
        <argsstring></argsstring>
        <name>I2S_DataInterfaceUse</name>
        <briefdescription>
<para>I2S data interface configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines the different settings for the data interfaces (SD0 and SD1). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="763" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a9a445124b8fe8062ccf8749106dd7df5" prot="public" static="no">
        <type>enum <ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6" kindref="member">I2S_ChannelConfig_</ref></type>
        <definition>typedef enum I2S_ChannelConfig_  I2S_ChannelConfig</definition>
        <argsstring></argsstring>
        <name>I2S_ChannelConfig</name>
        <briefdescription>
<para>Channels used selection. </para>        </briefdescription>
        <detaileddescription>
<para>The enum defines different settings to activate the expected channels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="786" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a7f4e84de95edef54fd2415eaa3f62022" prot="public" static="no">
        <type>struct <ref refid="struct_i2_s___params__" kindref="compound">I2S_Params_</ref></type>
        <definition>typedef struct I2S_Params_  I2S_Params</definition>
        <argsstring></argsstring>
        <name>I2S_Params</name>
        <briefdescription>
<para>Basic I2S Parameters. </para>        </briefdescription>
        <detaileddescription>
<para>I2S parameters are used to with the <ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> call. Default values for these parameters are set using <ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref>.</para><para><simplesect kind="see"><para><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="940" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_i2_s_8h_1a519615f3b1ef24ac6c1f952539dbf6d4" prot="public" static="no">
        <type>struct <ref refid="struct_i2_s___config__" kindref="compound">I2S_Config_</ref></type>
        <definition>typedef struct I2S_Config_  I2S_Config</definition>
        <argsstring></argsstring>
        <name>I2S_Config</name>
        <briefdescription>
<para>I2S Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The I2S_Config structure contains a set of pointers used to characterize the I2S driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" kindref="member">I2S_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" kindref="member">I2S_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="965" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_i2_s_8h_1a3854e487af0042986ad755b9517ff24c" prot="public" static="no" mutable="no">
        <type>const <ref refid="_i2_s_8h_1a7f4e84de95edef54fd2415eaa3f62022" kindref="member">I2S_Params</ref></type>
        <definition>const I2S_Params I2S_defaultParams</definition>
        <argsstring></argsstring>
        <name>I2S_defaultParams</name>
        <briefdescription>
<para>Default I2S_Params structure. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="947" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_i2_s_8h_1a111a6b44f868cf90f7b25ced9f22ae1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_close</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_close</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close a given I2S peripheral specified by the I2S handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> had to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle returned from I2S_open</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_init</definition>
        <argsstring>(void)</argsstring>
        <name>I2S_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to initializes the I2S module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The I2S_config structure must exist and be persistent before this function can be called. This function must also be called before any other I2S driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
        <definition>I2S_Handle I2S_open</definition>
        <argsstring>(uint_least8_t index, I2S_Params *params)</argsstring>
        <name>I2S_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="_i2_s_8h_1a7f4e84de95edef54fd2415eaa3f62022" kindref="member">I2S_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize a given I2S peripheral specified by the particular index value. The parameter specifies which mode the I2S will operate. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>I2S controller has been initialized</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the I2S indexed into the I2S_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block. All the fields in this structure are RO (read-only). Provide a NULL pointer cannot open the module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An I2S_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" kindref="member">I2S_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a111a6b44f868cf90f7b25ced9f22ae1b" kindref="member">I2S_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_Params_init</definition>
        <argsstring>(I2S_Params *params)</argsstring>
        <name>I2S_Params_init</name>
        <param>
          <type><ref refid="_i2_s_8h_1a7f4e84de95edef54fd2415eaa3f62022" kindref="member">I2S_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the I2S_Params struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to I2S_Params structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: <programlisting><codeline><highlight class="normal">params.samplingFrequency<sp/><sp/><sp/><sp/>=<sp/>8000;</highlight></codeline>
<codeline><highlight class="normal">params.isMemory24Bits<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_MEMORY_LENGTH_16BITS;</highlight></codeline>
<codeline><highlight class="normal">params.isMaster<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_MASTER;</highlight></codeline>
<codeline><highlight class="normal">params.trueI2sFormat<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal">params.invertWS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal">params.isMSBFirst<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal">params.isDMAUnused<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline><highlight class="normal">params.samplingEdge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_SAMPLING_EDGE_RISING;</highlight></codeline>
<codeline><highlight class="normal">params.beforeWordPadding<sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">params.bitsPerWord<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>16;</highlight></codeline>
<codeline><highlight class="normal">params.afterWordPadding<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">params.fixedBufferLength<sp/><sp/><sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">params.SD0Use<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_SD0_OUTPUT;</highlight></codeline>
<codeline><highlight class="normal">params.SD1Use<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_SD1_INPUT;</highlight></codeline>
<codeline><highlight class="normal">params.SD0Channels<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_CHANNELS_STEREO;</highlight></codeline>
<codeline><highlight class="normal">params.SD1Channels<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_CHANNELS_STEREO;</highlight></codeline>
<codeline><highlight class="normal">params.phaseType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>I2S_PHASE_TYPE_DUAL;</highlight></codeline>
<codeline><highlight class="normal">params.startUpDelay<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">params.MCLKDivider<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>40;</highlight></codeline>
<codeline><highlight class="normal">params.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">params.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">params.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">params.custom<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameter structure to initialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1046" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a6f45de7e62ff3b345dbd22a1e317e8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_Transaction_init</definition>
        <argsstring>(I2S_Transaction *transaction)</argsstring>
        <name>I2S_Transaction_init</name>
        <param>
          <type><ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Initialize an I2S_Transaction struct to known state. </para>        </briefdescription>
        <detaileddescription>
<para>The I2S_Transaction struct is put in a known state. The application is still responsible for populating some of the fields. For example, the user is responsible to provide the buffer containing the data and the size of it. User provided buffer&apos;s size must matche with the I2S settings. If the buffer size is not adapted, the I2S module will truncate it. Authorized buffer sizes depend on the number of activated outputs, the number of channels activated, the memory slots length (16 or 24 bits), and the fixed-buffer-size eventually provided. Authorized buffer sizes are all the multiple values of the value of handle-&gt;object-&gt;memoryStepOut.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Transaction struct to initialize. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1065" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_setReadQueueHead</definition>
        <argsstring>(I2S_Handle handle, I2S_Transaction *transaction)</argsstring>
        <name>I2S_setReadQueueHead</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Function to set the first read-transaction to consider. </para>        </briefdescription>
        <detaileddescription>
<para>At the end of each transaction, I2S driver takes in consideration the next transaction. Application is responsible to handle the queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an I2S_Transaction object. The bufPtr and bufSize fields must be set to a buffer and the size of the buffer before passing to this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_setWriteQueueHead</definition>
        <argsstring>(I2S_Handle handle, I2S_Transaction *transaction)</argsstring>
        <name>I2S_setWriteQueueHead</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref> *</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Function to set the first write-transaction to consider. </para>        </briefdescription>
        <detaileddescription>
<para>At the end of each transaction, I2S driver takes in consideration the next transaction. Application is responsible to handle the queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to an I2S_Transaction object. The bufPtr and bufSize fields must be set to a buffer and the size of the buffer before passing to this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_startClocks</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_startClocks</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Start the WS, SCK and MCLK clocks. </para>        </briefdescription>
        <detaileddescription>
<para>This function enable WS, SCK and MCLK (if activated) clocks. This is required before starting any reading or a writing transaction. This function is supposed to be executed both in slave and master mode.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a3c929c2811ba58180ef57abbb33d3ec5" kindref="member">I2S_stopClocks()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a3c929c2811ba58180ef57abbb33d3ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_stopClocks</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_stopClocks</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Stops the WS, SCK and MCLK clocks. </para>        </briefdescription>
        <detaileddescription>
<para>This function disable WS, SCK and MCLK clocks. This function must be executed only if no transaction is in progress. This function is supposed to be executed in a Task context (NOT in a HWI or Callback context). This function is supposed to be executed both in slave and master mode.</para><para><simplesect kind="warning"><para>This function is supposed to be executed in a Task context (NOT in a HWI or Callback context).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a4631dbd7e6b7480a95c976d03aa69e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_startRead</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_startRead</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Start read transactions. </para>        </briefdescription>
        <detaileddescription>
<para>This function starts reception of the transactions stored in the read-queue. and returns immediately. At the completion of each transaction the readCallback provided is executed.</para><para>If the queue for read transactions becomes empty (i.e. the read Callback is triggered with status <ref refid="group___i2_s___s_t_a_t_u_s_1gab6513a393fed75b7c1b507d5ec9047fc" kindref="member">I2S_ALL_TRANSACTIONS_SUCCESS</ref> and the application has not queued new transactions or defined a new first read-transaction to consider using <ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref>), the driver will stop the read interface on its own in order to avoid the occurrence of errors (such as <ref refid="group___i2_s___s_t_a_t_u_s_1ga50be1b2cc5cef182aff769f626eb6e2f" kindref="member">I2S_PTR_READ_ERROR</ref>).</para><para><simplesect kind="pre"><para>First read-transaction to consider must be set and clocks must be running before calling this function.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" kindref="member">I2S_startClocks()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a77a9ed563af3d038541d14f14901ab30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_startWrite</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_startWrite</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Start write transactions. </para>        </briefdescription>
        <detaileddescription>
<para>This function starts transmission of the transactions stored in the write-queue and returns immediately. At the completion of each transaction the write Callback provided is executed.</para><para>If the queue for write transactions becomes empty (i.e. the write Callback is triggered with status <ref refid="group___i2_s___s_t_a_t_u_s_1gab6513a393fed75b7c1b507d5ec9047fc" kindref="member">I2S_ALL_TRANSACTIONS_SUCCESS</ref> and the application has not queued new transactions or defined a new first write-transaction to consider using <ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead()</ref>), the driver will stop the write interface on its own in order to avoid the occurrence of errors (such as <ref refid="group___i2_s___s_t_a_t_u_s_1gacb0dde45fe8df930d9914a100fbfcef8" kindref="member">I2S_PTR_WRITE_ERROR</ref>).</para><para><simplesect kind="pre"><para>First write-transaction to consider must be set and clocks must be running before calling this function.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" kindref="member">I2S_startClocks()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_stopRead</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_stopRead</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Stop read transactions. </para>        </briefdescription>
        <detaileddescription>
<para>This function stops the reception of read transactions correctly so that read operations can be safely restarted later.</para><para>The application can decide at any time to suspend the reception of data by calling this function. In this case (and because the transaction queue is not empty) the execution of <ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref> is blocked until the current transaction is completed (this ensures that the I2S read interface is correctly stopped). Therefore, this function must be executed in a Task context (not in a HWI or Callback context).</para><para>After the transfers have been stopped (either by calling <ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref> or because the queue has been empty), the application can resume the transfers using the function <ref refid="_i2_s_8h_1a4631dbd7e6b7480a95c976d03aa69e0f" kindref="member">I2S_startRead()</ref>. If the read-queue was empty application must beforehand set the first read-transaction using <ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_stopWrite</definition>
        <argsstring>(I2S_Handle handle)</argsstring>
        <name>I2S_stopWrite</name>
        <param>
          <type><ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Stop write transactions. </para>        </briefdescription>
        <detaileddescription>
<para>This function stops the transmission of write transactions correctly so that writing operations can be safely restarted later.</para><para>The application can decide at any time to suspend the sending of data by calling this function. In this case (and because the transaction queue is not empty) the execution of <ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite()</ref> is blocked until the current transaction is completed (this ensures that the I2S write interface is correctly stopped). Therefore, this function must be executed in a Task context (not in a HWI or Callback context).</para><para>After the transfers have been stopped (either by calling <ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite()</ref> or because the queue has been empty), the application can resume the transfers using the function <ref refid="_i2_s_8h_1a77a9ed563af3d038541d14f14901ab30" kindref="member">I2S_startWrite()</ref>. If the write-queue was empty application must beforehand set the first write-transaction using <ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An I2S_Handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h" line="1232" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Inter-Integrated Circuit Sound (I2S) Bus Driver. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>The I2S header file should be included in an application as follows: <programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/I2S.h&gt;</highlight></codeline>
</programlisting></para><para><anchor id="_i2_s_8h_1ti_drivers_I2S_Overview"/><heading level="1">Overview</heading>
</para><para>The I2S driver facilitates the use of Inter-IC Sound (I2S), which is used to connect digital audio devices so that audio signals can be communicated between devices. The I2S driver simplifies reading and writing to any of the Multichannel Audio Serial Port (McASP) peripherals on the board with Receive and Transmit support. These include read and write characters on the McASP peripheral.</para><para>I2S interfaces typically consist of 4 or 5 signals. The 5th signal is not systematically used. <itemizedlist>
<listitem><para><bold>Serial Clock (SCK)</bold> also called Bit Clock (BCLK) or Multichannel Audio Frame Synchronization (McAFSX) </para></listitem>
<listitem><para><bold>Word Select (WS)</bold> also called Word Clock (WCLK), Left Right Clock (LRCLK) or Multichannel Audio Clock (McACLK) </para></listitem>
<listitem><para><bold>Serial Data (SD0)</bold> also called AD0, AD1, McAXR0, or possibly SDI </para></listitem>
<listitem><para><bold>Serial Data (SD1)</bold> also called AD1, ADI, McAXR1, or possibly SDI </para></listitem>
<listitem><para><bold>Master Clock (MCLK)</bold></para></listitem>
</itemizedlist>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Usage"/><heading level="1">Usage</heading>
</para><para><bold>The I2S driver provides the following APIs:</bold> <itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" kindref="member">I2S_init()</ref>: Function to initializes the I2S module. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open()</ref>: Function to initialize a given I2S peripheral specified by the particular index value. The parameter specifies which mode the I2S will operate. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init()</ref>: Function to initialize the I2S_Params struct to its defaults. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a6f45de7e62ff3b345dbd22a1e317e8b0" kindref="member">I2S_Transaction_init()</ref>: Initialize an I2S_Transaction struct to known state. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref>: Function to set the first read-transaction to consider. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" kindref="member">I2S_startClocks()</ref>: Start the WS, SCK and MCLK clocks. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a4631dbd7e6b7480a95c976d03aa69e0f" kindref="member">I2S_startRead()</ref>: Start read transactions. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref>: Stop read transactions. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a3c929c2811ba58180ef57abbb33d3ec5" kindref="member">I2S_stopClocks()</ref>: Stops the WS, SCK and MCLK clocks. </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a111a6b44f868cf90f7b25ced9f22ae1b" kindref="member">I2S_close()</ref>: Function to close a given I2S peripheral specified by the I2S handle.</para></listitem>
</itemizedlist>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Driver_Transactions"/><heading level="3">Transactions</heading>
</para><para>Data transfers are achieved through <ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref> structures. Application is responsible to maintain the transactions queues. The I2S driver completes the transactions one by one. When a transaction is over, the I2S driver takes in consideration the next transaction (if the next transaction is NULL, the I2S drivers signals this to the user). The I2S driver relies on the following fields of the <ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref> to complete it:<itemizedlist>
<listitem><para>the buffer</para></listitem><listitem><para>the length of the buffer</para></listitem><listitem><para>a pointer on the next transaction to achieve (kept in a <ref refid="struct_list___elem" kindref="compound">List_Elem</ref> structure)</para></listitem></itemizedlist>
The I2S driver provides the following elements (fields of the <ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref>):<itemizedlist>
<listitem><para>the number of untransferred bytes: the driver is designed to avoid memory corruption and will not complete an incomplete transaction (meaning a transaction where the buffer size would not permit to send or receive a whole number of samples). In this case, the system considers the samples of the beginning of the buffer and read/write as much as possible samples and ignore the end of the buffer. The number of untransafered bytes is the number of bytes left at the end of the buffer)</para></listitem><listitem><para>the number of completions of the transaction. This value is basically incremented by one every time the transaction is completed.</para></listitem></itemizedlist>
Please note that these two fields are valid only when the transaction has been completed. Consult examples to get more details on the transaction usage.</para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Driver_ProvidingData"/><heading level="3">Providing data to the I2S driver</heading>
</para><para>Application is responsible to handle the queues of transactions. Application is also responsible to provide to the driver a pointer on the first transaction to consider (considering that all the following transactions are correctly queued). <ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead()</ref> and <ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead()</ref> allow the user to set the first transaction to consider. These functions should be used only when no transaction is running on the considered interface.</para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Driver_StartStopClocks"/><heading level="3">Start and stop clocks and transactions</heading>
</para><para>Clocks can be started and stopped by the application. Read and write can be started and stopped independently. To start a transfer, clocks must be running. To stop the clocks no transfer must be running. Refer to the following functions for more details: <itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" kindref="member">I2S_startClocks()</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a4631dbd7e6b7480a95c976d03aa69e0f" kindref="member">I2S_startRead()</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a77a9ed563af3d038541d14f14901ab30" kindref="member">I2S_startWrite()</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite()</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1a3c929c2811ba58180ef57abbb33d3ec5" kindref="member">I2S_stopClocks()</ref></para></listitem>
</itemizedlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>In <ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a2e9b49c09201c26bec35c9b854b09e08" kindref="member">I2S_SLAVE</ref> mode, clocks must be started and stopped exactly like it is done in <ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a10b52b2d09a9f58e2daeec0f5a392bea" kindref="member">I2S_MASTER</ref> mode. </para></listitem>
<listitem><para>If the queue of transaction is not empty, the calls to <ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead()</ref> and <ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite()</ref> are blocking and potentially long.</para></listitem>
</itemizedlist>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Examples"/><heading level="2">Examples</heading>
</para></simplesect>
</para><para><itemizedlist>
<listitem><para><ref refid="_i2_s_8h_1ti_drivers_I2S_Example_PlayAndStop" kindref="member">Play and Stop</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1ti_drivers_I2S_Example_Streaming" kindref="member">Streaming</ref> </para></listitem>
<listitem><para><ref refid="_i2_s_8h_1ti_drivers_I2S_Example_RepeatMode" kindref="member">Repeat</ref></para></listitem>
</itemizedlist>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_PlayAndStop"/><heading level="3">Mode Play and Stop</heading>
</para><para>The following example shows how to simultaneously receive and send out a given amount of data.</para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_PlayAndStop_Code"/><programlisting><codeline><highlight class="normal">static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf1[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf2[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf3[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf1[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf2[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf3[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead1;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead2;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead3;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite1;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite2;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite3;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sReadList;</highlight></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>volatile<sp/>bool<sp/>readStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>volatile<sp/>bool<sp/>writeStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(status<sp/>&amp;<sp/>I2S_ALL_TRANSACTIONS_SUCCESS){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>Here<sp/>we<sp/>do<sp/>not<sp/>queue<sp/>new<sp/>transfers<sp/>or<sp/>set<sp/>a<sp/>new<sp/>queue-head.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>driver<sp/>will<sp/>stop<sp/>sending<sp/>out<sp/>data<sp/>on<sp/>its<sp/>own.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(status<sp/>&amp;<sp/>I2S_ALL_TRANSACTIONS_SUCCESS){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>Here<sp/>we<sp/>do<sp/>not<sp/>queue<sp/>new<sp/>transfers<sp/>or<sp/>set<sp/>a<sp/>new<sp/>queue-head.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>driver<sp/>will<sp/>stop<sp/>receiving<sp/>data<sp/>on<sp/>its<sp/>own.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>*modePlayAndStopThread(void<sp/>*arg0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>500;<sp/>//<sp/>fixedBufferLength<sp/>is<sp/>the<sp/>greatest<sp/>common</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>divisor<sp/>of<sp/>all<sp/>the<sp/>different<sp/>buffers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(here<sp/>buffers&apos;<sp/>size<sp/>are<sp/>500<sp/>and<sp/>1000<sp/>bytes)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead3);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite3);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>readStopped<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writeStopped<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(readStopped<sp/>&amp;&amp;<sp/>writeStopped)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_stopClocks(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_close(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>If you desire to put only one transaction in the queue, fixedBufferLength must be inferior to half the length (in bytes) of the buffer to transfer.</para></simplesect>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_Streaming"/><heading level="3">Writing Data in Continuous Streaming Mode</heading>
</para><para>The following example shows how to read and write data in streaming mode. A dummy treatment of the data is also done. This example is not complete (semaphore and tasks creation are not shown)</para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_Streaming_Code"/><programlisting><codeline><highlight class="normal">static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>These<sp/>buffers<sp/>will<sp/>successively<sp/>be<sp/>written,<sp/>treated<sp/>and<sp/>sent<sp/>out</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf1[500];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf2[500];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf3[500];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf4[500];</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf1[500]={0};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf2[500]={0};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf3[500]={0};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf4[500]={0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>These<sp/>transactions<sp/>will<sp/>successively<sp/>be<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">//<sp/>i2sReadList,<sp/>the<sp/>treatmentList<sp/>and<sp/>the<sp/>i2sWriteList</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead1;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead2;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead3;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead4;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite1;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite2;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite3;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite4;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sReadList;</highlight></codeline>
<codeline><highlight class="normal">List_List<sp/>treatmentList;</highlight></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>remove<sp/>the<sp/>previous<sp/>transaction<sp/>(the<sp/>current<sp/>one<sp/>is<sp/>not<sp/>over)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Remove<sp/>the<sp/>finished<sp/>transaction<sp/>from<sp/>the<sp/>write<sp/>queue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;i2sWriteList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>transaction<sp/>must<sp/>now<sp/>feed<sp/>the<sp/>read<sp/>queue<sp/>(we<sp/>do<sp/>not<sp/>need<sp/>anymore<sp/>the<sp/>data<sp/>of<sp/>this<sp/>transaction)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transactionFinished-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>need<sp/>to<sp/>queue<sp/>a<sp/>new<sp/>transaction:<sp/>let&apos;s<sp/>take<sp/>one<sp/>in<sp/>the<sp/>treatment<sp/>queue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*newTransaction<sp/>=<sp/>(I2S_Transaction*)List_head(&amp;treatmentList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(newTransaction<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;treatmentList,<sp/>(List_Elem*)newTransaction);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTransaction-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)newTransaction);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>remove<sp/>the<sp/>previous<sp/>transaction<sp/>(the<sp/>current<sp/>one<sp/>is<sp/>not<sp/>over)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>finished<sp/>transaction<sp/>contains<sp/>data<sp/>that<sp/>must<sp/>be<sp/>treated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;i2sReadList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transactionFinished-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;treatmentList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>the<sp/>treatment<sp/>of<sp/>the<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore_post(dataReadyForTreatment);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>do<sp/>not<sp/>need<sp/>to<sp/>queue<sp/>transaction<sp/>here:<sp/>writeCallbackFxn<sp/>takes<sp/>care<sp/>of<sp/>this<sp/>:)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>*myTreatmentThread(void<sp/>*arg0){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>k;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore_pend(dataReadyForTreatment,<sp/>BIOS_WAIT_FOREVER);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(lastAchievedReadTransaction<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Need<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>be<sp/>sure<sp/>to<sp/>have<sp/>corresponding<sp/>bufPtr<sp/>and<sp/>bufSize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>key<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*buf<sp/>=<sp/>lastAchievedReadTransaction-&gt;bufPtr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bufLength<sp/>=<sp/>lastAchievedReadTransaction-&gt;bufSize<sp/>/<sp/>sizeof(uint16_t);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HwiP_restore(key);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>My<sp/>dummy<sp/>data<sp/>treatment...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k=0;<sp/>k&lt;bufLength;<sp/>k++)<sp/>{buf[k]<sp/>--;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k=0;<sp/>k&lt;bufLength;<sp/>k++)<sp/>{buf[k]<sp/>++;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>*echoExampleThread(void<sp/>*arg0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>treatmentList<sp/>(this<sp/>list<sp/>is<sp/>initially<sp/>empty)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_clearList(&amp;treatmentList);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead4.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead4.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_clearList(&amp;i2sReadList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead4);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite4.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite4.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_clearList(&amp;i2sWriteList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite4);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_RepeatMode"/><heading level="3">Writing Data in repeat Mode</heading>
</para><para>The following example shows how to read and write data in repeat mode. The same buffers are continuously written and send out while the driver is not stopped. Here, we decide to only stop sending out after an arbitrary number of sending.</para><para><hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Example_RepeatMode_Code"/><programlisting><codeline><highlight class="normal">static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2SCC26XX_Object<sp/>i2sObject;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>buffer<sp/>will<sp/>be<sp/>continuously<sp/>re-written</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>readBuf[500];</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>data<sp/>will<sp/>be<sp/>continuously<sp/>sent<sp/>out</highlight></codeline>
<codeline><highlight class="normal">static<sp/>uint16_t<sp/>writeBuf[500]<sp/>=<sp/>{...some<sp/>cool<sp/>data...};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sRead;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>I2S_Transaction<sp/>i2sWrite;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sReadList;</highlight></codeline>
<codeline><highlight class="normal">List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>volatile<sp/>bool<sp/>writeFinished<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Nothing<sp/>to<sp/>do<sp/>here:<sp/>the<sp/>buffer(s)<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring<sp/>list,<sp/>the<sp/>transfers<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>executed<sp/>without<sp/>any<sp/>action<sp/>from<sp/>the<sp/>application.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>consider<sp/>the<sp/>previous<sp/>transaction<sp/>(ok,<sp/>when<sp/>you<sp/>have<sp/>only<sp/>one<sp/>transaction<sp/>it&apos;s<sp/>the<sp/>same)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>After<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>completion<sp/>of<sp/>the<sp/>transaction,<sp/>we<sp/>will<sp/>stop<sp/>writting</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(transactionFinished-&gt;numberOfCompletions<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>You<sp/>cannot<sp/>use<sp/>I2S_stopRead()<sp/>/<sp/>I2S_stopWrite()<sp/>in<sp/>the<sp/>callback.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>execution<sp/>of<sp/>these<sp/>functions<sp/>is<sp/>potentially<sp/>blocking<sp/>and<sp/>can<sp/>mess<sp/>up<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>system.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeFinished<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Nothing<sp/>to<sp/>do<sp/>here:<sp/>the<sp/>buffer(s)<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring<sp/>list,<sp/>the<sp/>transfers<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>executed<sp/>without<sp/>any<sp/>action<sp/>from<sp/>the<sp/>application.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>*modeRepeat(void<sp/>*arg0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1000;<sp/>//<sp/>No<sp/>problem<sp/>here:<sp/>the<sp/>driver<sp/>consider</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>list<sp/>as<sp/>an<sp/>infinite<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sRead.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_tail(&amp;i2sReadList)-&gt;next<sp/>=<sp/>List_head(&amp;i2sReadList);//<sp/>Read<sp/>buffers<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring-list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_head(&amp;i2sReadList)-&gt;prev<sp/>=<sp/>List_tail(&amp;i2sReadList);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>i2sWrite.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_tail(&amp;i2sWriteList)-&gt;next<sp/>=<sp/>List_head(&amp;i2sWriteList);<sp/>//<sp/>Write<sp/>buffers<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring-list</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>List_head(&amp;i2sWriteList)-&gt;prev<sp/>=<sp/>List_tail(&amp;i2sWriteList);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while(1){</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(writeFinished){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeFinished<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_stopWrite(i2sHandle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>In the case of circular lists, there is no problem to put only one buffer in the queue.</para></simplesect>
<hruler/>
 <anchor id="_i2_s_8h_1ti_drivers_I2S_Configuration"/><heading level="1">Configuration</heading>
</para><para>Refer to the <ref refid="index_1driver_configuration" kindref="member">Driver&apos;s Configuration</ref> section for driver configuration information. <hruler/>
 </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/><sp/><sp/><sp/><sp/><sp/>Inter-Integrated<sp/>Circuit<sp/>Sound<sp/>(I2S)<sp/>Bus<sp/>Driver</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2S<sp/>header<sp/>file<sp/>should<sp/>be<sp/>included<sp/>in<sp/>an<sp/>application<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/><sp/>#include<sp/>&lt;ti/drivers/I2S.h&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Overview</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2S<sp/>driver<sp/>facilitates<sp/>the<sp/>use<sp/>of<sp/>Inter-IC<sp/>Sound<sp/>(I2S),<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>used<sp/>to<sp/>connect<sp/>digital<sp/>audio<sp/>devices<sp/>so<sp/>that<sp/>audio<sp/>signals<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>communicated<sp/>between<sp/>devices.<sp/>The<sp/>I2S<sp/>driver<sp/>simplifies<sp/>reading<sp/>and</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>writing<sp/>to<sp/>any<sp/>of<sp/>the<sp/>Multichannel<sp/>Audio<sp/>Serial<sp/>Port<sp/>(McASP)<sp/>peripherals</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/>on<sp/>the<sp/>board<sp/>with<sp/>Receive<sp/>and<sp/>Transmit<sp/>support.<sp/>These<sp/>include<sp/>read<sp/>and</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/>write<sp/>characters<sp/>on<sp/>the<sp/>McASP<sp/>peripheral.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/><sp/>I2S<sp/>interfaces<sp/>typically<sp/>consist<sp/>of<sp/>4<sp/>or<sp/>5<sp/>signals.<sp/>The<sp/>5th<sp/>signal<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>systematically<sp/>used.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>&lt;b&gt;Serial<sp/>Clock<sp/>(SCK)&lt;/b&gt;<sp/>also<sp/>called<sp/>Bit<sp/>Clock<sp/>(BCLK)<sp/>or<sp/>Multichannel</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Audio<sp/>Frame<sp/>Synchronization<sp/>(McAFSX)</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>&lt;b&gt;Word<sp/>Select<sp/>(WS)&lt;/b&gt;<sp/>also<sp/>called<sp/>Word<sp/>Clock<sp/>(WCLK),<sp/>Left<sp/>Right</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Clock<sp/>(LRCLK)<sp/>or<sp/>Multichannel<sp/>Audio<sp/>Clock<sp/>(McACLK)</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>&lt;b&gt;Serial<sp/>Data<sp/>(SD0)&lt;/b&gt;<sp/>also<sp/>called<sp/>AD0,<sp/>AD1,<sp/>McAXR0,<sp/>or<sp/>possibly<sp/>SDI</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>&lt;b&gt;Serial<sp/>Data<sp/>(SD1)&lt;/b&gt;<sp/>also<sp/>called<sp/>AD1,<sp/>ADI,<sp/>McAXR1,<sp/>or<sp/>possibly<sp/>SDI</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>&lt;b&gt;Master<sp/>Clock<sp/>(MCLK)&lt;/b&gt;</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Usage</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>&lt;b&gt;The<sp/>I2S<sp/>driver<sp/>provides<sp/>the<sp/>following<sp/>APIs:&lt;/b&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_init():<sp/>@copybrief<sp/>I2S_init</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_open():<sp/>@copybrief<sp/>I2S_open</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_Params_init():<sp/>@copybrief<sp/>I2S_Params_init</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_Transaction_init():<sp/>@copybrief<sp/>I2S_Transaction_init</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_setReadQueueHead():<sp/>@copybrief<sp/>I2S_setReadQueueHead</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_startClocks():<sp/>@copybrief<sp/>I2S_startClocks</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_startRead():<sp/>@copybrief<sp/>I2S_startRead</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_stopRead():<sp/>@copybrief<sp/>I2S_stopRead</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_stopClocks():<sp/>@copybrief<sp/>I2S_stopClocks</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_close():<sp/>@copybrief<sp/>I2S_close</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Driver_Transactions</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Transactions<sp/>#</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/>Data<sp/>transfers<sp/>are<sp/>achieved<sp/>through<sp/>#I2S_Transaction<sp/>structures.<sp/>Application<sp/>is</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/><sp/>responsible<sp/>to<sp/>maintain<sp/>the<sp/>transactions<sp/>queues.<sp/>The<sp/>I2S<sp/>driver<sp/>completes<sp/>the</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/>transactions<sp/>one<sp/>by<sp/>one.<sp/>When<sp/>a<sp/>transaction<sp/>is<sp/>over,<sp/>the<sp/>I2S<sp/>driver<sp/>takes<sp/>in</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/><sp/>consideration<sp/>the<sp/>next<sp/>transaction<sp/>(if<sp/>the<sp/>next<sp/>transaction<sp/>is<sp/>NULL,<sp/>the<sp/>I2S</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>drivers<sp/>signals<sp/>this<sp/>to<sp/>the<sp/>user).</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2S<sp/>driver<sp/>relies<sp/>on<sp/>the<sp/>following<sp/>fields<sp/>of<sp/>the<sp/>#I2S_Transaction<sp/>to</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>complete<sp/>it:</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>the<sp/>length<sp/>of<sp/>the<sp/>buffer</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>a<sp/>pointer<sp/>on<sp/>the<sp/>next<sp/>transaction<sp/>to<sp/>achieve<sp/>(kept<sp/>in<sp/>a<sp/>List_Elem<sp/>structure)</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/>.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>I2S<sp/>driver<sp/>provides<sp/>the<sp/>following<sp/>elements<sp/>(fields<sp/>of<sp/>the<sp/>#I2S_Transaction):</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>the<sp/>number<sp/>of<sp/>untransferred<sp/>bytes:<sp/>the<sp/>driver<sp/>is<sp/>designed<sp/>to<sp/>avoid<sp/>memory<sp/>corruption<sp/>and<sp/>will</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>not<sp/>complete<sp/>an<sp/>incomplete<sp/>transaction<sp/>(meaning<sp/>a<sp/>transaction<sp/>where<sp/>the<sp/>buffer<sp/>size<sp/>would<sp/>not</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/>permit<sp/>to<sp/>send<sp/>or<sp/>receive<sp/>a<sp/>whole<sp/>number<sp/>of<sp/>samples).<sp/>In<sp/>this<sp/>case,<sp/>the<sp/>system<sp/>considers<sp/>the</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/>samples<sp/>of<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>buffer<sp/>and<sp/>read/write<sp/>as<sp/>much<sp/>as<sp/>possible<sp/>samples<sp/>and<sp/>ignore<sp/>the</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/>end<sp/>of<sp/>the<sp/>buffer.<sp/>The<sp/>number<sp/>of<sp/>untransafered<sp/>bytes<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>left<sp/>at<sp/>the<sp/>end<sp/>of</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>buffer)</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>the<sp/>number<sp/>of<sp/>completions<sp/>of<sp/>the<sp/>transaction.<sp/>This<sp/>value<sp/>is<sp/>basically<sp/>incremented<sp/>by<sp/>one</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/>every<sp/>time<sp/>the<sp/>transaction<sp/>is<sp/>completed.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/>.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>Please<sp/>note<sp/>that<sp/>these<sp/>two<sp/>fields<sp/>are<sp/>valid<sp/>only<sp/>when<sp/>the<sp/>transaction<sp/>has<sp/>been<sp/>completed.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/>Consult<sp/>examples<sp/>to<sp/>get<sp/>more<sp/>details<sp/>on<sp/>the<sp/>transaction<sp/>usage.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Driver_ProvidingData</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Providing<sp/>data<sp/>to<sp/>the<sp/>I2S<sp/>driver<sp/>#</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>Application<sp/>is<sp/>responsible<sp/>to<sp/>handle<sp/>the<sp/>queues<sp/>of<sp/>transactions.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>Application<sp/>is<sp/>also<sp/>responsible<sp/>to<sp/>provide<sp/>to<sp/>the<sp/>driver<sp/>a<sp/>pointer<sp/>on</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>first<sp/>transaction<sp/>to<sp/>consider<sp/>(considering<sp/>that<sp/>all<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>transactions<sp/>are<sp/>correctly<sp/>queued).</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>#I2S_setReadQueueHead()<sp/>and<sp/>#I2S_setWriteQueueHead()<sp/><sp/>allow<sp/>the<sp/>user<sp/>to</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>set<sp/>the<sp/>first<sp/>transaction<sp/>to<sp/>consider.<sp/>These<sp/>functions<sp/>should<sp/>be<sp/>used<sp/>only</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/><sp/>when<sp/>no<sp/>transaction<sp/>is<sp/>running<sp/>on<sp/>the<sp/>considered<sp/>interface.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Driver_StartStopClocks</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Start<sp/>and<sp/>stop<sp/>clocks<sp/>and<sp/>transactions<sp/>#</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/>Clocks<sp/>can<sp/>be<sp/>started<sp/>and<sp/>stopped<sp/>by<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>Read<sp/>and<sp/>write<sp/>can<sp/>be<sp/>started<sp/>and<sp/>stopped<sp/>independently.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>start<sp/>a<sp/>transfer,<sp/>clocks<sp/>must<sp/>be<sp/>running.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/>To<sp/>stop<sp/>the<sp/>clocks<sp/>no<sp/>transfer<sp/>must<sp/>be<sp/>running.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>following<sp/>functions<sp/>for<sp/>more<sp/>details:</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_startClocks()<sp/>@li<sp/>I2S_startRead()<sp/>@li<sp/>I2S_startWrite()</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>I2S_stopRead()<sp/>@li<sp/>I2S_stopWrite()<sp/>@li<sp/>I2S_stopClocks()</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/>@note</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>In<sp/>#I2S_SLAVE<sp/>mode,<sp/>clocks<sp/>must<sp/>be<sp/>started<sp/>and<sp/>stopped<sp/>exactly<sp/>like</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/><sp/>it<sp/>is<sp/>done<sp/>in<sp/>#I2S_MASTER<sp/>mode.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>If<sp/>the<sp/>queue<sp/>of<sp/>transaction<sp/>is<sp/>not<sp/>empty,<sp/>the<sp/>calls<sp/>to<sp/>#I2S_stopRead()</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/>and<sp/>#I2S_stopWrite()<sp/>are<sp/>blocking<sp/>and<sp/>potentially<sp/>long.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Examples</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/><sp/>##<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2S_Example_PlayAndStop<sp/>&quot;Play<sp/>and<sp/>Stop&quot;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2S_Example_Streaming<sp/>&quot;Streaming&quot;</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/>@li<sp/>@ref<sp/>ti_drivers_I2S_Example_RepeatMode<sp/>&quot;Repeat&quot;</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_PlayAndStop</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Mode<sp/>Play<sp/>and<sp/>Stop<sp/>#</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>example<sp/>shows<sp/>how<sp/>to<sp/>simultaneously<sp/>receive<sp/>and<sp/>send<sp/>out<sp/>a<sp/>given<sp/>amount<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_PlayAndStop_Code</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf1[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf2[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf3[500];<sp/>//<sp/>the<sp/>data<sp/>read<sp/>will<sp/>end<sp/>up<sp/>in<sp/>this<sp/>buffer</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf1[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf2[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf3[250]<sp/>=<sp/>{...some<sp/>data...};<sp/>//<sp/>this<sp/>buffer<sp/>will<sp/>be<sp/>sent<sp/>out</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead1;</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead2;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead3;</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite1;</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite2;</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite3;</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sReadList;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>volatile<sp/>bool<sp/>readStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>volatile<sp/>bool<sp/>writeStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(status<sp/>&amp;<sp/>I2S_ALL_TRANSACTIONS_SUCCESS){</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>Here<sp/>we<sp/>do<sp/>not<sp/>queue<sp/>new<sp/>transfers<sp/>or<sp/>set<sp/>a<sp/>new<sp/>queue-head.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>driver<sp/>will<sp/>stop<sp/>sending<sp/>out<sp/>data<sp/>on<sp/>its<sp/>own.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(status<sp/>&amp;<sp/>I2S_ALL_TRANSACTIONS_SUCCESS){</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>Here<sp/>we<sp/>do<sp/>not<sp/>queue<sp/>new<sp/>transfers<sp/>or<sp/>set<sp/>a<sp/>new<sp/>queue-head.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>driver<sp/>will<sp/>stop<sp/>receiving<sp/>data<sp/>on<sp/>its<sp/>own.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readStopped<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>*modePlayAndStopThread(void<sp/>*arg0)</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_init();</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>500;<sp/>//<sp/>fixedBufferLength<sp/>is<sp/>the<sp/>greatest<sp/>common</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>divisor<sp/>of<sp/>all<sp/>the<sp/>different<sp/>buffers</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(here<sp/>buffers&apos;<sp/>size<sp/>are<sp/>500<sp/>and<sp/>1000<sp/>bytes)</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead1);</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead2);</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead3);</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf1;</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf2;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf3;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf1);</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf2);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf3);</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead1);</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead2);</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead3);</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead1);</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite2);</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite3);</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf1;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf2;</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf3;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf1);</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf2);</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf3);</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite2);</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite3);</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>readStopped<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>writeStopped<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(readStopped<sp/>&amp;&amp;<sp/>writeStopped)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_stopClocks(i2sHandle);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_close(i2sHandle);</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/><sp/>\note<sp/>If<sp/>you<sp/>desire<sp/>to<sp/>put<sp/>only<sp/>one<sp/>transaction<sp/>in<sp/>the<sp/>queue,<sp/>fixedBufferLength<sp/>must<sp/>be<sp/>inferior<sp/>to<sp/>half<sp/>the<sp/>length<sp/>(in<sp/>bytes)<sp/>of<sp/>the<sp/>buffer<sp/>to<sp/>transfer.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_Streaming</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Writing<sp/>Data<sp/>in<sp/>Continuous<sp/>Streaming<sp/>Mode<sp/>#</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>example<sp/>shows<sp/>how<sp/>to<sp/>read<sp/>and<sp/>write<sp/>data<sp/>in<sp/>streaming<sp/>mode.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/>dummy<sp/>treatment<sp/>of<sp/>the<sp/>data<sp/>is<sp/>also<sp/>done.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>example<sp/>is<sp/>not<sp/>complete<sp/>(semaphore<sp/>and<sp/>tasks<sp/>creation<sp/>are<sp/>not<sp/>shown)</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_Streaming_Code</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>These<sp/>buffers<sp/>will<sp/>successively<sp/>be<sp/>written,<sp/>treated<sp/>and<sp/>sent<sp/>out</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf1[500];</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf2[500];</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf3[500];</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf4[500];</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf1[500]={0};</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf2[500]={0};</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf3[500]={0};</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf4[500]={0};</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>These<sp/>transactions<sp/>will<sp/>successively<sp/>be<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>i2sReadList,<sp/>the<sp/>treatmentList<sp/>and<sp/>the<sp/>i2sWriteList</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead1;</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead2;</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead3;</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead4;</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite1;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite2;</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite3;</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite4;</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sReadList;</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>treatmentList;</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>remove<sp/>the<sp/>previous<sp/>transaction<sp/>(the<sp/>current<sp/>one<sp/>is<sp/>not<sp/>over)</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Remove<sp/>the<sp/>finished<sp/>transaction<sp/>from<sp/>the<sp/>write<sp/>queue</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;i2sWriteList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>transaction<sp/>must<sp/>now<sp/>feed<sp/>the<sp/>read<sp/>queue<sp/>(we<sp/>do<sp/>not<sp/>need<sp/>anymore<sp/>the<sp/>data<sp/>of<sp/>this<sp/>transaction)</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transactionFinished-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>need<sp/>to<sp/>queue<sp/>a<sp/>new<sp/>transaction:<sp/>let&apos;s<sp/>take<sp/>one<sp/>in<sp/>the<sp/>treatment<sp/>queue</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*newTransaction<sp/>=<sp/>(I2S_Transaction*)List_head(&amp;treatmentList);</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(newTransaction<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;treatmentList,<sp/>(List_Elem*)newTransaction);</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTransaction-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)newTransaction);</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>remove<sp/>the<sp/>previous<sp/>transaction<sp/>(the<sp/>current<sp/>one<sp/>is<sp/>not<sp/>over)</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>finished<sp/>transaction<sp/>contains<sp/>data<sp/>that<sp/>must<sp/>be<sp/>treated</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_remove(&amp;i2sReadList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transactionFinished-&gt;queueElement.next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;treatmentList,<sp/>(List_Elem*)transactionFinished);</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>the<sp/>treatment<sp/>of<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore_post(dataReadyForTreatment);</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>do<sp/>not<sp/>need<sp/>to<sp/>queue<sp/>transaction<sp/>here:<sp/>writeCallbackFxn<sp/>takes<sp/>care<sp/>of<sp/>this<sp/>:)</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>*myTreatmentThread(void<sp/>*arg0){</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k;</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Semaphore_pend(dataReadyForTreatment,<sp/>BIOS_WAIT_FOREVER);</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(lastAchievedReadTransaction<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Need<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>be<sp/>sure<sp/>to<sp/>have<sp/>corresponding<sp/>bufPtr<sp/>and<sp/>bufSize</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>key<sp/>=<sp/>HwiP_disable();</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*buf<sp/>=<sp/>lastAchievedReadTransaction-&gt;bufPtr;</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>bufLength<sp/>=<sp/>lastAchievedReadTransaction-&gt;bufSize<sp/>/<sp/>sizeof(uint16_t);</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HwiP_restore(key);</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>My<sp/>dummy<sp/>data<sp/>treatment...</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k=0;<sp/>k&lt;bufLength;<sp/>k++)<sp/>{buf[k]<sp/>--;}</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(k=0;<sp/>k&lt;bufLength;<sp/>k++)<sp/>{buf[k]<sp/>++;}</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>*echoExampleThread(void<sp/>*arg0)</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_init();</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>treatmentList<sp/>(this<sp/>list<sp/>is<sp/>initially<sp/>empty)</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_clearList(&amp;treatmentList);</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1000;</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead1);</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead2);</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead3);</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead4);</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf1;</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf2;</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf3;</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead4.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf4;</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf1);</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf2);</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf3);</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead4.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf4);</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_clearList(&amp;i2sReadList);</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead1);</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead2);</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead3);</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead4);</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead1);</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite2);</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite3);</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite4);</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite1.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf1;</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite2.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf2;</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite3.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf3;</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite4.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf4;</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite1.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf1);</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite2.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf2);</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite3.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf3);</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite4.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf4);</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_clearList(&amp;i2sWriteList);</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite2);</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite3);</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite4);</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite1);</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1);</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_RepeatMode</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/><sp/>###<sp/>Writing<sp/>Data<sp/>in<sp/>repeat<sp/>Mode<sp/>#</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>following<sp/>example<sp/>shows<sp/>how<sp/>to<sp/>read<sp/>and<sp/>write<sp/>data<sp/>in<sp/>repeat<sp/>mode.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>same<sp/>buffers<sp/>are<sp/>continuously<sp/>written<sp/>and<sp/>send<sp/>out<sp/>while<sp/>the<sp/>driver<sp/>is<sp/>not<sp/>stopped.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/><sp/>Here,<sp/>we<sp/>decide<sp/>to<sp/>only<sp/>stop<sp/>sending<sp/>out<sp/>after<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>sending.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Example_RepeatMode_Code</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/><sp/>@code</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Handle<sp/>i2sHandle;</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Config<sp/>i2sConfig;</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2SCC26XX_Object<sp/>i2sObject;</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>This<sp/>buffer<sp/>will<sp/>be<sp/>continuously<sp/>re-written</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>readBuf[500];</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/><sp/>//<sp/>This<sp/>data<sp/>will<sp/>be<sp/>continuously<sp/>sent<sp/>out</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>uint16_t<sp/>writeBuf[500]<sp/>=<sp/>{...some<sp/>cool<sp/>data...};</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sRead;</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>I2S_Transaction<sp/>i2sWrite;</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sReadList;</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/><sp/>List_List<sp/>i2sWriteList;</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>volatile<sp/>bool<sp/>writeFinished<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>writeCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Nothing<sp/>to<sp/>do<sp/>here:<sp/>the<sp/>buffer(s)<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring<sp/>list,<sp/>the<sp/>transfers<sp/>are</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>executed<sp/>without<sp/>any<sp/>action<sp/>from<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>We<sp/>must<sp/>consider<sp/>the<sp/>previous<sp/>transaction<sp/>(ok,<sp/>when<sp/>you<sp/>have<sp/>only<sp/>one<sp/>transaction<sp/>it&apos;s<sp/>the<sp/>same)</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction<sp/>*transactionFinished<sp/>=<sp/>(I2S_Transaction*)List_prev(&amp;transactionPtr-&gt;queueElement);</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>if(transactionFinished<sp/>!=<sp/>NULL){</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>After<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>completion<sp/>of<sp/>the<sp/>transaction,<sp/>we<sp/>will<sp/>stop<sp/>writting</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(transactionFinished-&gt;numberOfCompletions<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>You<sp/>cannot<sp/>use<sp/>I2S_stopRead()<sp/>/<sp/>I2S_stopWrite()<sp/>in<sp/>the<sp/>callback.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>execution<sp/>of<sp/>these<sp/>functions<sp/>is<sp/>potentially<sp/>blocking<sp/>and<sp/>can<sp/>mess<sp/>up<sp/>the</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>system.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeFinished<sp/>=<sp/>(bool)true;</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>readCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Nothing<sp/>to<sp/>do<sp/>here:<sp/>the<sp/>buffer(s)<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring<sp/>list,<sp/>the<sp/>transfers<sp/>are</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>executed<sp/>without<sp/>any<sp/>action<sp/>from<sp/>the<sp/>application.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/><sp/>static<sp/>void<sp/>errCallbackFxn(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/>I2S_Transaction<sp/>*transactionPtr)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>the<sp/>I2S<sp/>error</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/><sp/>void<sp/>*modeRepeat(void<sp/>*arg0)</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params<sp/>i2sParams;</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>I2S<sp/>opening<sp/>parameters</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Params_init(&amp;i2sParams);</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.fixedBufferLength<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>1000;<sp/>//<sp/>No<sp/>problem<sp/>here:<sp/>the<sp/>driver<sp/>consider</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>list<sp/>as<sp/>an<sp/>infinite<sp/>list.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.writeCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>writeCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.readCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>readCallbackFxn<sp/>;</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sParams.errorCallback<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>errCallbackFxn;</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sHandle<sp/>=<sp/>I2S_open(Board_I2S0,<sp/>&amp;i2sParams);</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>read-transactions</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sRead);</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>readBuf;</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sRead.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(readBuf);</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sReadList,<sp/>(List_Elem*)&amp;i2sRead);</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_tail(&amp;i2sReadList)-&gt;next<sp/>=<sp/>List_head(&amp;i2sReadList);//<sp/>Read<sp/>buffers<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring-list</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_head(&amp;i2sReadList)-&gt;prev<sp/>=<sp/>List_tail(&amp;i2sReadList);</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setReadQueueHead(i2sHandle,<sp/>&amp;i2sRead);</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>the<sp/>write-transactions</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_Transaction_init(&amp;i2sWrite);</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite.bufPtr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>writeBuf;</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>i2sWrite.bufSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sizeof(writeBuf);</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_put(&amp;i2sWriteList,<sp/>(List_Elem*)&amp;i2sWrite);</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_tail(&amp;i2sWriteList)-&gt;next<sp/>=<sp/>List_head(&amp;i2sWriteList);<sp/>//<sp/>Write<sp/>buffers<sp/>are<sp/>queued<sp/>in<sp/>a<sp/>ring-list</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>List_head(&amp;i2sWriteList)-&gt;prev<sp/>=<sp/>List_tail(&amp;i2sWriteList);</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_setWriteQueueHead(i2sHandle,<sp/>&amp;i2sWrite);</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startClocks(i2sHandle);</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startWrite(i2sHandle);</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>I2S_startRead(i2sHandle);</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>while(1){</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(writeFinished){</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeFinished<sp/>=<sp/>(bool)false;</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2S_stopWrite(i2sHandle);</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/><sp/>@endcode</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/><sp/>@note<sp/>In<sp/>the<sp/>case<sp/>of<sp/>circular<sp/>lists,<sp/>there<sp/>is<sp/>no<sp/>problem<sp/>to<sp/>put<sp/>only</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/><sp/>one<sp/>buffer<sp/>in<sp/>the<sp/>queue.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/><sp/>@anchor<sp/>ti_drivers_I2S_Configuration</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/><sp/>#<sp/>Configuration</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/><sp/>Refer<sp/>to<sp/>the<sp/>@ref<sp/>driver_configuration<sp/>&quot;Driver&apos;s<sp/>Configuration&quot;<sp/>section</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/><sp/>for<sp/>driver<sp/>configuration<sp/>information.</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/><sp/>&lt;hr&gt;</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>******************************************************************************</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_I2S__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_I2S__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_list_8h" kindref="compound">ti/drivers/utils/List.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="group___i2_s___s_t_a_t_u_s_1gab6513a393fed75b7c1b507d5ec9047fc" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_ALL_TRANSACTIONS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0001U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="group___i2_s___s_t_a_t_u_s_1gac8265d03e72406770257a834e377247b" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_TRANSACTION_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0002U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="601" refid="group___i2_s___s_t_a_t_u_s_1ga815abf87dfe4353e42bea24940f45d75" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_TIMEOUT_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0100U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="group___i2_s___s_t_a_t_u_s_1gaeff50b687883296e143e5da70102a915" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_BUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0200U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="group___i2_s___s_t_a_t_u_s_1gab9cb86b261eb8a0abcfc19091f46385a" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_WS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0400U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="627" refid="group___i2_s___s_t_a_t_u_s_1ga50be1b2cc5cef182aff769f626eb6e2f" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_PTR_READ_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0800U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="group___i2_s___s_t_a_t_u_s_1gacb0dde45fe8df930d9914a100fbfcef8" refkind="member"><highlight class="preprocessor"><sp/>#define<sp/>I2S_PTR_WRITE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1000U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_s___config__" kindref="compound">I2S_Config_</ref><sp/>*<ref refid="_i2_s_8h_1ada845645663caf2bc9dc5816cb7f7c1c" kindref="member">I2S_Handle</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="struct_i2_s___transaction__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction_</ref><sp/>{</highlight></codeline>
<codeline lineno="649" refid="struct_i2_s___transaction___1a5228d22402bcfebc6501698484287ada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_list___elem" kindref="compound">List_Elem</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1a5228d22402bcfebc6501698484287ada" kindref="member">queueElement</ref>;</highlight></codeline>
<codeline lineno="651" refid="struct_i2_s___transaction___1a4ff4f588027c268d095934f9712c874e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_s___transaction___1a4ff4f588027c268d095934f9712c874e" kindref="member">bufPtr</ref>;</highlight></codeline>
<codeline lineno="653" refid="struct_i2_s___transaction___1a417c126a698a675b74b1a1ab270b3898" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1a417c126a698a675b74b1a1ab270b3898" kindref="member">bufSize</ref>;</highlight></codeline>
<codeline lineno="655" refid="struct_i2_s___transaction___1ab85c4420ca74927bbe58409d474cc433" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1ab85c4420ca74927bbe58409d474cc433" kindref="member">bytesTransferred</ref>;</highlight></codeline>
<codeline lineno="657" refid="struct_i2_s___transaction___1ae3c18b29fdac33fc14608c9356fdfcd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1ae3c18b29fdac33fc14608c9356fdfcd7" kindref="member">untransferredBytes</ref>;</highlight></codeline>
<codeline lineno="659" refid="struct_i2_s___transaction___1a2acdcde7e70f6f458fa891c3767ab6b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1a2acdcde7e70f6f458fa891c3767ab6b0" kindref="member">numberOfCompletions</ref>;</highlight></codeline>
<codeline lineno="661" refid="struct_i2_s___transaction___1a44991881905faa78742079722b174986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___transaction___1a44991881905faa78742079722b174986" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a8cc4f8389984f39ac02643bd23d8c947" kindref="member">I2S_Transaction</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="677" refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref>)(I2S_Handle<sp/>handle,<sp/>int_fast16_t<sp/>status,<sp/><ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction</ref><sp/>*transactionPtr);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="_i2_s_8h_1a7ce338dedc6f90e9b86705ad6a2e3eea" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_s_8h_1a7ce338dedc6f90e9b86705ad6a2e3eea" kindref="member">I2S_RegUpdate</ref>)(uint32_t<sp/>ui32Base,<sp/>uint32_t<sp/>ui32NextPointer);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="_i2_s_8h_1a518f25dc99f76453c3ef7bfdb7fc390c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_i2_s_8h_1a518f25dc99f76453c3ef7bfdb7fc390c" kindref="member">I2S_StopInterface</ref>)(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afa" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afa" kindref="member">I2S_MemoryLength_</ref><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705" refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa13e1dbc37a214b697892127dd14b39ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa13e1dbc37a214b697892127dd14b39ec" kindref="member">I2S_MEMORY_LENGTH_8BITS</ref><sp/><sp/>=<sp/><sp/>8U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="706" refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaaa95b67ba7278bcb1d9a64cba9a8e1bc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaaa95b67ba7278bcb1d9a64cba9a8e1bc8" kindref="member">I2S_MEMORY_LENGTH_16BITS</ref><sp/>=<sp/>16U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707" refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaacc56087b412f11af3dc890f066fac0b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaacc56087b412f11af3dc890f066fac0b6" kindref="member">I2S_MEMORY_LENGTH_24BITS</ref><sp/>=<sp/>24U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="708" refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa926727054bff1f3cbe2540434d0fab42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a9fac4db9f2c58421eaafb5e801cb6afaa926727054bff1f3cbe2540434d0fab42" kindref="member">I2S_MEMORY_LENGTH_32BITS</ref><sp/>=<sp/>32U<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1af17772fe96b97eabab3169d1071d8522" kindref="member">I2S_MemoryLength</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="718" refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476" kindref="member">I2S_Role_</ref><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a2e9b49c09201c26bec35c9b854b09e08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a2e9b49c09201c26bec35c9b854b09e08" kindref="member">I2S_SLAVE</ref><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="721" refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a10b52b2d09a9f58e2daeec0f5a392bea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1ab255ddd1543bf85a8a55283a6e840476a10b52b2d09a9f58e2daeec0f5a392bea" kindref="member">I2S_MASTER</ref><sp/>=<sp/>1<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a5c8ca73490b1543e9208bf11966810f0" kindref="member">I2S_Role</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cd" kindref="member">I2S_SamplingEdge_</ref><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cdac2b123abf8d93dc779178fd3ede764eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cdac2b123abf8d93dc779178fd3ede764eb" kindref="member">I2S_SAMPLING_EDGE_FALLING</ref><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="733" refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cda54900e14a06cfb9a08de7b1ed2583491" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a64f399624d5e416237ab019457b571cda54900e14a06cfb9a08de7b1ed2583491" kindref="member">I2S_SAMPLING_EDGE_RISING</ref><sp/><sp/><sp/>=<sp/>1<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1aba10d78101dca20c71689a3bcd72a9df" kindref="member">I2S_SamplingEdge</ref>;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3" kindref="member">I2S_PhaseType_</ref><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3abe139271fd1177a8b3e81156a966695d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3abe139271fd1177a8b3e81156a966695d" kindref="member">I2S_PHASE_TYPE_SINGLE</ref><sp/><sp/>=<sp/>0U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="745" refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3a0b3e4c2e6cca0317d05ec75b872b34de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1ae7a6a5c7436367f64c54d02a4aab86f3a0b3e4c2e6cca0317d05ec75b872b34de" kindref="member">I2S_PHASE_TYPE_DUAL</ref><sp/><sp/><sp/><sp/>=<sp/>1U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="747"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a10c301d1d8adaa75e85bc5e19a510aad" kindref="member">I2S_PhaseType</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875" kindref="member">I2S_DataInterfaceUse_</ref><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aa745a9c11f2a2d74d1c6d001a32b355b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aa745a9c11f2a2d74d1c6d001a32b355b" kindref="member">I2S_SD0_DISABLED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="757" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ae0e5e7026b88277c279de0e798488e77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ae0e5e7026b88277c279de0e798488e77" kindref="member">I2S_SD0_INPUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="758" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ab32df02fc78f8a4eabe6efa84fe3b28e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875ab32df02fc78f8a4eabe6efa84fe3b28e" kindref="member">I2S_SD0_OUTPUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="759" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aac2fb5fe175b0b96da5c7ea069ae48b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875aac2fb5fe175b0b96da5c7ea069ae48b6" kindref="member">I2S_SD1_DISABLED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="760" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875abc860688d07b2022d075448f597d7811" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875abc860688d07b2022d075448f597d7811" kindref="member">I2S_SD1_INPUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x10U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="761" refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875a966016f222e7831b399aac26e4b8c7f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a2bf30e9c50d66a540e97c44212562875a966016f222e7831b399aac26e4b8c7f0" kindref="member">I2S_SD1_OUTPUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x20U<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="763"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a683a626a98ae8a61b0c77b5ed811b0ad" kindref="member">I2S_DataInterfaceUse</ref>;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6" kindref="member">I2S_ChannelConfig_</ref><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6af29054f891314a79ee5d2b105678fce5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6af29054f891314a79ee5d2b105678fce5" kindref="member">I2S_CHANNELS_NONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="773" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a9ae976eea3f03628bac96b3bd5b590a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a9ae976eea3f03628bac96b3bd5b590a9" kindref="member">I2S_CHANNELS_MONO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="774" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6ace24478308aa18581ea899b4749e1eee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6ace24478308aa18581ea899b4749e1eee" kindref="member">I2S_CHANNELS_MONO_INV</ref><sp/><sp/><sp/>=<sp/>0x02U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="775" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aa99f621d20e7c434dd8fc6eec81f88f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aa99f621d20e7c434dd8fc6eec81f88f7" kindref="member">I2S_CHANNELS_STEREO</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="776" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aef21e0755c603bfa84cfcfb76087a2f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6aef21e0755c603bfa84cfcfb76087a2f9" kindref="member">I2S_1_CHANNEL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="777" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a70296e535a023f5e486d169c56241938" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a70296e535a023f5e486d169c56241938" kindref="member">I2S_2_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="778" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6acde532a4455d55712113984d1d9d14ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6acde532a4455d55712113984d1d9d14ee" kindref="member">I2S_3_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x07U,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="779" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4de908d16fbc3997ca26f9daf0a1ab15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4de908d16fbc3997ca26f9daf0a1ab15" kindref="member">I2S_4_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0FU,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="780" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4dbc52ac6e50657e77ab1a5663c9bebb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a4dbc52ac6e50657e77ab1a5663c9bebb" kindref="member">I2S_5_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x1FU,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="781" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a6393bde043d2d9a820d0eaae3723390f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a6393bde043d2d9a820d0eaae3723390f" kindref="member">I2S_6_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x3FU,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="782" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a3d28c1be7347c31842f949fce1b5c245" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a3d28c1be7347c31842f949fce1b5c245" kindref="member">I2S_7_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x7FU,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="783" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a7f1bd716ad44f22c8b359102c206c0fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a7f1bd716ad44f22c8b359102c206c0fb" kindref="member">I2S_8_CHANNELS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xFFU,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="784" refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a93050a292e0f863d146fc2bb6461505b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a869e02dcb8a44b982502ff8731e87ce6a93050a292e0f863d146fc2bb6461505b" kindref="member">I2S_CHANNELS_ALL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xFFU<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="786"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a9a445124b8fe8062ccf8749106dd7df5" kindref="member">I2S_ChannelConfig</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="struct_i2_s___params__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_s___params__" kindref="compound">I2S_Params_</ref><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="struct_i2_s___params___1ab63bb5c611a5d8d1b878d30785f20d74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1ab63bb5c611a5d8d1b878d30785f20d74" kindref="member">trueI2sFormat</ref>;</highlight></codeline>
<codeline lineno="806" refid="struct_i2_s___params___1ac241296ad6a75842b2221aa9c7ebd511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1ac241296ad6a75842b2221aa9c7ebd511" kindref="member">invertWS</ref>;</highlight></codeline>
<codeline lineno="811" refid="struct_i2_s___params___1a43adf73f770fc1f2f06893df1792106d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a43adf73f770fc1f2f06893df1792106d" kindref="member">isMSBFirst</ref>;</highlight></codeline>
<codeline lineno="816" refid="struct_i2_s___params___1a9cb2f843982e209aca2d7098de7c8a63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a9cb2f843982e209aca2d7098de7c8a63" kindref="member">isDMAUnused</ref>;</highlight></codeline>
<codeline lineno="822" refid="struct_i2_s___params___1abb5b82efd574a61175bc032bd0776dc4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_MemoryLength<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1abb5b82efd574a61175bc032bd0776dc4" kindref="member">memorySlotLength</ref>;</highlight></codeline>
<codeline lineno="829" refid="struct_i2_s___params___1ac22f472321151947f2d49d6fda47c3fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1ac22f472321151947f2d49d6fda47c3fd" kindref="member">beforeWordPadding</ref>;</highlight></codeline>
<codeline lineno="832" refid="struct_i2_s___params___1a8945562d6ca586ea227c44317be2be04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a8945562d6ca586ea227c44317be2be04" kindref="member">afterWordPadding</ref>;</highlight></codeline>
<codeline lineno="835" refid="struct_i2_s___params___1a1d22bd4570339862333460a6d872e845" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a1d22bd4570339862333460a6d872e845" kindref="member">bitsPerWord</ref>;</highlight></codeline>
<codeline lineno="838" refid="struct_i2_s___params___1acef474246bce385bab7cad0b0cd3790f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a5c8ca73490b1543e9208bf11966810f0" kindref="member">I2S_Role</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1acef474246bce385bab7cad0b0cd3790f" kindref="member">moduleRole</ref>;</highlight></codeline>
<codeline lineno="843" refid="struct_i2_s___params___1a5697e2772a5e5d5b7bc3f74a72ea2a81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1aba10d78101dca20c71689a3bcd72a9df" kindref="member">I2S_SamplingEdge</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a5697e2772a5e5d5b7bc3f74a72ea2a81" kindref="member">samplingEdge</ref>;</highlight></codeline>
<codeline lineno="848" refid="struct_i2_s___params___1a1a065a60ed2ff86867b3a481f8239089" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_DataInterfaceUse<sp/><sp/><ref refid="struct_i2_s___params___1a1a065a60ed2ff86867b3a481f8239089" kindref="member">SD0Use</ref>;</highlight></codeline>
<codeline lineno="854" refid="struct_i2_s___params___1a87dd7fa383ca106800d9729b485df7a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_DataInterfaceUse<sp/><sp/><ref refid="struct_i2_s___params___1a87dd7fa383ca106800d9729b485df7a1" kindref="member">SD1Use</ref>;</highlight></codeline>
<codeline lineno="860" refid="struct_i2_s___params___1a8437bdc34943957b8700e70492bde018" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_ChannelConfig<sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a8437bdc34943957b8700e70492bde018" kindref="member">SD0Channels</ref>;</highlight></codeline>
<codeline lineno="883" refid="struct_i2_s___params___1a38000a066bd23eee109d6426d51e9e7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_ChannelConfig<sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a38000a066bd23eee109d6426d51e9e7f" kindref="member">SD1Channels</ref>;</highlight></codeline>
<codeline lineno="906" refid="struct_i2_s___params___1a65cae355ed8dc3d8eb46b7bb356a9f40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>I2S_PhaseType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a65cae355ed8dc3d8eb46b7bb356a9f40" kindref="member">phaseType</ref>;</highlight></codeline>
<codeline lineno="913" refid="struct_i2_s___params___1a2a8ccb59f26ff43303ebea9d4c9109db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a2a8ccb59f26ff43303ebea9d4c9109db" kindref="member">fixedBufferLength</ref>;</highlight></codeline>
<codeline lineno="917" refid="struct_i2_s___params___1af489cbb683b64e99838d3dd59b8b6b70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1af489cbb683b64e99838d3dd59b8b6b70" kindref="member">startUpDelay</ref>;</highlight></codeline>
<codeline lineno="920" refid="struct_i2_s___params___1a0bd8fe343f240970af78ad9a941285c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a0bd8fe343f240970af78ad9a941285c5" kindref="member">MCLKDivider</ref>;</highlight></codeline>
<codeline lineno="923" refid="struct_i2_s___params___1a9da18ece35f03dfbf5a68667f3587240" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a9da18ece35f03dfbf5a68667f3587240" kindref="member">samplingFrequency</ref>;</highlight></codeline>
<codeline lineno="929" refid="struct_i2_s___params___1abcd538ba2de411afbbfcdbb6278d08f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1abcd538ba2de411afbbfcdbb6278d08f8" kindref="member">readCallback</ref>;</highlight></codeline>
<codeline lineno="932" refid="struct_i2_s___params___1a4392adb6b38a71d18a40f4383d90529d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a4392adb6b38a71d18a40f4383d90529d" kindref="member">writeCallback</ref>;</highlight></codeline>
<codeline lineno="935" refid="struct_i2_s___params___1a72fc424dd561ba232346711b4b15a570" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_i2_s_8h_1a011a6a344bae2163e24b811e75c76fde" kindref="member">I2S_Callback</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_i2_s___params___1a72fc424dd561ba232346711b4b15a570" kindref="member">errorCallback</ref>;</highlight></codeline>
<codeline lineno="938" refid="struct_i2_s___params___1a67b114c9e4dc215184db375076b5c10f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_s___params___1a67b114c9e4dc215184db375076b5c10f" kindref="member">custom</ref>;</highlight></codeline>
<codeline lineno="940"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a7f4e84de95edef54fd2415eaa3f62022" kindref="member">I2S_Params</ref>;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_i2_s___params__" kindref="compound">I2S_Params</ref><sp/><ref refid="_i2_s_8h_1a3854e487af0042986ad755b9517ff24c" kindref="member">I2S_defaultParams</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="959" refid="struct_i2_s___config__" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_i2_s___config__" kindref="compound">I2S_Config_</ref><sp/>{</highlight></codeline>
<codeline lineno="961" refid="struct_i2_s___config___1a932c69ee3828da7ab143a571118521b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_s___config___1a932c69ee3828da7ab143a571118521b1" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="964" refid="struct_i2_s___config___1a95ba4b746375e69ef43e51cc5c8b966a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="struct_i2_s___config___1a95ba4b746375e69ef43e51cc5c8b966a" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}<sp/><ref refid="_i2_s_8h_1a519615f3b1ef24ac6c1f952539dbf6d4" kindref="member">I2S_Config</ref>;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a111a6b44f868cf90f7b25ced9f22ae1b" kindref="member">I2S_close</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a79e8fdf40ee80c49b2cac09a3e428a82" kindref="member">I2S_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>I2S_Handle<sp/><ref refid="_i2_s_8h_1a49305a04152a6fb37a7afceabca642eb" kindref="member">I2S_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_i2_s___params__" kindref="compound">I2S_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a961c116273a6e8d4581278b2666f13b5" kindref="member">I2S_Params_init</ref>(<ref refid="struct_i2_s___params__" kindref="compound">I2S_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a6f45de7e62ff3b345dbd22a1e317e8b0" kindref="member">I2S_Transaction_init</ref>(<ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction</ref><sp/>*transaction);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a3f18edea4f87b8c16b0fa5ed60a02082" kindref="member">I2S_setReadQueueHead</ref>(I2S_Handle<sp/>handle,<sp/><ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction</ref><sp/>*transaction);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a85c5b6f87590e1db5459c3be8d83993f" kindref="member">I2S_setWriteQueueHead</ref>(I2S_Handle<sp/>handle,<sp/><ref refid="struct_i2_s___transaction__" kindref="compound">I2S_Transaction</ref><sp/>*transaction);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a3fd30c0f3e1d047df949d8a00260b2e5" kindref="member">I2S_startClocks</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a3c929c2811ba58180ef57abbb33d3ec5" kindref="member">I2S_stopClocks</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a4631dbd7e6b7480a95c976d03aa69e0f" kindref="member">I2S_startRead</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a77a9ed563af3d038541d14f14901ab30" kindref="member">I2S_startWrite</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1ab97bed409bc639d5c7a5e847c5166ab0" kindref="member">I2S_stopRead</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_i2_s_8h_1a19039189f3d38c849aa8c55008409f31" kindref="member">I2S_stopWrite</ref>(I2S_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_I2S__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/I2S.h"/>
  </compounddef>
</doxygen>
