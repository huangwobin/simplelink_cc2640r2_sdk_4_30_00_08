<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="_e_c_d_s_a_8h" kind="file" language="C++">
    <compoundname>ECDSA.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="_crypto_key_8h" local="no">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</includes>
    <includes refid="_e_c_c_params_8h" local="no">ti/drivers/cryptoutils/ecc/ECCParams.h</includes>
    <includedby refid="_e_c_d_s_a_c_c26_x2_8h" local="no">ECDSACC26X2.h</includedby>
    <incdepgraph>
      <node id="328">
        <label>stdbool.h</label>
      </node>
      <node id="331">
        <label>ti/drivers/cryptoutils/cryptokey/CryptoKey.h</label>
        <link refid="_crypto_key_8h"/>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
      </node>
      <node id="330">
        <label>stdint.h</label>
      </node>
      <node id="329">
        <label>stddef.h</label>
      </node>
      <node id="332">
        <label>ti/drivers/cryptoutils/ecc/ECCParams.h</label>
        <link refid="_e_c_c_params_8h"/>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
      </node>
      <node id="327">
        <label>ECDSA.h</label>
        <link refid="_e_c_d_s_a_8h"/>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="333">
        <label>ECDSA.h</label>
        <link refid="_e_c_d_s_a_8h"/>
        <childnode refid="334" relation="include">
        </childnode>
      </node>
      <node id="334">
        <label>ECDSACC26X2.h</label>
        <link refid="_e_c_d_s_a_c_c26_x2_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_e_c_d_s_a___config" prot="public">ECDSA_Config</innerclass>
    <innerclass refid="struct_e_c_d_s_a___operation_sign" prot="public">ECDSA_OperationSign</innerclass>
    <innerclass refid="struct_e_c_d_s_a___operation_verify" prot="public">ECDSA_OperationVerify</innerclass>
    <innerclass refid="union_e_c_d_s_a___operation" prot="public">ECDSA_Operation</innerclass>
    <innerclass refid="struct_e_c_d_s_a___params" prot="public">ECDSA_Params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_e_c_d_s_a_8h_1af0557cd1a241899dbe217ff6f36fffd3" prot="public" static="no">
        <name>ECDSA_STATUS_RESERVED</name>
        <initializer>(-32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Common ECDSA status code reservation offset. ECDSA driver implementations should offset status codes with ECDSA_STATUS_RESERVED growing negatively.</para><para>Example implementation specific status codes: <programlisting><codeline><highlight class="normal">#define<sp/>ECDSAXYZ_STATUS_ERROR0<sp/><sp/><sp/><sp/>ECDSA_STATUS_RESERVED<sp/>-<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ECDSAXYZ_STATUS_ERROR1<sp/><sp/><sp/><sp/>ECDSA_STATUS_RESERVED<sp/>-<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ECDSAXYZ_STATUS_ERROR2<sp/><sp/><sp/><sp/>ECDSA_STATUS_RESERVED<sp/>-<sp/>2</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="366" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a183cb58b608d3ddca2814118bc3e6d58" prot="public" static="no">
        <name>ECDSA_STATUS_SUCCESS</name>
        <initializer>(0)</initializer>
        <briefdescription>
<para>Successful status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return ECDSA_STATUS_SUCCESS if the function was executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="374" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1af9e7be7d0379e85deb66de69bcc801f2" prot="public" static="no">
        <name>ECDSA_STATUS_ERROR</name>
        <initializer>(-1)</initializer>
        <briefdescription>
<para>Generic error status code. </para>        </briefdescription>
        <detaileddescription>
<para>Functions return ECDSA_STATUS_ERROR if the function was not executed successfully. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="382" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a10c2305f3aad581623a9828b116b6418" prot="public" static="no">
        <name>ECDSA_STATUS_RESOURCE_UNAVAILABLE</name>
        <initializer>(-2)</initializer>
        <briefdescription>
<para>An error status code returned if the hardware or software resource is currently unavailable. </para>        </briefdescription>
        <detaileddescription>
<para>ECDSA driver implementations may have hardware or software limitations on how many clients can simultaneously perform operations. This status code is returned if the mutual exclusion mechanism signals that an operation cannot currently be performed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="392" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1af8e62a453a17a2259dc7d90cdffa1027" prot="public" static="no">
        <name>ECDSA_STATUS_INVALID_PMSN</name>
        <initializer>(-3)</initializer>
        <briefdescription>
<para>The PMSN passed into the the call is invalid. </para>        </briefdescription>
        <detaileddescription>
<para>PMSNs must be integers in the interval [1, n - 1], where n is the order of the curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="400" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a7f28203b6d117f448e07f6ca9a76fb9b" prot="public" static="no">
        <name>ECDSA_STATUS_R_LARGER_THAN_ORDER</name>
        <initializer>(-4)</initializer>
        <briefdescription>
<para>The r value passed in is larger than the order of the curve. </para>        </briefdescription>
        <detaileddescription>
<para>Signature components (r and s) must be integers in the interval [1, n - 1], where n is the order of the curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="408" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1af49a1701c4762053d1c5bd4f5013f1d2" prot="public" static="no">
        <name>ECDSA_STATUS_S_LARGER_THAN_ORDER</name>
        <initializer>(-5)</initializer>
        <briefdescription>
<para>The s value passed in is larger than the order of the curve. </para>        </briefdescription>
        <detaileddescription>
<para>Signature components (r and s) must be integers in the interval [1, n - 1], where n is the order of the curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="416" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a0b7af7614f3a3f4d318e29f629968524" prot="public" static="no">
        <name>ECDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE</name>
        <initializer>(-6)</initializer>
        <briefdescription>
<para>The public key of the other party does not lie upon the curve. </para>        </briefdescription>
        <detaileddescription>
<para>The public key received from the other party does not lie upon the agreed upon curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="424" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a6759d42de4b04816b814b989ca8e42ab" prot="public" static="no">
        <name>ECDSA_STATUS_PUBLIC_KEY_LARGER_THAN_PRIME</name>
        <initializer>(-7)</initializer>
        <briefdescription>
<para>A coordinate of the public key of the other party is too large. </para>        </briefdescription>
        <detaileddescription>
<para>A coordinate of the public key received from the other party is larger than the prime of the curve. This implies that the point was not correctly generated on that curve. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="433" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1adc0537d9a7af71de05125d7a7abbe578" prot="public" static="no">
        <name>ECDSA_STATUS_POINT_AT_INFINITY</name>
        <initializer>(-8)</initializer>
        <briefdescription>
<para>The public key to verify against is the point at infinity. </para>        </briefdescription>
        <detaileddescription>
<para>The point at infinity is not a valid input. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="440" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_e_c_d_s_a_8h_1a63a2a564cbd3c0f004c8829d95b40b62" prot="public" static="no">
        <name>ECDSA_STATUS_CANCELED</name>
        <initializer>(-9)</initializer>
        <briefdescription>
<para>The ongoing operation was canceled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="445" column="9" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341" prot="public" static="no">
        <name>ECDSA_ReturnBehavior</name>
        <enumvalue id="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a12caa37a0d66bfabe52862dec969dd6e" prot="public">
          <name>ECDSA_RETURN_BEHAVIOR_CALLBACK</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will return immediately while the ECDSA operation goes on in the background. The registered callback function is called after the operation completes. The context the callback function is called (task, HWI, SWI) is implementation-dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a2bb6b8792bfa1d4dca40c458d008d92b" prot="public">
          <name>ECDSA_RETURN_BEHAVIOR_BLOCKING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will block while ECDSA operation goes on in the background. ECDSA operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341aa0384662e30a5de0ab321cdef21f1b4a" prot="public">
          <name>ECDSA_RETURN_BEHAVIOR_POLLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The function call will continuously poll a flag while ECDSA operation goes on in the background. ECDSA operation results are available after the function returns. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>The way in which ECDSA function calls return after performing an encryption + authentication or decryption + verification operation. </para>        </briefdescription>
        <detaileddescription>
<para>Not all ECDSA operations exhibit the specified return behavor. Functions that do not require significant computation and cannot offload that computation to a background thread behave like regular functions. Which functions exhibit the specfied return behavior is implementation dependent. Specifically, a software-backed implementation run on the same CPU as the application will emulate the return behavior while not actually offloading the computation to the background thread.</para><para>ECDSA functions exhibiting the specified return behavior have restrictions on the context from which they may be called.</para><para><table rows="4" cols="4"><row>
<entry thead="yes"><para></para></entry><entry thead="yes"><para>Task </para></entry><entry thead="yes"><para>Hwi </para></entry><entry thead="yes"><para>Swi  </para></entry></row>
<row>
<entry thead="no"><para>ECDSA_RETURN_BEHAVIOR_CALLBACK </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
<row>
<entry thead="no"><para>ECDSA_RETURN_BEHAVIOR_BLOCKING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>ECDSA_RETURN_BEHAVIOR_POLLING </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry><entry thead="no"><para>X </para></entry></row>
</table>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="473" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="473" bodyend="488"/>
      </memberdef>
      <memberdef kind="enum" id="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9" prot="public" static="no">
        <name>ECDSA_OperationType</name>
        <enumvalue id="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9ac1fb160e151a4c8adbf40e6a6cf94ff3" prot="public">
          <name>ECDSA_OPERATION_TYPE_SIGN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9abb42383a7909a4aadd941cfe98136341" prot="public">
          <name>ECDSA_OPERATION_TYPE_VERIFY</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum for the operation types supported by the driver. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="570" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="570" bodyend="573"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" prot="public" static="no">
        <type>struct <ref refid="struct_e_c_d_s_a___config" kindref="compound">ECDSA_Config</ref> *</type>
        <definition>typedef struct ECDSA_Config* ECDSA_Handle</definition>
        <argsstring></argsstring>
        <name>ECDSA_Handle</name>
        <briefdescription>
<para>A handle that is returned from an <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="450" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_e_c_d_s_a_8h_1a45a1d41d2101d26df62f3e4ed78f08fa" prot="public" static="no">
        <type>struct <ref refid="struct_e_c_d_s_a___config" kindref="compound">ECDSA_Config</ref></type>
        <definition>typedef struct ECDSA_Config  ECDSA_Config</definition>
        <argsstring></argsstring>
        <name>ECDSA_Config</name>
        <briefdescription>
<para>ECDSA Global configuration. </para>        </briefdescription>
        <detaileddescription>
<para>The <ref refid="struct_e_c_d_s_a___config" kindref="compound">ECDSA_Config</ref> structure contains a set of pointers used to characterize the ECDSA driver implementation.</para><para>This structure needs to be defined before calling <ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init()</ref> and it must not be changed thereafter.</para><para><simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_e_c_d_s_a_8h_1a2969615c2ad61fa703031658001791a1" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* ECDSA_CallbackFxn) (ECDSA_Handle handle, int_fast16_t returnStatus, ECDSA_Operation operation, ECDSA_OperationType operationType)</definition>
        <argsstring>)(ECDSA_Handle handle, int_fast16_t returnStatus, ECDSA_Operation operation, ECDSA_OperationType operationType)</argsstring>
        <name>ECDSA_CallbackFxn</name>
        <briefdescription>
<para>The definition of a callback function used by the ECDSA driver when used in <ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a12caa37a0d66bfabe52862dec969dd6e" kindref="member">ECDSA_RETURN_BEHAVIOR_CALLBACK</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the client that started the ECDSA operation.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returnStatus</parametername>
</parameternamelist>
<parameterdescription>
<para>The result of the ECDSA operation. May contain an error code if the result is the point at infinity for example.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A union of pointers to operation structs. Only one type of pointer is valid per call to the callback function. Which type is currently valid is determined by /c operationType. The union allows easier access to the struct&apos;s fields without the need to typecase the result.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operationType</parametername>
</parameternamelist>
<parameterdescription>
<para>This parameter determined which operation the callback refers to and which type to access through /c operation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="593" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" bodystart="593" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_init</definition>
        <argsstring>(void)</argsstring>
        <name>ECDSA_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This function initializes the ECDSA module. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>The ECDSA_config structure must exist and be persistent before this function can be called. This function must also be called before any other ECDSA driver APIs. This function call does not modify any peripheral registers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1afb8b4f22218005bddbed06ead6166bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_close</definition>
        <argsstring>(ECDSA_Handle handle)</argsstring>
        <name>ECDSA_close</name>
        <param>
          <type><ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Function to close an ECDSA peripheral specified by the ECDSA handle. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> has to be called first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ECDSA handle returned from <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref></type>
        <definition>ECDSA_Handle ECDSA_open</definition>
        <argsstring>(uint_least8_t index, ECDSA_Params *params)</argsstring>
        <name>ECDSA_open</name>
        <param>
          <type>uint_least8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>This function opens a given ECDSA peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>ECDSA controller has been initialized using <ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical peripheral number for the ECDSA indexed into the ECDSA_config table</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an parameter block, if NULL it will use default values.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ECDSA_Handle on success or a NULL on an error or if it has been opened already.</para></simplesect>
<simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1afb8b4f22218005bddbed06ead6166bb8" kindref="member">ECDSA_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1ac8a50e673e908088f643396f7f898f84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_Params_init</definition>
        <argsstring>(ECDSA_Params *params)</argsstring>
        <name>ECDSA_Params_init</name>
        <param>
          <type><ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Function to initialize the <ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are: returnBehavior = ECDSA_RETURN_BEHAVIOR_BLOCKING callbackFxn = NULL timeout = SemaphoreP_WAIT_FOREVER custom = NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a483eed05a93c583df6599b6a07721a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_OperationSign_init</definition>
        <argsstring>(ECDSA_OperationSign *operation)</argsstring>
        <name>ECDSA_OperationSign_init</name>
        <param>
          <type><ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to <ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a398f078544d6c5506027a7dd6608db9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECDSA_OperationVerify_init</definition>
        <argsstring>(ECDSA_OperationVerify *operation)</argsstring>
        <name>ECDSA_OperationVerify_init</name>
        <param>
          <type><ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Function to initialize an <ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> struct to its defaults. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation</parametername>
</parameternamelist>
<parameterdescription>
<para>An pointer to <ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> structure for initialization</para></parameterdescription>
</parameteritem>
</parameterlist>
Defaults values are all zeros. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a3ad7bc590603181380f2f8d4c01e09f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ECDSA_sign</definition>
        <argsstring>(ECDSA_Handle handle, ECDSA_OperationSign *operation)</argsstring>
        <name>ECDSA_sign</name>
        <param>
          <type><ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Signs a hashed message. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="_e_c_d_s_a_8h_1a3ad7bc590603181380f2f8d4c01e09f3" kindref="member">ECDSA_sign()</ref> generates a signature (<computeroutput>r</computeroutput>, <computeroutput>s</computeroutput>) of a <computeroutput>hash</computeroutput> of a message.</para><para><simplesect kind="pre"><para><ref refid="_e_c_d_s_a_8h_1a483eed05a93c583df6599b6a07721a70" kindref="member">ECDSA_OperationSign_init()</ref> must be called on <computeroutput>operation</computeroutput> first. The driver must have been opened by calling <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ECDSA handle returned from <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct containing the pointers to the buffers necessary to perform the operation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1a474b05788ac25fb7ba032490bb418b96" kindref="member">ECDSA_verify()</ref></para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a183cb58b608d3ddca2814118bc3e6d58" kindref="member">ECDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1af9e7be7d0379e85deb66de69bcc801f2" kindref="member">ECDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a10c2305f3aad581623a9828b116b6418" kindref="member">ECDSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a63a2a564cbd3c0f004c8829d95b40b62" kindref="member">ECDSA_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1af8e62a453a17a2259dc7d90cdffa1027" kindref="member">ECDSA_STATUS_INVALID_PMSN</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The PMSN passed into the the call is invalid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a474b05788ac25fb7ba032490bb418b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ECDSA_verify</definition>
        <argsstring>(ECDSA_Handle handle, ECDSA_OperationVerify *operation)</argsstring>
        <name>ECDSA_verify</name>
        <param>
          <type><ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref> *</type>
          <declname>operation</declname>
        </param>
        <briefdescription>
<para>Verifies a received signature matches a hash and public key. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="_e_c_d_s_a_8h_1a398f078544d6c5506027a7dd6608db9a" kindref="member">ECDSA_OperationVerify_init()</ref> must be called on <computeroutput>operation</computeroutput> first. The driver must have been opened by calling <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> first.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An ECDSA handle returned from <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operation</parametername>
</parameternamelist>
<parameterdescription>
<para>A struct containing the pointers to the buffers necessary to perform the operation</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_e_c_d_s_a_8h_1a3ad7bc590603181380f2f8d4c01e09f3" kindref="member">ECDSA_sign()</ref></para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a183cb58b608d3ddca2814118bc3e6d58" kindref="member">ECDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation succeeded. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1af9e7be7d0379e85deb66de69bcc801f2" kindref="member">ECDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation failed. This is the return status if the signature did not match. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a10c2305f3aad581623a9828b116b6418" kindref="member">ECDSA_STATUS_RESOURCE_UNAVAILABLE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The required hardware resource was not available. Try again later. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a63a2a564cbd3c0f004c8829d95b40b62" kindref="member">ECDSA_STATUS_CANCELED</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a7f28203b6d117f448e07f6ca9a76fb9b" kindref="member">ECDSA_STATUS_R_LARGER_THAN_ORDER</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The r value passed in is larger than the order of the curve. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1af49a1701c4762053d1c5bd4f5013f1d2" kindref="member">ECDSA_STATUS_S_LARGER_THAN_ORDER</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The s value passed in is larger than the order of the curve. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a0b7af7614f3a3f4d318e29f629968524" kindref="member">ECDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The public key of the other party does not lie upon the curve. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a6759d42de4b04816b814b989ca8e42ab" kindref="member">ECDSA_STATUS_PUBLIC_KEY_LARGER_THAN_PRIME</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>One of the public key coordinates is larger the the curve&apos;s prime. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1adc0537d9a7af71de05125d7a7abbe578" kindref="member">ECDSA_STATUS_POINT_AT_INFINITY</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The public key to verify against is the point at infinity. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_e_c_d_s_a_8h_1a2b0e1e35912d647f946073b807cf205b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int_fast16_t</type>
        <definition>int_fast16_t ECDSA_cancelOperation</definition>
        <argsstring>(ECDSA_Handle handle)</argsstring>
        <name>ECDSA_cancelOperation</name>
        <param>
          <type><ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Cancels an ongoing ECDSA operation. </para>        </briefdescription>
        <detaileddescription>
<para>Asynchronously cancels an ECDSA operation. Only available when using ECDSA_RETURN_BEHAVIOR_CALLBACK or ECDSA_RETURN_BEHAVIOR_BLOCKING. The operation will terminate as though an error occured. The return status code of the operation will be ECDSA_STATUS_CANCELED.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle of the operation to cancel</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1a183cb58b608d3ddca2814118bc3e6d58" kindref="member">ECDSA_STATUS_SUCCESS</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was canceled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="_e_c_d_s_a_8h_1af9e7be7d0379e85deb66de69bcc801f2" kindref="member">ECDSA_STATUS_ERROR</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was not canceled. There may be no operation to cancel. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h" line="751" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>TI Driver for Elliptic Curve Digital Signature Algorithm. </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para><anchor id="_e_c_d_s_a_8h_1ti_drivers_ECDSA_Overview"/><heading level="1">Overview</heading>
</para><para>The Elliptic Curve Digital Signature Algorithm (ECDSA) is a message authentication scheme between two parties based on operation on elliptic curves over finite fields.</para><para>Signing a message with ECDSA proves to the recipient that the sender of the message is in possession of the private key corresponding to the transmitted public key used during verification. For most practical systems, this ensures message authentication and integrity.</para><para><heading level="1">Steps involved</heading>
</para><para><itemizedlist>
<listitem><para>The sender hashes the message they wish to authenticate and truncates it to the length of the curve parameters of the elliptic curve used by both parties.</para></listitem><listitem><para>The sender generates a per-message secret number (PMSN) where 0 &lt; PMSN &lt; N. This number must (!) be unique for each message and be kept secret. If a PMSN is reused to authenticate more than one message, the secret key of the sender can be derived from these two messages and signatures!</para></listitem><listitem><para>The sender generates r and s where 0 &lt; r, s &lt; N. These two integers constitute the actual signature of the message.</para></listitem><listitem><para>The sender transmits the message, r, s, and the public key to the recipient.</para></listitem><listitem><para>The recipient calculates the hash of the message using an agreed upon hash function and truncates it to the length of the curve parameters of the elliptic curve used by both parties</para></listitem><listitem><para>The recipient uses the hash, s, and the sender&apos;s public key to recalculate r.</para></listitem><listitem><para>The recipient accepts the signature if the received and calculated r match. Otherwise, they reject the signature.</para></listitem></itemizedlist>
</para><para><anchor id="_e_c_d_s_a_8h_1ti_drivers_ECDSA_Usage"/><heading level="1">Usage</heading>
</para><para><heading level="2">Before starting an ECDSA operation</heading>
</para><para>Before starting an ECDSA operation, the application must do the following:<itemizedlist>
<listitem><para>Call <ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init()</ref> to initialize the driver</para></listitem><listitem><para>Call <ref refid="_e_c_d_s_a_8h_1ac8a50e673e908088f643396f7f898f84" kindref="member">ECDSA_Params_init()</ref> to initialize the <ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> to default values.</para></listitem><listitem><para>Modify the <ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref> as desired</para></listitem><listitem><para>Call <ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open()</ref> to open an instance of the driver</para></listitem></itemizedlist>
</para><para><heading level="2">Signing a message</heading>
</para><para>To sign a message using an agreed upon hash function and elliptic curve, the application must do the following:<itemizedlist>
<listitem><para>Initialize an <ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref> struct by calling <ref refid="_e_c_d_s_a_8h_1a483eed05a93c583df6599b6a07721a70" kindref="member">ECDSA_OperationSign_init()</ref>.</para></listitem><listitem><para>Generate the keying material for the private key. This keying material must be an integer in the interval [1, n - 1], where n is the order of the curve. It should be stored in an array with the least significant byte of the integer hex representation stored in the lowest address of the array (little-endian). The array should be the same length as the curve parameters of the curve used. The driver can be configured to validate public and private keys against the provided curve.</para></listitem><listitem><para>Initialize the private key CryptoKey. CryptoKeys are opaque datastructures and representations of keying material and its storage. Depending on how the keying material is stored (RAM or flash, key store, key blob), the CryptoKey must be initialized differently. The ECDSA API can handle all types of CryptoKey. However, not all device-specific implementions support all types of CryptoKey. Devices without a key store will not support CryptoKeys with keying material stored in a key store for example. All devices support plaintext CryptoKeys.</para></listitem><listitem><para>Initialize the pmsn CryptoKey. The PMSN itself should be a 0-padded integer of the same length as the curve parameters of the agreed upon curve and where 0 &lt; PMSN &lt; N. The driver will enforce this restriction and reject invalid PMSNs.</para></listitem><listitem><para>Hash the message using a previously agreed upon hash function and truncate the hash to the length of the curve parameters of the agreed upon curve.</para></listitem><listitem><para>Call <ref refid="_e_c_d_s_a_8h_1a3ad7bc590603181380f2f8d4c01e09f3" kindref="member">ECDSA_sign()</ref>. The r and s vectors will be written to the buffers provided in the function call. Ensure the return value is ECDSA_STATUS_SUCCESS.</para></listitem></itemizedlist>
</para><para><heading level="2">Verifying a message</heading>
</para><para>After receiving the message, public key, r, and s, the application should do the following to verify the signature:<itemizedlist>
<listitem><para>Initialize an <ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref> struct by calling <ref refid="_e_c_d_s_a_8h_1a398f078544d6c5506027a7dd6608db9a" kindref="member">ECDSA_OperationVerify_init()</ref>.</para></listitem><listitem><para>Hash the message using a previously agreed upon hash function and truncate the hash to the length of the curve parameters of the agreed upon curve.</para></listitem><listitem><para>Initialize a CryptoKey as public key with the keying material received from the other party.</para></listitem><listitem><para>Call <ref refid="_e_c_d_s_a_8h_1a474b05788ac25fb7ba032490bb418b96" kindref="member">ECDSA_verify()</ref>. Ensure the return value is ECDSA_STATUS_SUCCESS. The driver will validate the received public key against the provided curve.</para></listitem></itemizedlist>
</para><para><heading level="2">General usage</heading>
</para><para>The API expects elliptic curves as defined in <ref refid="_e_c_c_params_8h" kindref="compound">ti/drivers/cryptoutils/ecc/ECCParams.h</ref>. Several commonly used curves are provided. Check the device-specific ECDSA documentation for curve type (short Weierstrass, Montgomery, Edwards) support for your device. ECDSA support for a curve type on a device does not imply curve-type support for other ECC schemes.</para><para>Public keys and shared secrets are points on an elliptic curve. These points can be expressed in several ways. The most common one is in affine coordinates as an X,Y pair. This API uses points expressed in affine coordinates. The point is stored as a concatenated array of X followed by Y in a location described by its CryptoKey.</para><para>This API accepts and returns the keying material of public keys according to the following table:</para><para><table rows="4" cols="3"><row>
<entry thead="yes"><para>Curve Type </para></entry><entry thead="yes"><para>Keying Material Array </para></entry><entry thead="yes"><para>Array Length  </para></entry></row>
<row>
<entry thead="no"><para>Short Weierstrass </para></entry><entry thead="no"><para>[X, Y] </para></entry><entry thead="no"><para>2 * Curve Param Length </para></entry></row>
<row>
<entry thead="no"><para>Montgomery </para></entry><entry thead="no"><para>[X, Y] </para></entry><entry thead="no"><para>2 * Curve Param Length </para></entry></row>
<row>
<entry thead="no"><para>Edwards </para></entry><entry thead="no"><para>[X, Y] </para></entry><entry thead="no"><para>2 * Curve Param Length </para></entry></row>
</table>
<anchor id="_e_c_d_s_a_8h_1ti_drivers_ECDSA_Synopsis"/><heading level="2">Synopsis</heading>
</para><para><anchor id="_e_c_d_s_a_8h_1ti_drivers_ECDSA_Synopsis_Code"/><programlisting><codeline><highlight class="normal">//<sp/>Import<sp/>ECDSA<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal">ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>myPrivateKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;myPrivateKey,<sp/>myPrivateKeyingMaterial,<sp/>sizeof(myPrivateKeyingMaterial));</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;pmsnKey,<sp/>pmsn,<sp/>sizeof(pmsn));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">ECDSA_OperationSign_init(&amp;operationSign);</highlight></codeline>
<codeline><highlight class="normal">operationSign.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline><highlight class="normal">operationSign.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.pmsn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pmsnKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline><highlight class="normal">operationSign.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">operationSign.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>the<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>ECDSA_sign(ecdsaHandle,<sp/>&amp;operationSign);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;theirPublicKey,<sp/>theirPublicKeyingMaterial,<sp/>sizeof(theirPublicKeyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline><highlight class="normal">operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.theirPublicKey<sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>the<sp/>keying<sp/>material<sp/>for<sp/>myPublicKey<sp/>and<sp/>store<sp/>it<sp/>in<sp/>myPublicKeyingMaterial</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>ECDSA_verify(ecdsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Close<sp/>the<sp/>driver</highlight></codeline>
<codeline><highlight class="normal">ECDSA_close(ecdsaHandle);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@anchor<sp/>ti_drivers_ECDSA_Examples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Examples<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>ECDSA<sp/>sign<sp/>with<sp/>plaintext<sp/>CryotoKeys<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>vector<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>NIST<sp/>ST<sp/>toolkit<sp/>examples<sp/>from<sp/>ECDSA_Prime.pdf</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>myPrivateKeyingMaterial[32]<sp/>=<sp/>{0x96,<sp/>0xBF,<sp/>0x85,<sp/>0x49,<sp/>0xC3,<sp/>0x79,<sp/>0xE4,<sp/>0x04,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xED,<sp/>0xA1,<sp/>0x08,<sp/>0xA5,<sp/>0x51,<sp/>0xF8,<sp/>0x36,<sp/>0x23,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x12,<sp/>0xD8,<sp/>0xD1,<sp/>0xB2,<sp/>0xA5,<sp/>0xFA,<sp/>0x57,<sp/>0x06,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE2,<sp/>0xCC,<sp/>0x22,<sp/>0x5C,<sp/>0xF6,<sp/>0xF9,<sp/>0x77,<sp/>0xC4};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>messageHashSHA256[32]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0xC4,<sp/>0xA8,<sp/>0xC8,<sp/>0x99,<sp/>0x28,<sp/>0xCF,<sp/>0x80,<sp/>0xB6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE4,<sp/>0x42,<sp/>0xD5,<sp/>0xBD,<sp/>0x28,<sp/>0x4D,<sp/>0xE3,<sp/>0xFD,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3A,<sp/>0x13,<sp/>0xD8,<sp/>0x65,<sp/>0x0C,<sp/>0x41,<sp/>0x1C,<sp/>0x21,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x48,<sp/>0x95,<sp/>0x79,<sp/>0x2A,<sp/>0xA1,<sp/>0x41,<sp/>0x1A,<sp/>0xA4};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>pmsn[32]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0xAE,<sp/>0x50,<sp/>0xEE,<sp/>0xFA,<sp/>0x27,<sp/>0xB4,<sp/>0xDB,<sp/>0x14,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9F,<sp/>0xE1,<sp/>0xFB,<sp/>0x04,<sp/>0xF2,<sp/>0x4B,<sp/>0x50,<sp/>0x58,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x91,<sp/>0xE3,<sp/>0xAC,<sp/>0x4D,<sp/>0x2A,<sp/>0x5D,<sp/>0x43,<sp/>0xAA,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCA,<sp/>0xC8,<sp/>0x7F,<sp/>0x79,<sp/>0x52,<sp/>0x7E,<sp/>0x1A,<sp/>0x7A};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>r[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>s[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>pmsnKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDSA_Handle<sp/>ecdsaHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>operationResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal">ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>myPrivateKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;myPrivateKey,<sp/>myPrivateKeyingMaterial,<sp/>sizeof(myPrivateKeyingMaterial));</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;pmsnKey,<sp/>pmsn,<sp/>sizeof(pmsn));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">ECDSA_OperationSign_init(&amp;operationSign);</highlight></codeline>
<codeline><highlight class="normal">operationSign.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline><highlight class="normal">operationSign.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.pmsn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pmsnKey;</highlight></codeline>
<codeline><highlight class="normal">operationSign.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline><highlight class="normal">operationSign.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">operationSign.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>the<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>ECDSA_sign(ecdsaHandle,<sp/>&amp;operationSign);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>ECDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Send<sp/>out<sp/>signature</highlight></codeline>
<codeline><highlight class="normal">//<sp/>r<sp/>should<sp/>be<sp/><sp/><sp/>0x4F,<sp/>0x10,<sp/>0x46,<sp/>0xCA,<sp/>0x9A,<sp/>0xB6,<sp/>0x25,<sp/>0x73,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF5,<sp/>0x3E,<sp/>0x0B,<sp/>0x1F,<sp/>0x6F,<sp/>0x31,<sp/>0x4C,<sp/>0xE4,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x0F,<sp/>0x50,<sp/>0xB1,<sp/>0xF3,<sp/>0xD1,<sp/>0x65,<sp/>0xFF,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x65,<sp/>0x41,<sp/>0x7F,<sp/>0xD0,<sp/>0x76,<sp/>0xF5,<sp/>0x42,<sp/>0x2B</highlight></codeline>
<codeline><highlight class="normal">//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>s<sp/>should<sp/>be<sp/><sp/><sp/>0xF1,<sp/>0xFA,<sp/>0x63,<sp/>0x6B,<sp/>0xDB,<sp/>0x9B,<sp/>0x32,<sp/>0x4B,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2C,<sp/>0x26,<sp/>0x9D,<sp/>0xE6,<sp/>0x6F,<sp/>0x88,<sp/>0xC1,<sp/>0x98,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x2A,<sp/>0x50,<sp/>0x89,<sp/>0x3A,<sp/>0x99,<sp/>0x3A,<sp/>0x3E,</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCD,<sp/>0x92,<sp/>0x63,<sp/>0x2D,<sp/>0x12,<sp/>0xC2,<sp/>0x42,<sp/>0xDC</highlight></codeline>
</programlisting></para><para><heading level="2">ECDSA verify with plaintext CryotoKeys</heading>
</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>vector<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>NIST<sp/>ST<sp/>toolkit<sp/>examples<sp/>from<sp/>ECDSA_Prime.pdf</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>theirPublicKeyingMaterial[64]<sp/>=<sp/><sp/>{0x19,<sp/>0x7A,<sp/>0xBC,<sp/>0x89,<sp/>0x08,<sp/>0xCD,<sp/>0x01,<sp/>0x82,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA3,<sp/>0xA2,<sp/>0x9E,<sp/>0x1E,<sp/>0xAD,<sp/>0xA0,<sp/>0xB3,<sp/>0x62,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1C,<sp/>0xBA,<sp/>0x98,<sp/>0x47,<sp/>0x73,<sp/>0x8C,<sp/>0xDC,<sp/>0xF1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD3,<sp/>0xBA,<sp/>0x94,<sp/>0xFE,<sp/>0xFD,<sp/>0x8A,<sp/>0xE0,<sp/>0xB7,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x09,<sp/>0x5E,<sp/>0xCC,<sp/>0x06,<sp/>0xC6,<sp/>0xBB,<sp/>0x63,<sp/>0xB5,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x9E,<sp/>0x52,<sp/>0x43,<sp/>0xAE,<sp/>0xC7,<sp/>0xAD,<sp/>0x63,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x90,<sp/>0x72,<sp/>0x28,<sp/>0x19,<sp/>0xE4,<sp/>0x26,<sp/>0xB2,<sp/>0x4B,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7A,<sp/>0xBF,<sp/>0x9D,<sp/>0x95,<sp/>0x47,<sp/>0xF7,<sp/>0x03,<sp/>0x36};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>messageHashSHA256[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xC4,<sp/>0xA8,<sp/>0xC8,<sp/>0x99,<sp/>0x28,<sp/>0xCF,<sp/>0x80,<sp/>0xB6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE4,<sp/>0x42,<sp/>0xD5,<sp/>0xBD,<sp/>0x28,<sp/>0x4D,<sp/>0xE3,<sp/>0xFD,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3A,<sp/>0x13,<sp/>0xD8,<sp/>0x65,<sp/>0x0C,<sp/>0x41,<sp/>0x1C,<sp/>0x21,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x48,<sp/>0x95,<sp/>0x79,<sp/>0x2A,<sp/>0xA1,<sp/>0x41,<sp/>0x1A,<sp/>0xA4};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>r[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x4F,<sp/>0x10,<sp/>0x46,<sp/>0xCA,<sp/>0x9A,<sp/>0xB6,<sp/>0x25,<sp/>0x73,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF5,<sp/>0x3E,<sp/>0x0B,<sp/>0x1F,<sp/>0x6F,<sp/>0x31,<sp/>0x4C,<sp/>0xE4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x0F,<sp/>0x50,<sp/>0xB1,<sp/>0xF3,<sp/>0xD1,<sp/>0x65,<sp/>0xFF,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x65,<sp/>0x41,<sp/>0x7F,<sp/>0xD0,<sp/>0x76,<sp/>0xF5,<sp/>0x42,<sp/>0x2B};</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>s[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xF1,<sp/>0xFA,<sp/>0x63,<sp/>0x6B,<sp/>0xDB,<sp/>0x9B,<sp/>0x32,<sp/>0x4B,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2C,<sp/>0x26,<sp/>0x9D,<sp/>0xE6,<sp/>0x6F,<sp/>0x88,<sp/>0xC1,<sp/>0x98,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x2A,<sp/>0x50,<sp/>0x89,<sp/>0x3A,<sp/>0x99,<sp/>0x3A,<sp/>0x3E,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCD,<sp/>0x92,<sp/>0x63,<sp/>0x2D,<sp/>0x12,<sp/>0xC2,<sp/>0x42,<sp/>0xDC};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CryptoKey<sp/>theirPublicKey;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDSA_Handle<sp/>ecdsaHandle;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int_fast16_t<sp/>operationResult;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDSA_OperationVerify<sp/>operationVerify;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal">ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline><highlight class="normal">CryptoKeyPlaintext_initKey(&amp;theirPublicKey,<sp/>theirPublicKeyingMaterial,<sp/>sizeof(theirPublicKeyingMaterial));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ECDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline><highlight class="normal">operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.theirPublicKey<sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">operationVerify.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Generate<sp/>the<sp/>keying<sp/>material<sp/>for<sp/>myPublicKey<sp/>and<sp/>store<sp/>it<sp/>in<sp/>myPublicKeyingMaterial</highlight></codeline>
<codeline><highlight class="normal">operationResult<sp/>=<sp/>ECDSA_verify(ecdsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(operationResult<sp/>!=<sp/>ECDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017-2019,<sp/>Texas<sp/>Instruments<sp/>Incorporated</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>*<sp/><sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Texas<sp/>Instruments<sp/>Incorporated<sp/>nor<sp/>the<sp/>names<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*!****************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@file<sp/>ECDSA.h</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>@brief<sp/>TI<sp/>Driver<sp/>for<sp/>Elliptic<sp/>Curve<sp/>Digital<sp/>Signature<sp/>Algorithm.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_ECDSA_Overview</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>#<sp/>Overview<sp/>#</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>The<sp/>Elliptic<sp/>Curve<sp/>Digital<sp/>Signature<sp/>Algorithm<sp/>(ECDSA)<sp/>is<sp/>a<sp/>message</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>authentication<sp/>scheme<sp/>between<sp/>two<sp/>parties<sp/>based<sp/>on<sp/>operation<sp/>on<sp/>elliptic</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>curves<sp/>over<sp/>finite<sp/>fields.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Signing<sp/>a<sp/>message<sp/>with<sp/>ECDSA<sp/>proves<sp/>to<sp/>the<sp/>recipient<sp/>that<sp/>the<sp/>sender<sp/>of</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>the<sp/>message<sp/>is<sp/>in<sp/>possession<sp/>of<sp/>the<sp/>private<sp/>key<sp/>corresponding<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>transmitted<sp/>public<sp/>key<sp/>used<sp/>during<sp/>verification.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>For<sp/>most<sp/>practical<sp/>systems,<sp/>this<sp/>ensures<sp/>message<sp/>authentication<sp/>and</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>integrity.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>#<sp/>Steps<sp/>involved<sp/>#</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>sender<sp/>hashes<sp/>the<sp/>message<sp/>they<sp/>wish<sp/>to<sp/>authenticate<sp/>and</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>truncates<sp/>it<sp/>to<sp/>the<sp/>length<sp/>of<sp/>the<sp/>curve<sp/>parameters<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>elliptic<sp/>curve<sp/>used<sp/>by<sp/>both<sp/>parties.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>sender<sp/>generates<sp/>a<sp/>per-message<sp/>secret<sp/>number<sp/>(PMSN)<sp/>where</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>0<sp/>&lt;<sp/>PMSN<sp/>&lt;<sp/>N.<sp/>This<sp/>number<sp/>must<sp/>(!)<sp/>be<sp/>unique<sp/>for<sp/>each<sp/>message<sp/>and<sp/>be</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>kept<sp/>secret.<sp/>If<sp/>a<sp/>PMSN<sp/>is<sp/>reused<sp/>to<sp/>authenticate<sp/>more<sp/>than<sp/>one<sp/>message,</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>secret<sp/>key<sp/>of<sp/>the<sp/>sender<sp/>can<sp/>be<sp/>derived<sp/>from<sp/>these<sp/>two<sp/>messages</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>and<sp/>signatures!</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>sender<sp/>generates<sp/>r<sp/>and<sp/>s<sp/>where<sp/>0<sp/>&lt;<sp/>r,<sp/>s<sp/>&lt;<sp/>N.<sp/>These<sp/>two<sp/>integers</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>constitute<sp/>the<sp/>actual<sp/>signature<sp/>of<sp/>the<sp/>message.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>sender<sp/>transmits<sp/>the<sp/>message,<sp/>r,<sp/>s,<sp/>and<sp/>the<sp/>public<sp/>key<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>recipient.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>recipient<sp/>calculates<sp/>the<sp/>hash<sp/>of<sp/>the<sp/>message<sp/>using<sp/>an<sp/>agreed</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>upon<sp/>hash<sp/>function<sp/>and<sp/>truncates<sp/>it<sp/>to<sp/>the<sp/>length<sp/>of<sp/>the<sp/>curve</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>parameters<sp/>of<sp/>the<sp/>elliptic<sp/>curve<sp/>used<sp/>by<sp/>both<sp/>parties</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>recipient<sp/>uses<sp/>the<sp/>hash,<sp/>s,<sp/>and<sp/>the<sp/>sender&apos;s<sp/>public<sp/>key<sp/>to</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>recalculate<sp/>r.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>The<sp/>recipient<sp/>accepts<sp/>the<sp/>signature<sp/>if<sp/>the<sp/>received<sp/>and<sp/>calculated<sp/>r</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>match.<sp/>Otherwise,<sp/>they<sp/>reject<sp/>the<sp/>signature.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_ECDSA_Usage</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>#<sp/>Usage<sp/>#</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>##<sp/>Before<sp/>starting<sp/>an<sp/>ECDSA<sp/>operation<sp/>#</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>Before<sp/>starting<sp/>an<sp/>ECDSA<sp/>operation,<sp/>the<sp/>application<sp/>must<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>ECDSA_init()<sp/>to<sp/>initialize<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>ECDSA_Params_init()<sp/>to<sp/>initialize<sp/>the<sp/>ECDSA_Params<sp/>to<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Modify<sp/>the<sp/>ECDSA_Params<sp/>as<sp/>desired</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Call<sp/>ECDSA_open()<sp/>to<sp/>open<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>##<sp/>Signing<sp/>a<sp/>message<sp/>#</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>To<sp/>sign<sp/>a<sp/>message<sp/>using<sp/>an<sp/>agreed<sp/>upon<sp/>hash<sp/>function<sp/>and<sp/>elliptic<sp/>curve,<sp/>the</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>application<sp/>must<sp/>do<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>an<sp/>ECDSA_OperationSign<sp/>struct<sp/>by<sp/>calling<sp/>ECDSA_OperationSign_init().</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Generate<sp/>the<sp/>keying<sp/>material<sp/>for<sp/>the<sp/>private<sp/>key.<sp/>This<sp/>keying<sp/>material<sp/>must</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>be<sp/>an<sp/>integer<sp/>in<sp/>the<sp/>interval<sp/>[1,<sp/>n<sp/>-<sp/>1],<sp/>where<sp/>n<sp/>is<sp/>the<sp/>order<sp/>of<sp/>the<sp/>curve.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>It<sp/>should<sp/>be<sp/>stored<sp/>in<sp/>an<sp/>array<sp/>with<sp/>the<sp/>least<sp/>significant<sp/>byte<sp/>of<sp/>the<sp/>integer</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>hex<sp/>representation<sp/>stored<sp/>in<sp/>the<sp/>lowest<sp/>address<sp/>of<sp/>the<sp/>array<sp/>(little-endian).</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>array<sp/>should<sp/>be<sp/>the<sp/>same<sp/>length<sp/>as<sp/>the<sp/>curve<sp/>parameters<sp/>of<sp/>the<sp/>curve<sp/>used.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>The<sp/>driver<sp/>can<sp/>be<sp/>configured<sp/>to<sp/>validate<sp/>public<sp/>and<sp/>private<sp/>keys<sp/>against<sp/>the</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>provided<sp/>curve.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>the<sp/>private<sp/>key<sp/>CryptoKey.<sp/>CryptoKeys<sp/>are<sp/>opaque<sp/>datastructures<sp/>and<sp/>representations</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>keying<sp/>material<sp/>and<sp/>its<sp/>storage.<sp/>Depending<sp/>on<sp/>how<sp/>the<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>is<sp/>stored<sp/>(RAM<sp/>or<sp/>flash,<sp/>key<sp/>store,<sp/>key<sp/>blob),<sp/>the<sp/>CryptoKey<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>initialized<sp/>differently.<sp/>The<sp/>ECDSA<sp/>API<sp/>can<sp/>handle<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>However,<sp/>not<sp/>all<sp/>device-specific<sp/>implementions<sp/>support<sp/>all<sp/>types<sp/>of<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>Devices<sp/>without<sp/>a<sp/>key<sp/>store<sp/>will<sp/>not<sp/>support<sp/>CryptoKeys<sp/>with<sp/>keying<sp/>material</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>stored<sp/>in<sp/>a<sp/>key<sp/>store<sp/>for<sp/>example.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>All<sp/>devices<sp/>support<sp/>plaintext<sp/>CryptoKeys.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>the<sp/>pmsn<sp/>CryptoKey.<sp/>The<sp/>PMSN<sp/>itself<sp/>should<sp/>be<sp/>a<sp/>0-padded<sp/>integer<sp/>of</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>same<sp/>length<sp/>as<sp/>the<sp/>curve<sp/>parameters<sp/>of<sp/>the<sp/>agreed<sp/>upon<sp/>curve<sp/>and</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>where<sp/>0<sp/>&lt;<sp/>PMSN<sp/>&lt;<sp/>N.<sp/>The<sp/>driver<sp/>will<sp/>enforce<sp/>this<sp/>restriction<sp/>and<sp/>reject<sp/>invalid</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>PMSNs.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Hash<sp/>the<sp/>message<sp/>using<sp/>a<sp/>previously<sp/>agreed<sp/>upon<sp/>hash<sp/>function<sp/>and<sp/>truncate</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>hash<sp/>to<sp/>the<sp/>length<sp/>of<sp/>the<sp/>curve<sp/>parameters<sp/>of<sp/>the<sp/>agreed<sp/>upon<sp/>curve.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Call<sp/><sp/>ECDSA_sign().<sp/>The<sp/>r<sp/>and<sp/>s<sp/>vectors<sp/>will<sp/>be<sp/>written<sp/>to<sp/>the<sp/>buffers</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>provided<sp/>in<sp/>the<sp/>function<sp/>call.<sp/>Ensure<sp/>the<sp/>return<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>ECDSA_STATUS_SUCCESS.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>##<sp/>Verifying<sp/>a<sp/>message<sp/>#</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>After<sp/>receiving<sp/>the<sp/>message,<sp/>public<sp/>key,<sp/>r,<sp/>and<sp/>s,<sp/>the<sp/>application<sp/>should</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>do<sp/>the<sp/>following<sp/>to<sp/>verify<sp/>the<sp/>signature:</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>an<sp/>ECDSA_OperationVerify<sp/>struct<sp/>by<sp/>calling<sp/>ECDSA_OperationVerify_init().</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Hash<sp/>the<sp/>message<sp/>using<sp/>a<sp/>previously<sp/>agreed<sp/>upon<sp/>hash<sp/>function<sp/>and<sp/>truncate</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>the<sp/>hash<sp/>to<sp/>the<sp/>length<sp/>of<sp/>the<sp/>curve<sp/>parameters<sp/>of<sp/>the<sp/>agreed<sp/>upon<sp/>curve.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Initialize<sp/>a<sp/>CryptoKey<sp/>as<sp/>public<sp/>key<sp/>with<sp/>the<sp/>keying<sp/>material<sp/>received<sp/>from<sp/>the<sp/>other</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>party.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Call<sp/>ECDSA_verify().<sp/>Ensure<sp/>the<sp/>return<sp/>value<sp/>is<sp/>ECDSA_STATUS_SUCCESS.<sp/>The</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>driver<sp/>will<sp/>validate<sp/>the<sp/>received<sp/>public<sp/>key<sp/>against<sp/>the<sp/>provided<sp/>curve.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>##<sp/>General<sp/>usage<sp/>#</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>The<sp/>API<sp/>expects<sp/>elliptic<sp/>curves<sp/>as<sp/>defined<sp/>in<sp/>ti/drivers/cryptoutils/ecc/ECCParams.h.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>Several<sp/>commonly<sp/>used<sp/>curves<sp/>are<sp/>provided.<sp/>Check<sp/>the<sp/>device-specific<sp/>ECDSA<sp/>documentation</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>for<sp/>curve<sp/>type<sp/>(short<sp/>Weierstrass,<sp/>Montgomery,<sp/>Edwards)<sp/>support<sp/>for<sp/>your<sp/>device.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>ECDSA<sp/>support<sp/>for<sp/>a<sp/>curve<sp/>type<sp/>on<sp/>a<sp/>device<sp/>does<sp/>not<sp/>imply<sp/>curve-type<sp/>support<sp/>for</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>other<sp/>ECC<sp/>schemes.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>Public<sp/>keys<sp/>and<sp/>shared<sp/>secrets<sp/>are<sp/>points<sp/>on<sp/>an<sp/>elliptic<sp/>curve.<sp/>These<sp/>points<sp/>can</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>be<sp/>expressed<sp/>in<sp/>several<sp/>ways.<sp/>The<sp/>most<sp/>common<sp/>one<sp/>is<sp/>in<sp/>affine<sp/>coordinates<sp/>as<sp/>an</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>X,Y<sp/>pair.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>This<sp/>API<sp/>uses<sp/>points<sp/>expressed<sp/>in<sp/>affine<sp/>coordinates.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>The<sp/>point<sp/>is<sp/>stored<sp/>as<sp/>a<sp/>concatenated<sp/>array<sp/>of<sp/>X<sp/>followed<sp/>by<sp/>Y<sp/>in<sp/>a<sp/>location</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>described<sp/>by<sp/>its<sp/>CryptoKey.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>This<sp/>API<sp/>accepts<sp/>and<sp/>returns<sp/>the<sp/>keying<sp/>material<sp/>of<sp/>public<sp/>keys<sp/>according</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>following<sp/>table:</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>|<sp/>Curve<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Keying<sp/>Material<sp/>Array<sp/>|<sp/>Array<sp/>Length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>|--------------------|-----------------------|---------------------------|</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>|<sp/>Short<sp/>Weierstrass<sp/><sp/>|<sp/>[X,<sp/>Y]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>2<sp/>*<sp/>Curve<sp/>Param<sp/>Length<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>|<sp/>Montgomery<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>[X,<sp/>Y]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>2<sp/>*<sp/>Curve<sp/>Param<sp/>Length<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>|<sp/>Edwards<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>[X,<sp/>Y]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>2<sp/>*<sp/>Curve<sp/>Param<sp/>Length<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_ECDSA_Synopsis</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>##<sp/>Synopsis</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_ECDSA_Synopsis_Code</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>//<sp/>Import<sp/>ECDSA<sp/>Driver<sp/>definitions</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>myPrivateKey</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;myPrivateKey,<sp/>myPrivateKeyingMaterial,<sp/>sizeof(myPrivateKeyingMaterial));</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;pmsnKey,<sp/>pmsn,<sp/>sizeof(pmsn));</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>ECDSA_OperationSign_init(&amp;operationSign);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>operationSign.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>operationSign.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>operationSign.pmsn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pmsnKey;</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>operationSign.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>operationSign.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>operationSign.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>//<sp/>Generate<sp/>the<sp/>signature</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>operationResult<sp/>=<sp/>ECDSA_sign(ecdsaHandle,<sp/>&amp;operationSign);</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;theirPublicKey,<sp/>theirPublicKeyingMaterial,<sp/>sizeof(theirPublicKeyingMaterial));</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>ECDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>operationVerify.theirPublicKey<sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>operationVerify.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>operationVerify.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>operationVerify.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>//<sp/>Generate<sp/>the<sp/>keying<sp/>material<sp/>for<sp/>myPublicKey<sp/>and<sp/>store<sp/>it<sp/>in<sp/>myPublicKeyingMaterial</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>operationResult<sp/>=<sp/>ECDSA_verify(ecdsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>//<sp/>Close<sp/>the<sp/>driver</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>ECDSA_close(ecdsaHandle);</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@anchor<sp/>ti_drivers_ECDSA_Examples</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>#<sp/>Examples<sp/>#</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>##<sp/>ECDSA<sp/>sign<sp/>with<sp/>plaintext<sp/>CryotoKeys<sp/>#</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>...</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>//<sp/>This<sp/>vector<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>NIST<sp/>ST<sp/>toolkit<sp/>examples<sp/>from<sp/>ECDSA_Prime.pdf</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>myPrivateKeyingMaterial[32]<sp/>=<sp/>{0x96,<sp/>0xBF,<sp/>0x85,<sp/>0x49,<sp/>0xC3,<sp/>0x79,<sp/>0xE4,<sp/>0x04,</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xED,<sp/>0xA1,<sp/>0x08,<sp/>0xA5,<sp/>0x51,<sp/>0xF8,<sp/>0x36,<sp/>0x23,</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x12,<sp/>0xD8,<sp/>0xD1,<sp/>0xB2,<sp/>0xA5,<sp/>0xFA,<sp/>0x57,<sp/>0x06,</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE2,<sp/>0xCC,<sp/>0x22,<sp/>0x5C,<sp/>0xF6,<sp/>0xF9,<sp/>0x77,<sp/>0xC4};</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>messageHashSHA256[32]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0xC4,<sp/>0xA8,<sp/>0xC8,<sp/>0x99,<sp/>0x28,<sp/>0xCF,<sp/>0x80,<sp/>0xB6,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE4,<sp/>0x42,<sp/>0xD5,<sp/>0xBD,<sp/>0x28,<sp/>0x4D,<sp/>0xE3,<sp/>0xFD,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3A,<sp/>0x13,<sp/>0xD8,<sp/>0x65,<sp/>0x0C,<sp/>0x41,<sp/>0x1C,<sp/>0x21,</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x48,<sp/>0x95,<sp/>0x79,<sp/>0x2A,<sp/>0xA1,<sp/>0x41,<sp/>0x1A,<sp/>0xA4};</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>pmsn[32]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{0xAE,<sp/>0x50,<sp/>0xEE,<sp/>0xFA,<sp/>0x27,<sp/>0xB4,<sp/>0xDB,<sp/>0x14,</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9F,<sp/>0xE1,<sp/>0xFB,<sp/>0x04,<sp/>0xF2,<sp/>0x4B,<sp/>0x50,<sp/>0x58,</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x91,<sp/>0xE3,<sp/>0xAC,<sp/>0x4D,<sp/>0x2A,<sp/>0x5D,<sp/>0x43,<sp/>0xAA,</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCA,<sp/>0xC8,<sp/>0x7F,<sp/>0x79,<sp/>0x52,<sp/>0x7E,<sp/>0x1A,<sp/>0x7A};</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>r[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>s[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>CryptoKey<sp/>myPrivateKey;</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>CryptoKey<sp/>pmsnKey;</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>ECDSA_Handle<sp/>ecdsaHandle;</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>int_fast16_t<sp/>operationResult;</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>myPrivateKey</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;myPrivateKey,<sp/>myPrivateKeyingMaterial,<sp/>sizeof(myPrivateKeyingMaterial));</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;pmsnKey,<sp/>pmsn,<sp/>sizeof(pmsn));</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>the<sp/>operation</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>ECDSA_OperationSign_init(&amp;operationSign);</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>operationSign.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>operationSign.myPrivateKey<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;myPrivateKey;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>operationSign.pmsn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;pmsnKey;</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>operationSign.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>operationSign.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>operationSign.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>//<sp/>Generate<sp/>the<sp/>signature</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>operationResult<sp/>=<sp/>ECDSA_sign(ecdsaHandle,<sp/>&amp;operationSign);</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>if<sp/>(operationResult<sp/>!=<sp/>ECDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>//<sp/>Send<sp/>out<sp/>signature</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>//<sp/>r<sp/>should<sp/>be<sp/><sp/><sp/>0x4F,<sp/>0x10,<sp/>0x46,<sp/>0xCA,<sp/>0x9A,<sp/>0xB6,<sp/>0x25,<sp/>0x73,</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF5,<sp/>0x3E,<sp/>0x0B,<sp/>0x1F,<sp/>0x6F,<sp/>0x31,<sp/>0x4C,<sp/>0xE4,</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x0F,<sp/>0x50,<sp/>0xB1,<sp/>0xF3,<sp/>0xD1,<sp/>0x65,<sp/>0xFF,</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x65,<sp/>0x41,<sp/>0x7F,<sp/>0xD0,<sp/>0x76,<sp/>0xF5,<sp/>0x42,<sp/>0x2B</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>//</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>//<sp/>s<sp/>should<sp/>be<sp/><sp/><sp/>0xF1,<sp/>0xFA,<sp/>0x63,<sp/>0x6B,<sp/>0xDB,<sp/>0x9B,<sp/>0x32,<sp/>0x4B,</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2C,<sp/>0x26,<sp/>0x9D,<sp/>0xE6,<sp/>0x6F,<sp/>0x88,<sp/>0xC1,<sp/>0x98,</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x2A,<sp/>0x50,<sp/>0x89,<sp/>0x3A,<sp/>0x99,<sp/>0x3A,<sp/>0x3E,</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCD,<sp/>0x92,<sp/>0x63,<sp/>0x2D,<sp/>0x12,<sp/>0xC2,<sp/>0x42,<sp/>0xDC</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>##<sp/>ECDSA<sp/>verify<sp/>with<sp/>plaintext<sp/>CryotoKeys<sp/>#</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@code</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/cryptoutils/cryptokey/CryptoKeyPlaintext.h&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>#include<sp/>&lt;ti/drivers/ECDSA.h&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>...</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>//<sp/>This<sp/>vector<sp/>is<sp/>taken<sp/>from<sp/>the<sp/>NIST<sp/>ST<sp/>toolkit<sp/>examples<sp/>from<sp/>ECDSA_Prime.pdf</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>theirPublicKeyingMaterial[64]<sp/>=<sp/><sp/>{0x19,<sp/>0x7A,<sp/>0xBC,<sp/>0x89,<sp/>0x08,<sp/>0xCD,<sp/>0x01,<sp/>0x82,</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA3,<sp/>0xA2,<sp/>0x9E,<sp/>0x1E,<sp/>0xAD,<sp/>0xA0,<sp/>0xB3,<sp/>0x62,</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1C,<sp/>0xBA,<sp/>0x98,<sp/>0x47,<sp/>0x73,<sp/>0x8C,<sp/>0xDC,<sp/>0xF1,</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD3,<sp/>0xBA,<sp/>0x94,<sp/>0xFE,<sp/>0xFD,<sp/>0x8A,<sp/>0xE0,<sp/>0xB7,</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x09,<sp/>0x5E,<sp/>0xCC,<sp/>0x06,<sp/>0xC6,<sp/>0xBB,<sp/>0x63,<sp/>0xB5,</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x61,<sp/>0x9E,<sp/>0x52,<sp/>0x43,<sp/>0xAE,<sp/>0xC7,<sp/>0xAD,<sp/>0x63,</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x90,<sp/>0x72,<sp/>0x28,<sp/>0x19,<sp/>0xE4,<sp/>0x26,<sp/>0xB2,<sp/>0x4B,</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7A,<sp/>0xBF,<sp/>0x9D,<sp/>0x95,<sp/>0x47,<sp/>0xF7,<sp/>0x03,<sp/>0x36};</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>messageHashSHA256[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xC4,<sp/>0xA8,<sp/>0xC8,<sp/>0x99,<sp/>0x28,<sp/>0xCF,<sp/>0x80,<sp/>0xB6,</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xE4,<sp/>0x42,<sp/>0xD5,<sp/>0xBD,<sp/>0x28,<sp/>0x4D,<sp/>0xE3,<sp/>0xFD,</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3A,<sp/>0x13,<sp/>0xD8,<sp/>0x65,<sp/>0x0C,<sp/>0x41,<sp/>0x1C,<sp/>0x21,</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x48,<sp/>0x95,<sp/>0x79,<sp/>0x2A,<sp/>0xA1,<sp/>0x41,<sp/>0x1A,<sp/>0xA4};</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>r[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0x4F,<sp/>0x10,<sp/>0x46,<sp/>0xCA,<sp/>0x9A,<sp/>0xB6,<sp/>0x25,<sp/>0x73,</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xF5,<sp/>0x3E,<sp/>0x0B,<sp/>0x1F,<sp/>0x6F,<sp/>0x31,<sp/>0x4C,<sp/>0xE4,</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x0F,<sp/>0x50,<sp/>0xB1,<sp/>0xF3,<sp/>0xD1,<sp/>0x65,<sp/>0xFF,</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x65,<sp/>0x41,<sp/>0x7F,<sp/>0xD0,<sp/>0x76,<sp/>0xF5,<sp/>0x42,<sp/>0x2B};</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>uint8_t<sp/>s[32]<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{0xF1,<sp/>0xFA,<sp/>0x63,<sp/>0x6B,<sp/>0xDB,<sp/>0x9B,<sp/>0x32,<sp/>0x4B,</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x2C,<sp/>0x26,<sp/>0x9D,<sp/>0xE6,<sp/>0x6F,<sp/>0x88,<sp/>0xC1,<sp/>0x98,</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x81,<sp/>0x2A,<sp/>0x50,<sp/>0x89,<sp/>0x3A,<sp/>0x99,<sp/>0x3A,<sp/>0x3E,</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCD,<sp/>0x92,<sp/>0x63,<sp/>0x2D,<sp/>0x12,<sp/>0xC2,<sp/>0x42,<sp/>0xDC};</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>CryptoKey<sp/>theirPublicKey;</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>ECDSA_Handle<sp/>ecdsaHandle;</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>int_fast16_t<sp/>operationResult;</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>ECDSA_OperationVerify<sp/>operationVerify;</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>//<sp/>Since<sp/>we<sp/>are<sp/>using<sp/>default<sp/>ECDSA_Params,<sp/>we<sp/>just<sp/>pass<sp/>in<sp/>NULL<sp/>for<sp/>that<sp/>parameter.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>ecdsaHandle<sp/>=<sp/>ECDSA_open(0,<sp/>NULL);</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>if<sp/>(!ecdsaHandle)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>//<sp/>Initialize<sp/>theirPublicKey</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>CryptoKeyPlaintext_initKey(&amp;theirPublicKey,<sp/>theirPublicKeyingMaterial,<sp/>sizeof(theirPublicKeyingMaterial));</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>ECDSA_OperationVerify_init(&amp;operationVerify);</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>operationVerify.curve<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&amp;ECCParams_NISTP256;</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>operationVerify.theirPublicKey<sp/><sp/>=<sp/>&amp;theirPublicKey;</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>operationVerify.hash<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>messageHash;</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>operationVerify.r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>operationVerify.s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>//<sp/>Generate<sp/>the<sp/>keying<sp/>material<sp/>for<sp/>myPublicKey<sp/>and<sp/>store<sp/>it<sp/>in<sp/>myPublicKeyingMaterial</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>operationResult<sp/>=<sp/>ECDSA_verify(ecdsaHandle,<sp/>&amp;operationVerify);</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>if<sp/>(operationResult<sp/>!=<sp/>ECDSA_STATUS_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>//<sp/>Handle<sp/>error</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@endcode</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ti_drivers_ECDSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ti_drivers_ECDSA__include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_crypto_key_8h" kindref="compound">ti/drivers/cryptoutils/cryptokey/CryptoKey.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_e_c_c_params_8h" kindref="compound">ti/drivers/cryptoutils/ecc/ECCParams.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="_e_c_d_s_a_8h_1af0557cd1a241899dbe217ff6f36fffd3" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_RESERVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="_e_c_d_s_a_8h_1a183cb58b608d3ddca2814118bc3e6d58" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="_e_c_d_s_a_8h_1af9e7be7d0379e85deb66de69bcc801f2" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="_e_c_d_s_a_8h_1a10c2305f3aad581623a9828b116b6418" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_RESOURCE_UNAVAILABLE<sp/>(-2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="_e_c_d_s_a_8h_1af8e62a453a17a2259dc7d90cdffa1027" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_INVALID_PMSN<sp/>(-3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="_e_c_d_s_a_8h_1a7f28203b6d117f448e07f6ca9a76fb9b" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_R_LARGER_THAN_ORDER<sp/>(-4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="_e_c_d_s_a_8h_1af49a1701c4762053d1c5bd4f5013f1d2" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_S_LARGER_THAN_ORDER<sp/>(-5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="_e_c_d_s_a_8h_1a0b7af7614f3a3f4d318e29f629968524" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_PUBLIC_KEY_NOT_ON_CURVE<sp/>(-6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="_e_c_d_s_a_8h_1a6759d42de4b04816b814b989ca8e42ab" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_PUBLIC_KEY_LARGER_THAN_PRIME<sp/>(-7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="_e_c_d_s_a_8h_1adc0537d9a7af71de05125d7a7abbe578" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_POINT_AT_INFINITY<sp/>(-8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="_e_c_d_s_a_8h_1a63a2a564cbd3c0f004c8829d95b40b62" refkind="member"><highlight class="preprocessor">#define<sp/>ECDSA_STATUS_CANCELED<sp/>(-9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_c_d_s_a___config" kindref="compound">ECDSA_Config</ref><sp/>*<ref refid="_e_c_d_s_a_8h_1a656e37d7e9595049cad7c4d88e09c545" kindref="member">ECDSA_Handle</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="474" refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a12caa37a0d66bfabe52862dec969dd6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a12caa37a0d66bfabe52862dec969dd6e" kindref="member">ECDSA_RETURN_BEHAVIOR_CALLBACK</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480" refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a2bb6b8792bfa1d4dca40c458d008d92b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341a2bb6b8792bfa1d4dca40c458d008d92b" kindref="member">ECDSA_RETURN_BEHAVIOR_BLOCKING</ref><sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484" refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341aa0384662e30a5de0ab321cdef21f1b4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341aa0384662e30a5de0ab321cdef21f1b4a" kindref="member">ECDSA_RETURN_BEHAVIOR_POLLING</ref><sp/><sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal">}<sp/><ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341" kindref="member">ECDSA_ReturnBehavior</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="struct_e_c_d_s_a___config" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_e_c_d_s_a___config" kindref="compound">ECDSA_Config</ref><sp/>{</highlight></codeline>
<codeline lineno="503" refid="struct_e_c_d_s_a___config_1a8efd7aac4a77735e883e9b083470ae0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___config_1a8efd7aac4a77735e883e9b083470ae0e" kindref="member">object</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="struct_e_c_d_s_a___config_1a477cd534c7653db9d78ef16c4e05c98f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="struct_e_c_d_s_a___config_1a477cd534c7653db9d78ef16c4e05c98f" kindref="member">hwAttrs</ref>;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}<sp/><ref refid="_e_c_d_s_a_8h_1a45a1d41d2101d26df62f3e4ed78f08fa" kindref="member">ECDSA_Config</ref>;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="struct_e_c_d_s_a___operation_sign" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="513" refid="struct_e_c_d_s_a___operation_sign_1addbb81fadade3018c2b487249418f525" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_c_params___curve_params__" kindref="compound">ECCParams_CurveParams</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1addbb81fadade3018c2b487249418f525" kindref="member">curve</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="514" refid="struct_e_c_d_s_a___operation_sign_1a843fb01b09db7fdf743ae969b0f39f04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key__" kindref="compound">CryptoKey</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1a843fb01b09db7fdf743ae969b0f39f04" kindref="member">myPrivateKey</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="517" refid="struct_e_c_d_s_a___operation_sign_1a1024333554aa19d8d93d9f59387b90f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key__" kindref="compound">CryptoKey</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1a1024333554aa19d8d93d9f59387b90f0" kindref="member">pmsn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523" refid="struct_e_c_d_s_a___operation_sign_1a505593c925c3a064608f93f04c4545b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1a505593c925c3a064608f93f04c4545b1" kindref="member">hash</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526" refid="struct_e_c_d_s_a___operation_sign_1a138c214cef2a16aa07169106f3ccfcce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1a138c214cef2a16aa07169106f3ccfcce" kindref="member">r</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531" refid="struct_e_c_d_s_a___operation_sign_1a257f3e84f91abca240eea1f1c074d805" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_sign_1a257f3e84f91abca240eea1f1c074d805" kindref="member">s</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal">}<sp/><ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="struct_e_c_d_s_a___operation_verify" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="542" refid="struct_e_c_d_s_a___operation_verify_1afad22e22015a4e3f1955fb04bb3e57b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_e_c_c_params___curve_params__" kindref="compound">ECCParams_CurveParams</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_verify_1afad22e22015a4e3f1955fb04bb3e57b4" kindref="member">curve</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="543" refid="struct_e_c_d_s_a___operation_verify_1a00d9dd6bfbca401c1864b4695f4778d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_crypto_key__" kindref="compound">CryptoKey</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_verify_1a00d9dd6bfbca401c1864b4695f4778d7" kindref="member">theirPublicKey</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="546" refid="struct_e_c_d_s_a___operation_verify_1a769f7680681d01f69682d421962a0f3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_verify_1a769f7680681d01f69682d421962a0f3e" kindref="member">hash</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549" refid="struct_e_c_d_s_a___operation_verify_1aebe0eb36778b225c51d7d024e6aa69bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_verify_1aebe0eb36778b225c51d7d024e6aa69bc" kindref="member">r</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="553" refid="struct_e_c_d_s_a___operation_verify_1a88c77cd7664b04e6eecb0abe2d34d271" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___operation_verify_1a88c77cd7664b04e6eecb0abe2d34d271" kindref="member">s</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal">}<sp/><ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="union_e_c_d_s_a___operation" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="563" refid="union_e_c_d_s_a___operation_1ab1c51289213e9bd28d1fd04e9710b341" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="union_e_c_d_s_a___operation_1ab1c51289213e9bd28d1fd04e9710b341" kindref="member">sign</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564" refid="union_e_c_d_s_a___operation_1a26b1d7dd7c7ea3ebd7d947ae97b87430" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref><sp/><sp/><sp/>*<ref refid="union_e_c_d_s_a___operation_1a26b1d7dd7c7ea3ebd7d947ae97b87430" kindref="member">verify</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal">}<sp/><ref refid="union_e_c_d_s_a___operation" kindref="compound">ECDSA_Operation</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="571" refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9ac1fb160e151a4c8adbf40e6a6cf94ff3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9ac1fb160e151a4c8adbf40e6a6cf94ff3" kindref="member">ECDSA_OPERATION_TYPE_SIGN</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="572" refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9abb42383a7909a4aadd941cfe98136341" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9abb42383a7909a4aadd941cfe98136341" kindref="member">ECDSA_OPERATION_TYPE_VERIFY</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}<sp/><ref refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9" kindref="member">ECDSA_OperationType</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="_e_c_d_s_a_8h_1a2969615c2ad61fa703031658001791a1" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_e_c_d_s_a_8h_1a2969615c2ad61fa703031658001791a1" kindref="member">ECDSA_CallbackFxn</ref>)<sp/>(ECDSA_Handle<sp/>handle,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_fast16_t<sp/>returnStatus,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="union_e_c_d_s_a___operation" kindref="compound">ECDSA_Operation</ref><sp/>operation,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a12591c66c1af7e332fb99f04f5c17ec9" kindref="member">ECDSA_OperationType</ref><sp/>operationType);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="struct_e_c_d_s_a___params" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="607" refid="struct_e_c_d_s_a___params_1a5e0fac67e0d31d3b8a97b76e65c61daf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a7095d19c4638c8e46234d85ed6f0f341" kindref="member">ECDSA_ReturnBehavior</ref><sp/><sp/><sp/><sp/><ref refid="struct_e_c_d_s_a___params_1a5e0fac67e0d31d3b8a97b76e65c61daf" kindref="member">returnBehavior</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="608" refid="struct_e_c_d_s_a___params_1a15d0723f5c49bc98fef637e9cd4715b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_e_c_d_s_a_8h_1a2969615c2ad61fa703031658001791a1" kindref="member">ECDSA_CallbackFxn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_e_c_d_s_a___params_1a15d0723f5c49bc98fef637e9cd4715b7" kindref="member">callbackFxn</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="609" refid="struct_e_c_d_s_a___params_1adcb40575a423250ab665463df1d8526b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_e_c_d_s_a___params_1adcb40575a423250ab665463df1d8526b" kindref="member">timeout</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="612" refid="struct_e_c_d_s_a___params_1a6838b43ba0c93f8f32856c1362ab31d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="struct_e_c_d_s_a___params_1a6838b43ba0c93f8f32856c1362ab31d1" kindref="member">custom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal">}<sp/><ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_c_d_s_a_8h_1a12529e861cad0fd9932b88c7023a3b77" kindref="member">ECDSA_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_c_d_s_a_8h_1afb8b4f22218005bddbed06ead6166bb8" kindref="member">ECDSA_close</ref>(ECDSA_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal">ECDSA_Handle<sp/><ref refid="_e_c_d_s_a_8h_1af7a157511011586ac3d79800f9ce0aab" kindref="member">ECDSA_open</ref>(uint_least8_t<sp/>index,<sp/><ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_c_d_s_a_8h_1ac8a50e673e908088f643396f7f898f84" kindref="member">ECDSA_Params_init</ref>(<ref refid="struct_e_c_d_s_a___params" kindref="compound">ECDSA_Params</ref><sp/>*params);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_c_d_s_a_8h_1a483eed05a93c583df6599b6a07721a70" kindref="member">ECDSA_OperationSign_init</ref>(<ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_e_c_d_s_a_8h_1a398f078544d6c5506027a7dd6608db9a" kindref="member">ECDSA_OperationVerify_init</ref>(<ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_c_d_s_a_8h_1a3ad7bc590603181380f2f8d4c01e09f3" kindref="member">ECDSA_sign</ref>(ECDSA_Handle<sp/>handle,<sp/><ref refid="struct_e_c_d_s_a___operation_sign" kindref="compound">ECDSA_OperationSign</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_c_d_s_a_8h_1a474b05788ac25fb7ba032490bb418b96" kindref="member">ECDSA_verify</ref>(ECDSA_Handle<sp/>handle,<sp/><ref refid="struct_e_c_d_s_a___operation_verify" kindref="compound">ECDSA_OperationVerify</ref><sp/>*operation);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">int_fast16_t<sp/><ref refid="_e_c_d_s_a_8h_1a2b0e1e35912d647f946073b807cf205b" kindref="member">ECDSA_cancelOperation</ref>(ECDSA_Handle<sp/>handle);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ti_drivers_ECDSA__include<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/ECDSA.h"/>
  </compounddef>
</doxygen>
