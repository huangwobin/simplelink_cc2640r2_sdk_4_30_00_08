<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="struct_power_c_c26_x2___config" kind="struct" language="C++" prot="public">
    <compoundname>PowerCC26X2_Config</compoundname>
    <includes refid="_power_c_c26_x2_8h" local="no">PowerCC26X2.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1ae8b483d05ce9a7f7d01fc6d0856cc238" prot="public" static="no" mutable="no">
        <type><ref refid="_power_8h_1a435fdeb71d13ea6be86f599c9b6a0d78" kindref="member">Power_PolicyInitFxn</ref></type>
        <definition>Power_PolicyInitFxn PowerCC26X2_Config::policyInitFxn</definition>
        <argsstring></argsstring>
        <name>policyInitFxn</name>
        <briefdescription>
<para>The Power Policy&apos;s initialization function. </para>        </briefdescription>
        <detaileddescription>
<para>If the policy does not have an initialization function, &apos;NULL&apos; should be specified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="121" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1ad724fc3b2f6c398c3e0bad52fad61668" prot="public" static="no" mutable="no">
        <type><ref refid="_power_8h_1a333038d1e9cd5f93dda7b83f8a1afa8b" kindref="member">Power_PolicyFxn</ref></type>
        <definition>Power_PolicyFxn PowerCC26X2_Config::policyFxn</definition>
        <argsstring></argsstring>
        <name>policyFxn</name>
        <briefdescription>
<para>The Power Policy function. </para>        </briefdescription>
        <detaileddescription>
<para>When enabled, this function is invoked in the idle loop, to opportunistically select and activate sleep states.</para><para>Two reference policies are provided:</para><para>PowerCC26X2_doWFI() - a simple policy that invokes CPU wait for interrupt (WFI)</para><para>PowerCC26X2_standbyPolicy() - an agressive policy that considers constraints, time until next scheduled work, and sleep state latencies, and optionally puts the device into the STANDBY state, the IDLE state, or as a minimum, WFI.</para><para>Custom policies can be written, and specified via this function pointer.</para><para>In addition to this static selection, the Power Policy can be dynamically changed at runtime, via the <ref refid="_power_8h_1aa4af0d238813058bf6146df6021df8cc" kindref="member">Power_setPolicy()</ref> API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="143" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1a72cdfe7f045f2c69d7231281e2c64c51" prot="public" static="no" mutable="no">
        <type>bool(*</type>
        <definition>bool(* PowerCC26X2_Config::calibrateFxn) (unsigned int)</definition>
        <argsstring>)(unsigned int)</argsstring>
        <name>calibrateFxn</name>
        <briefdescription>
<para>The function to be used for activating RC Oscillator (RCOSC) calibration. </para>        </briefdescription>
        <detaileddescription>
<para>Calibration is normally enabled, via specification of the function PowerCC26X2_calibrate(). This enables high accuracy operation, and faster high frequency crystal oscillator (XOSC_HF) startups.</para><para>To disable RCOSC calibration, the function PowerCC26X2_noCalibrate() should be specified. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="155" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1a6439c6e55fbd69c64995742b41d91dad" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerCC26X2_Config::enablePolicy</definition>
        <argsstring></argsstring>
        <name>enablePolicy</name>
        <briefdescription>
<para>Boolean specifying if the Power Policy function is enabled. </para>        </briefdescription>
        <detaileddescription>
<para>If &apos;true&apos;, the policy function will be invoked once for each pass of the idle loop.</para><para>If &apos;false&apos;, the policy will not be invoked.</para><para>In addition to this static setting, the power policy can be dynamically enabled and disabled at runtime, via the <ref refid="_power_8h_1ae8d6092a8fb35b6db52a69a35fcc327f" kindref="member">Power_enablePolicy()</ref> and <ref refid="_power_8h_1acf9706c39bd0fa07ec977dd643e5dd2a" kindref="member">Power_disablePolicy()</ref> functions, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="168" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1a7bff0de8698936011f253fa50b8e2ad4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerCC26X2_Config::calibrateRCOSC_LF</definition>
        <argsstring></argsstring>
        <name>calibrateRCOSC_LF</name>
        <briefdescription>
<para>Boolean specifying whether the low frequency RC oscillator (RCOSC_LF) should be calibrated. </para>        </briefdescription>
        <detaileddescription>
<para>If RCOSC calibration is enabled (above, via specification of an appropriate calibrateFxn), this Boolean specifies whether RCOSC_LF should be calibrated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="177" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1a40af3bd4358266557833b9382011c09b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool PowerCC26X2_Config::calibrateRCOSC_HF</definition>
        <argsstring></argsstring>
        <name>calibrateRCOSC_HF</name>
        <briefdescription>
<para>Boolean specifying whether the high frequency RC oscillator (RCOSC_HF) should be calibrated. </para>        </briefdescription>
        <detaileddescription>
<para>If RCOSC calibration is enabled (above, via specification of an appropriate calibrateFxn), this Boolean specifies whether RCOSC_HF should be calibrated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="186" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_power_c_c26_x2___config_1a409db316d66e690d875efb98de2894f9" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* PowerCC26X2_Config::enableTCXOFxn) (bool)</definition>
        <argsstring>)(bool)</argsstring>
        <name>enableTCXOFxn</name>
        <briefdescription>
<para>The function to be used for enabling or disabling the TCXO. </para>        </briefdescription>
        <detaileddescription>
<para>If TCXO is configured to be enabled in CCFG this function will enable or disable the TCXO by asserting or deasserting power to it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="193" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Global configuration structure. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" line="114" column="1" bodyfile="exports/tidrivers_cc13xx_cc26xx/source/ti/drivers/power/PowerCC26X2.h" bodystart="114" bodyend="194"/>
    <listofallmembers>
      <member refid="struct_power_c_c26_x2___config_1a72cdfe7f045f2c69d7231281e2c64c51" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>calibrateFxn</name></member>
      <member refid="struct_power_c_c26_x2___config_1a40af3bd4358266557833b9382011c09b" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>calibrateRCOSC_HF</name></member>
      <member refid="struct_power_c_c26_x2___config_1a7bff0de8698936011f253fa50b8e2ad4" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>calibrateRCOSC_LF</name></member>
      <member refid="struct_power_c_c26_x2___config_1a6439c6e55fbd69c64995742b41d91dad" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>enablePolicy</name></member>
      <member refid="struct_power_c_c26_x2___config_1a409db316d66e690d875efb98de2894f9" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>enableTCXOFxn</name></member>
      <member refid="struct_power_c_c26_x2___config_1ad724fc3b2f6c398c3e0bad52fad61668" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>policyFxn</name></member>
      <member refid="struct_power_c_c26_x2___config_1ae8b483d05ce9a7f7d01fc6d0856cc238" prot="public" virt="non-virtual"><scope>PowerCC26X2_Config</scope><name>policyInitFxn</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
